
kernel8-32.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea000d56 	b	b5c0 <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

00008070 <main>:
    8070:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8074:	e24ddd76 	sub	sp, sp, #7552	; 0x1d80
    8078:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    807c:	e28d0004 	add	r0, sp, #4
    8080:	eb00000a 	bl	80b0 <CKernel::CKernel()>
    8084:	e28d0004 	add	r0, sp, #4
    8088:	eb00004e 	bl	81c8 <CKernel::Initialize()>
    808c:	e3500000 	cmp	r0, #0
    8090:	0a000004 	beq	80a8 <main+0x38>
    8094:	e28d0004 	add	r0, sp, #4
    8098:	eb00012a 	bl	8548 <CKernel::Run()>
    809c:	e3500002 	cmp	r0, #2
    80a0:	1a000000 	bne	80a8 <main+0x38>
    80a4:	eb000d3c 	bl	b59c <reboot>
    80a8:	eb000d36 	bl	b588 <halt>
    80ac:	00000000 	andeq	r0, r0, r0

000080b0 <CKernel::CKernel()>:
    80b0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    80b4:	e3a01001 	mov	r1, #1
    80b8:	e1a04000 	mov	r4, r0
    80bc:	e2809010 	add	r9, r0, #16
    80c0:	e284701c 	add	r7, r4, #28
    80c4:	eb000c96 	bl	b324 <CMemorySystem::CMemorySystem(bool)>
    80c8:	e1a00009 	mov	r0, r9
    80cc:	eb0005cf 	bl	9810 <CActLED::CActLED()>
    80d0:	e1a00007 	mov	r0, r7
    80d4:	eb00136b 	bl	ce88 <CKernelOptions::CKernelOptions()>
    80d8:	e2840e87 	add	r0, r4, #2160	; 0x870
    80dc:	e2800004 	add	r0, r0, #4
    80e0:	e2848d66 	add	r8, r4, #6528	; 0x1980
    80e4:	eb001f19 	bl	fd50 <CDeviceNameService::CDeviceNameService()>
    80e8:	e1a00007 	mov	r0, r7
    80ec:	eb0014b3 	bl	d3c0 <CKernelOptions::GetWidth() const>
    80f0:	e1a05000 	mov	r5, r0
    80f4:	e1a00007 	mov	r0, r7
    80f8:	e2888028 	add	r8, r8, #40	; 0x28
    80fc:	eb0014b1 	bl	d3c8 <CKernelOptions::GetHeight() const>
    8100:	e1a02000 	mov	r2, r0
    8104:	e2840e87 	add	r0, r4, #2160	; 0x870
    8108:	e3a03000 	mov	r3, #0
    810c:	e1a01005 	mov	r1, r5
    8110:	e280000c 	add	r0, r0, #12
    8114:	eb0015fb 	bl	d908 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>
    8118:	e3a02000 	mov	r2, #0
    811c:	e2840e8d 	add	r0, r4, #2256	; 0x8d0
    8120:	e1a01002 	mov	r1, r2
    8124:	e2800008 	add	r0, r0, #8
    8128:	e2846d6f 	add	r6, r4, #7104	; 0x1bc0
    812c:	eb0023f1 	bl	110f8 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)>
    8130:	e2840d66 	add	r0, r4, #6528	; 0x1980
    8134:	e2800024 	add	r0, r0, #36	; 0x24
    8138:	e2866028 	add	r6, r6, #40	; 0x28
    813c:	eb002d48 	bl	13664 <CExceptionHandler::CExceptionHandler()>
    8140:	e1a00008 	mov	r0, r8
    8144:	eb002e71 	bl	13b10 <CInterruptSystem::CInterruptSystem()>
    8148:	e1a01008 	mov	r1, r8
    814c:	e1a00006 	mov	r0, r6
    8150:	e2845d75 	add	r5, r4, #7488	; 0x1d40
    8154:	eb000db1 	bl	b820 <CTimer::CTimer(CInterruptSystem*)>
    8158:	e1a00007 	mov	r0, r7
    815c:	eb00149e 	bl	d3dc <CKernelOptions::GetLogLevel() const>
    8160:	e1a01000 	mov	r1, r0
    8164:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    8168:	e1a02006 	mov	r2, r6
    816c:	e2800014 	add	r0, r0, #20
    8170:	e285502c 	add	r5, r5, #44	; 0x2c
    8174:	eb00200f 	bl	101b8 <CLogger::CLogger(unsigned int, CTimer*)>
    8178:	e2840c1d 	add	r0, r4, #7424	; 0x1d00
    817c:	e280000c 	add	r0, r0, #12
    8180:	eb000245 	bl	8a9c <CScheduler::CScheduler()>
    8184:	e2842a01 	add	r2, r4, #4096	; 0x1000
    8188:	e3a03000 	mov	r3, #0
    818c:	e1a00005 	mov	r0, r5
    8190:	e1a01003 	mov	r1, r3
    8194:	e5823d68 	str	r3, [r2, #3432]	; 0xd68
    8198:	eb00017b 	bl	878c <COscillator::COscillator(CSynthModule*)>
    819c:	e2840d76 	add	r0, r4, #7552	; 0x1d80
    81a0:	e1a01005 	mov	r1, r5
    81a4:	e2800008 	add	r0, r0, #8
    81a8:	eb000177 	bl	878c <COscillator::COscillator(CSynthModule*)>
    81ac:	e1a00009 	mov	r0, r9
    81b0:	e3a03f7d 	mov	r3, #500	; 0x1f4
    81b4:	e3a020c8 	mov	r2, #200	; 0xc8
    81b8:	e3a01005 	mov	r1, #5
    81bc:	eb000607 	bl	99e0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    81c0:	e1a00004 	mov	r0, r4
    81c4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000081c8 <CKernel::Initialize()>:
    81c8:	e92d4070 	push	{r4, r5, r6, lr}
    81cc:	e2804e87 	add	r4, r0, #2160	; 0x870
    81d0:	e284400c 	add	r4, r4, #12
    81d4:	e1a05000 	mov	r5, r0
    81d8:	e1a00004 	mov	r0, r4
    81dc:	eb0016a1 	bl	dc68 <CScreenDevice::Initialize()>
    81e0:	e3500000 	cmp	r0, #0
    81e4:	1a000001 	bne	81f0 <CKernel::Initialize()+0x28>
    81e8:	e3a00000 	mov	r0, #0
    81ec:	e8bd8070 	pop	{r4, r5, r6, pc}
    81f0:	e2850e8d 	add	r0, r5, #2256	; 0x8d0
    81f4:	e3a01cc2 	mov	r1, #49664	; 0xc200
    81f8:	e3401001 	movt	r1, #1
    81fc:	e2800008 	add	r0, r0, #8
    8200:	eb0023eb 	bl	111b4 <CSerialDevice::Initialize(unsigned int)>
    8204:	e3500000 	cmp	r0, #0
    8208:	0afffff6 	beq	81e8 <CKernel::Initialize()+0x20>
    820c:	e285001c 	add	r0, r5, #28
    8210:	eb00146e 	bl	d3d0 <CKernelOptions::GetLogDevice() const>
    8214:	e1a01000 	mov	r1, r0
    8218:	e2850e87 	add	r0, r5, #2160	; 0x870
    821c:	e3a02000 	mov	r2, #0
    8220:	e2800004 	add	r0, r0, #4
    8224:	eb001f33 	bl	fef8 <CDeviceNameService::GetDevice(char const*, bool)>
    8228:	e3500000 	cmp	r0, #0
    822c:	11a01000 	movne	r1, r0
    8230:	e2850b07 	add	r0, r5, #7168	; 0x1c00
    8234:	01a01004 	moveq	r1, r4
    8238:	e2800014 	add	r0, r0, #20
    823c:	eb002204 	bl	10a54 <CLogger::Initialize(CDevice*)>
    8240:	e3500000 	cmp	r0, #0
    8244:	0affffe7 	beq	81e8 <CKernel::Initialize()+0x20>
    8248:	e2850d66 	add	r0, r5, #6528	; 0x1980
    824c:	e2800028 	add	r0, r0, #40	; 0x28
    8250:	eb002e76 	bl	13c30 <CInterruptSystem::Initialize()>
    8254:	e3500000 	cmp	r0, #0
    8258:	0affffe2 	beq	81e8 <CKernel::Initialize()+0x20>
    825c:	e2850d6f 	add	r0, r5, #7104	; 0x1bc0
    8260:	e2800028 	add	r0, r0, #40	; 0x28
    8264:	e8bd4070 	pop	{r4, r5, r6, lr}
    8268:	ea000dc7 	b	b98c <CTimer::Initialize()>

0000826c <CKernel::~CKernel()>:
    826c:	e92d4010 	push	{r4, lr}
    8270:	e1a04000 	mov	r4, r0
    8274:	e2800d76 	add	r0, r0, #7552	; 0x1d80
    8278:	e2800008 	add	r0, r0, #8
    827c:	eb000139 	bl	8768 <COscillator::~COscillator()>
    8280:	e2840d75 	add	r0, r4, #7488	; 0x1d40
    8284:	e280002c 	add	r0, r0, #44	; 0x2c
    8288:	eb000136 	bl	8768 <COscillator::~COscillator()>
    828c:	e2840c1d 	add	r0, r4, #7424	; 0x1d00
    8290:	e280000c 	add	r0, r0, #12
    8294:	eb00021a 	bl	8b04 <CScheduler::~CScheduler()>
    8298:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    829c:	e2800014 	add	r0, r0, #20
    82a0:	eb001fdd 	bl	1021c <CLogger::~CLogger()>
    82a4:	e2840d6f 	add	r0, r4, #7104	; 0x1bc0
    82a8:	e2800028 	add	r0, r0, #40	; 0x28
    82ac:	eb000d7d 	bl	b8a8 <CTimer::~CTimer()>
    82b0:	e2840d66 	add	r0, r4, #6528	; 0x1980
    82b4:	e2800028 	add	r0, r0, #40	; 0x28
    82b8:	eb002e57 	bl	13c1c <CInterruptSystem::~CInterruptSystem()>
    82bc:	e2840d66 	add	r0, r4, #6528	; 0x1980
    82c0:	e2800024 	add	r0, r0, #36	; 0x24
    82c4:	eb002d0a 	bl	136f4 <CExceptionHandler::~CExceptionHandler()>
    82c8:	e2840e8d 	add	r0, r4, #2256	; 0x8d0
    82cc:	e2800008 	add	r0, r0, #8
    82d0:	eb0024ba 	bl	115c0 <CSerialDevice::~CSerialDevice()>
    82d4:	e2840e87 	add	r0, r4, #2160	; 0x870
    82d8:	e280000c 	add	r0, r0, #12
    82dc:	eb001523 	bl	d770 <CScreenDevice::~CScreenDevice()>
    82e0:	e2840e87 	add	r0, r4, #2160	; 0x870
    82e4:	e2800004 	add	r0, r0, #4
    82e8:	eb001eab 	bl	fd9c <CDeviceNameService::~CDeviceNameService()>
    82ec:	e284001c 	add	r0, r4, #28
    82f0:	eb00142d 	bl	d3ac <CKernelOptions::~CKernelOptions()>
    82f4:	e2840010 	add	r0, r4, #16
    82f8:	eb000599 	bl	9964 <CActLED::~CActLED()>
    82fc:	e1a00004 	mov	r0, r4
    8300:	eb000b7e 	bl	b100 <CMemorySystem::~CMemorySystem()>
    8304:	e1a00004 	mov	r0, r4
    8308:	e8bd8010 	pop	{r4, pc}

0000830c <CKernel::GetSoundData(void*, unsigned int)>:
    830c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8310:	e1b06082 	lsls	r6, r2, #1
    8314:	ed2d8b04 	vpush	{d8-d9}
    8318:	e24dd008 	sub	sp, sp, #8
    831c:	0a000021 	beq	83a8 <CKernel::GetSoundData(void*, unsigned int)+0x9c>
    8320:	f2809e30 	vmov.i64	d9, #0x0000000000000000
    8324:	e2808d75 	add	r8, r0, #7488	; 0x1d40
    8328:	e2805d76 	add	r5, r0, #7552	; 0x1d80
    832c:	ed9f8b21 	vldr	d8, [pc, #132]	; 83b8 <CKernel::GetSoundData(void*, unsigned int)+0xac>
    8330:	e1a04001 	mov	r4, r1
    8334:	e288802c 	add	r8, r8, #44	; 0x2c
    8338:	e2855008 	add	r5, r5, #8
    833c:	e3a07000 	mov	r7, #0
    8340:	e1a00008 	mov	r0, r8
    8344:	e2877002 	add	r7, r7, #2
    8348:	eb000153 	bl	889c <COscillator::NextSample()>
    834c:	e1a00005 	mov	r0, r5
    8350:	eb000151 	bl	889c <COscillator::NextSample()>
    8354:	e1a00005 	mov	r0, r5
    8358:	eb000103 	bl	876c <COscillator::GetOutputLevel() const>
    835c:	eeb70ac0 	vcvt.f64.f32	d0, s0
    8360:	eef60b00 	vmov.f64	d16, #96	; 0x3f000000  0.5
    8364:	e3a02002 	mov	r2, #2
    8368:	e28d1006 	add	r1, sp, #6
    836c:	e1a00004 	mov	r0, r4
    8370:	ee200b20 	vmul.f64	d0, d0, d16
    8374:	eef00b49 	vmov.f64	d16, d9
    8378:	eee00b08 	vfma.f64	d16, d0, d8
    837c:	eefd7be0 	vcvt.s32.f64	s15, d16
    8380:	ee173a90 	vmov	r3, s15
    8384:	e1cd30b6 	strh	r3, [sp, #6]
    8388:	eb00128f 	bl	cdcc <memcpy>
    838c:	e3a02002 	mov	r2, #2
    8390:	e28d1006 	add	r1, sp, #6
    8394:	e0840002 	add	r0, r4, r2
    8398:	e2844004 	add	r4, r4, #4
    839c:	eb00128a 	bl	cdcc <memcpy>
    83a0:	e1560007 	cmp	r6, r7
    83a4:	8affffe5 	bhi	8340 <CKernel::GetSoundData(void*, unsigned int)+0x34>
    83a8:	e28dd008 	add	sp, sp, #8
    83ac:	ecbd8b04 	vpop	{d8-d9}
    83b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    83b4:	e320f000 	nop	{0}
    83b8:	00000000 	.word	0x00000000
    83bc:	40dfffc0 	.word	0x40dfffc0

000083c0 <CKernel::WriteSoundData(unsigned int)>:
    83c0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    83c4:	e2519000 	subs	r9, r1, #0
    83c8:	ed2d8b04 	vpush	{d8-d9}
    83cc:	e24ddefb 	sub	sp, sp, #4016	; 0xfb0
    83d0:	e24dd00c 	sub	sp, sp, #12
    83d4:	e58d000c 	str	r0, [sp, #12]
    83d8:	0a00004b 	beq	850c <CKernel::WriteSoundData(unsigned int)+0x14c>
    83dc:	e2808d75 	add	r8, r0, #7488	; 0x1d40
    83e0:	e2806d76 	add	r6, r0, #7552	; 0x1d80
    83e4:	e2802c1d 	add	r2, r0, #7424	; 0x1d00
    83e8:	e288802c 	add	r8, r8, #44	; 0x2c
    83ec:	e2866008 	add	r6, r6, #8
    83f0:	e282200c 	add	r2, r2, #12
    83f4:	e2803a01 	add	r3, r0, #4096	; 0x1000
    83f8:	e58d2008 	str	r2, [sp, #8]
    83fc:	e58d3004 	str	r3, [sp, #4]
    8400:	e3590ffa 	cmp	r9, #1000	; 0x3e8
    8404:	e28d3018 	add	r3, sp, #24
    8408:	31a07089 	lslcc	r7, r9, #1
    840c:	23a07e7d 	movcs	r7, #2000	; 0x7d0
    8410:	31a0a109 	lslcc	sl, r9, #2
    8414:	23a0aefa 	movcs	sl, #4000	; 0xfa0
    8418:	358da000 	strcc	sl, [sp]
    841c:	33a09000 	movcc	r9, #0
    8420:	22499ffa 	subcs	r9, r9, #1000	; 0x3e8
    8424:	258da000 	strcs	sl, [sp]
    8428:	f2809e30 	vmov.i64	d9, #0x0000000000000000
    842c:	ed9f8b43 	vldr	d8, [pc, #268]	; 8540 <CKernel::WriteSoundData(unsigned int)+0x180>
    8430:	e0837087 	add	r7, r3, r7, lsl #1
    8434:	e1a05003 	mov	r5, r3
    8438:	e2834004 	add	r4, r3, #4
    843c:	ea000000 	b	8444 <CKernel::WriteSoundData(unsigned int)+0x84>
    8440:	e2844004 	add	r4, r4, #4
    8444:	e1a00008 	mov	r0, r8
    8448:	e28db016 	add	fp, sp, #22
    844c:	eb000112 	bl	889c <COscillator::NextSample()>
    8450:	e1a00006 	mov	r0, r6
    8454:	eb000110 	bl	889c <COscillator::NextSample()>
    8458:	e1a00006 	mov	r0, r6
    845c:	eb0000c2 	bl	876c <COscillator::GetOutputLevel() const>
    8460:	eeb70ac0 	vcvt.f64.f32	d0, s0
    8464:	eef60b00 	vmov.f64	d16, #96	; 0x3f000000  0.5
    8468:	e1a0100b 	mov	r1, fp
    846c:	e3a02002 	mov	r2, #2
    8470:	e1a00005 	mov	r0, r5
    8474:	ee200b20 	vmul.f64	d0, d0, d16
    8478:	eef00b49 	vmov.f64	d16, d9
    847c:	eee00b08 	vfma.f64	d16, d0, d8
    8480:	eefd7be0 	vcvt.s32.f64	s15, d16
    8484:	ee173a90 	vmov	r3, s15
    8488:	e1cd31b6 	strh	r3, [sp, #22]
    848c:	eb00124e 	bl	cdcc <memcpy>
    8490:	e2850002 	add	r0, r5, #2
    8494:	e1a0100b 	mov	r1, fp
    8498:	e3a02002 	mov	r2, #2
    849c:	e1a05004 	mov	r5, r4
    84a0:	eb001249 	bl	cdcc <memcpy>
    84a4:	e1540007 	cmp	r4, r7
    84a8:	1affffe4 	bne	8440 <CKernel::WriteSoundData(unsigned int)+0x80>
    84ac:	e59d3004 	ldr	r3, [sp, #4]
    84b0:	e1a0200a 	mov	r2, sl
    84b4:	e28d1018 	add	r1, sp, #24
    84b8:	e5933d68 	ldr	r3, [r3, #3432]	; 0xd68
    84bc:	e1a00003 	mov	r0, r3
    84c0:	e5933000 	ldr	r3, [r3]
    84c4:	e593300c 	ldr	r3, [r3, #12]
    84c8:	e12fff33 	blx	r3
    84cc:	e59d3000 	ldr	r3, [sp]
    84d0:	e1500003 	cmp	r0, r3
    84d4:	0a000010 	beq	851c <CKernel::WriteSoundData(unsigned int)+0x15c>
    84d8:	e59d300c 	ldr	r3, [sp, #12]
    84dc:	e3a02001 	mov	r2, #1
    84e0:	e3091820 	movw	r1, #38944	; 0x9820
    84e4:	e3401001 	movt	r1, #1
    84e8:	e2830b07 	add	r0, r3, #7168	; 0x1c00
    84ec:	e3093828 	movw	r3, #38952	; 0x9828
    84f0:	e3403001 	movt	r3, #1
    84f4:	e2800014 	add	r0, r0, #20
    84f8:	eb002149 	bl	10a24 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    84fc:	e59d0008 	ldr	r0, [sp, #8]
    8500:	eb0001c4 	bl	8c18 <CScheduler::Yield()>
    8504:	e3590000 	cmp	r9, #0
    8508:	1affffbc 	bne	8400 <CKernel::WriteSoundData(unsigned int)+0x40>
    850c:	e28ddefb 	add	sp, sp, #4016	; 0xfb0
    8510:	e28dd00c 	add	sp, sp, #12
    8514:	ecbd8b04 	vpop	{d8-d9}
    8518:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    851c:	e59d0008 	ldr	r0, [sp, #8]
    8520:	eb0001bc 	bl	8c18 <CScheduler::Yield()>
    8524:	e3590000 	cmp	r9, #0
    8528:	1affffb4 	bne	8400 <CKernel::WriteSoundData(unsigned int)+0x40>
    852c:	e28ddefb 	add	sp, sp, #4016	; 0xfb0
    8530:	e28dd00c 	add	sp, sp, #12
    8534:	ecbd8b04 	vpop	{d8-d9}
    8538:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    853c:	e320f000 	nop	{0}
    8540:	00000000 	.word	0x00000000
    8544:	40dfffc0 	.word	0x40dfffc0

00008548 <CKernel::Run()>:
    8548:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    854c:	e2809b07 	add	r9, r0, #7168	; 0x1c00
    8550:	e2899014 	add	r9, r9, #20
    8554:	e1a04000 	mov	r4, r0
    8558:	e3a02003 	mov	r2, #3
    855c:	e1a00009 	mov	r0, r9
    8560:	e309383c 	movw	r3, #38972	; 0x983c
    8564:	e3403001 	movt	r3, #1
    8568:	e3091820 	movw	r1, #38944	; 0x9820
    856c:	e3401001 	movt	r1, #1
    8570:	eb00212b 	bl	10a24 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8574:	e284001c 	add	r0, r4, #28
    8578:	eb00139d 	bl	d3f4 <CKernelOptions::GetSoundDevice() const>
    857c:	e3091860 	movw	r1, #39008	; 0x9860
    8580:	e3401001 	movt	r1, #1
    8584:	e1a05000 	mov	r5, r0
    8588:	e2846d66 	add	r6, r4, #6528	; 0x1980
    858c:	eb0010de 	bl	c90c <strcmp>
    8590:	e3500000 	cmp	r0, #0
    8594:	e2866028 	add	r6, r6, #40	; 0x28
    8598:	02845a01 	addeq	r5, r4, #4096	; 0x1000
    859c:	0a000006 	beq	85bc <CKernel::Run()+0x74>
    85a0:	e1a00005 	mov	r0, r5
    85a4:	e3091868 	movw	r1, #39016	; 0x9868
    85a8:	e3401001 	movt	r1, #1
    85ac:	eb0010d6 	bl	c90c <strcmp>
    85b0:	e2845a01 	add	r5, r4, #4096	; 0x1000
    85b4:	e3500000 	cmp	r0, #0
    85b8:	0a000052 	beq	8708 <CKernel::Run()+0x1c0>
    85bc:	e3a000d4 	mov	r0, #212	; 0xd4
    85c0:	eb004066 	bl	18760 <operator new(unsigned int)>
    85c4:	e1a01006 	mov	r1, r6
    85c8:	e3a03e7d 	mov	r3, #2000	; 0x7d0
    85cc:	e30a2c44 	movw	r2, #44100	; 0xac44
    85d0:	e1a07000 	mov	r7, r0
    85d4:	eb0030b9 	bl	148c0 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)>
    85d8:	e5857d68 	str	r7, [r5, #3432]	; 0xd68
    85dc:	e2847d75 	add	r7, r4, #7488	; 0x1d40
    85e0:	e3a01000 	mov	r1, #0
    85e4:	e287702c 	add	r7, r7, #44	; 0x2c
    85e8:	e2846d76 	add	r6, r4, #7552	; 0x1d80
    85ec:	e1a00007 	mov	r0, r7
    85f0:	e2866008 	add	r6, r6, #8
    85f4:	eb000074 	bl	87cc <COscillator::SetWaveform(TWaveform)>
    85f8:	eeb20a04 	vmov.f32	s0, #36	; 0x41200000  10.0
    85fc:	e1a00007 	mov	r0, r7
    8600:	eb00007e 	bl	8800 <COscillator::SetFrequency(float)>
    8604:	e3a01000 	mov	r1, #0
    8608:	e1a00006 	mov	r0, r6
    860c:	eb00006e 	bl	87cc <COscillator::SetWaveform(TWaveform)>
    8610:	e1a00006 	mov	r0, r6
    8614:	ed9f0a52 	vldr	s0, [pc, #328]	; 8764 <CKernel::Run()+0x21c>
    8618:	eb000078 	bl	8800 <COscillator::SetFrequency(float)>
    861c:	e1a00006 	mov	r0, r6
    8620:	eeb50a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
    8624:	eb000088 	bl	884c <COscillator::SetModulationVolume(float)>
    8628:	e3a01064 	mov	r1, #100	; 0x64
    862c:	e5950d68 	ldr	r0, [r5, #3432]	; 0xd68
    8630:	eb003b72 	bl	17400 <CSoundBaseDevice::AllocateQueue(unsigned int)>
    8634:	e2502000 	subs	r2, r0, #0
    8638:	0a000042 	beq	8748 <CKernel::Run()+0x200>
    863c:	e3a02002 	mov	r2, #2
    8640:	e3a01001 	mov	r1, #1
    8644:	e5950d68 	ldr	r0, [r5, #3432]	; 0xd68
    8648:	eb003b93 	bl	1749c <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)>
    864c:	e5950d68 	ldr	r0, [r5, #3432]	; 0xd68
    8650:	eb003bc3 	bl	17564 <CSoundBaseDevice::GetQueueSizeFrames()>
    8654:	e1a01000 	mov	r1, r0
    8658:	e1a08000 	mov	r8, r0
    865c:	e1a00004 	mov	r0, r4
    8660:	ebffff56 	bl	83c0 <CKernel::WriteSoundData(unsigned int)>
    8664:	e5953d68 	ldr	r3, [r5, #3432]	; 0xd68
    8668:	e1a00003 	mov	r0, r3
    866c:	e5933000 	ldr	r3, [r3]
    8670:	e593301c 	ldr	r3, [r3, #28]
    8674:	e12fff33 	blx	r3
    8678:	e2502000 	subs	r2, r0, #0
    867c:	0a00002a 	beq	872c <CKernel::Run()+0x1e4>
    8680:	e2847c1d 	add	r7, r4, #7424	; 0x1d00
    8684:	e1a00009 	mov	r0, r9
    8688:	e30938a8 	movw	r3, #39080	; 0x98a8
    868c:	e3403001 	movt	r3, #1
    8690:	e3091820 	movw	r1, #38944	; 0x9820
    8694:	e3401001 	movt	r1, #1
    8698:	e3a02003 	mov	r2, #3
    869c:	e287700c 	add	r7, r7, #12
    86a0:	e3a06000 	mov	r6, #0
    86a4:	eb0020de 	bl	10a24 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    86a8:	ea00000b 	b	86dc <CKernel::Run()+0x194>
    86ac:	eb000254 	bl	9004 <CScheduler::MsSleep(unsigned int)>
    86b0:	e5950d68 	ldr	r0, [r5, #3432]	; 0xd68
    86b4:	eb003bb9 	bl	175a0 <CSoundBaseDevice::GetQueueFramesAvail()>
    86b8:	e0481000 	sub	r1, r8, r0
    86bc:	e1a00004 	mov	r0, r4
    86c0:	ebffff3e 	bl	83c0 <CKernel::WriteSoundData(unsigned int)>
    86c4:	e2840e87 	add	r0, r4, #2160	; 0x870
    86c8:	e1a02006 	mov	r2, r6
    86cc:	e3a01000 	mov	r1, #0
    86d0:	e280000c 	add	r0, r0, #12
    86d4:	e2866001 	add	r6, r6, #1
    86d8:	eb001cb8 	bl	f9c0 <CScreenDevice::Rotor(unsigned int, unsigned int)>
    86dc:	e5953d68 	ldr	r3, [r5, #3432]	; 0xd68
    86e0:	e1a00003 	mov	r0, r3
    86e4:	e5933000 	ldr	r3, [r3]
    86e8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
    86ec:	e12fff33 	blx	r3
    86f0:	e3a01032 	mov	r1, #50	; 0x32
    86f4:	e3500000 	cmp	r0, #0
    86f8:	e1a00007 	mov	r0, r7
    86fc:	1affffea 	bne	86ac <CKernel::Run()+0x164>
    8700:	e3a00001 	mov	r0, #1
    8704:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8708:	e3a000f8 	mov	r0, #248	; 0xf8
    870c:	eb004013 	bl	18760 <operator new(unsigned int)>
    8710:	e1a01006 	mov	r1, r6
    8714:	e3a03e7d 	mov	r3, #2000	; 0x7d0
    8718:	e30a2c44 	movw	r2, #44100	; 0xac44
    871c:	e1a07000 	mov	r7, r0
    8720:	eb00363a 	bl	16010 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)>
    8724:	e5857d68 	str	r7, [r5, #3432]	; 0xd68
    8728:	eaffffab 	b	85dc <CKernel::Run()+0x94>
    872c:	e309388c 	movw	r3, #39052	; 0x988c
    8730:	e3403001 	movt	r3, #1
    8734:	e3091820 	movw	r1, #38944	; 0x9820
    8738:	e3401001 	movt	r1, #1
    873c:	e1a00009 	mov	r0, r9
    8740:	eb0020b7 	bl	10a24 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8744:	eaffffcd 	b	8680 <CKernel::Run()+0x138>
    8748:	e3093870 	movw	r3, #39024	; 0x9870
    874c:	e3403001 	movt	r3, #1
    8750:	e3091820 	movw	r1, #38944	; 0x9820
    8754:	e3401001 	movt	r1, #1
    8758:	e1a00009 	mov	r0, r9
    875c:	eb0020b0 	bl	10a24 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8760:	eaffffb5 	b	863c <CKernel::Run()+0xf4>
    8764:	43dc0000 	.word	0x43dc0000

00008768 <COscillator::~COscillator()>:
    8768:	e12fff1e 	bx	lr

0000876c <COscillator::GetOutputLevel() const>:
    876c:	ed900a06 	vldr	s0, [r0, #24]
    8770:	e12fff1e 	bx	lr

00008774 <COscillator::~COscillator()>:
    8774:	e92d4010 	push	{r4, lr}
    8778:	e3a0101c 	mov	r1, #28
    877c:	e1a04000 	mov	r4, r0
    8780:	eb003ffa 	bl	18770 <operator delete(void*, unsigned int)>
    8784:	e1a00004 	mov	r0, r4
    8788:	e8bd8010 	pop	{r4, pc}

0000878c <COscillator::COscillator(CSynthModule*)>:
    878c:	eddf0b0b 	vldr	d16, [pc, #44]	; 87c0 <COscillator::COscillator(CSynthModule*)+0x34>
    8790:	e3a02000 	mov	r2, #0
    8794:	e92d4010 	push	{r4, lr}
    8798:	e280e00c 	add	lr, r0, #12
    879c:	e59f4024 	ldr	r4, [pc, #36]	; 87c8 <COscillator::COscillator(CSynthModule*)+0x3c>
    87a0:	e3a0c000 	mov	ip, #0
    87a4:	e5801004 	str	r1, [r0, #4]
    87a8:	e5804000 	str	r4, [r0]
    87ac:	e5c02008 	strb	r2, [r0, #8]
    87b0:	f44e078f 	vst1.32	{d16}, [lr]
    87b4:	e5802014 	str	r2, [r0, #20]
    87b8:	e580c018 	str	ip, [r0, #24]
    87bc:	e8bd8010 	pop	{r4, pc}
    87c0:	41a00000 	.word	0x41a00000
    87c4:	00000000 	.word	0x00000000
    87c8:	000198d0 	.word	0x000198d0

000087cc <COscillator::SetWaveform(TWaveform)>:
    87cc:	e92d4070 	push	{r4, r5, r6, lr}
    87d0:	e3510005 	cmp	r1, #5
    87d4:	e1a04001 	mov	r4, r1
    87d8:	e1a05000 	mov	r5, r0
    87dc:	9a000005 	bls	87f8 <COscillator::SetWaveform(TWaveform)+0x2c>
    87e0:	e30918dc 	movw	r1, #39132	; 0x98dc
    87e4:	e3401001 	movt	r1, #1
    87e8:	e30908ec 	movw	r0, #39148	; 0x98ec
    87ec:	e3400001 	movt	r0, #1
    87f0:	e3a0205c 	mov	r2, #92	; 0x5c
    87f4:	eb001ca3 	bl	fa88 <assertion_failed>
    87f8:	e5c54008 	strb	r4, [r5, #8]
    87fc:	e8bd8070 	pop	{r4, r5, r6, pc}

00008800 <COscillator::SetFrequency(float)>:
    8800:	eeb50ac0 	vcmpe.f32	s0, #0.0
    8804:	e92d4010 	push	{r4, lr}
    8808:	e1a04000 	mov	r4, r0
    880c:	ed2d8b02 	vpush	{d8}
    8810:	eeb08a40 	vmov.f32	s16, s0
    8814:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    8818:	da000002 	ble	8828 <COscillator::SetFrequency(float)+0x28>
    881c:	ed848a03 	vstr	s16, [r4, #12]
    8820:	ecbd8b02 	vpop	{d8}
    8824:	e8bd8010 	pop	{r4, pc}
    8828:	e30918dc 	movw	r1, #39132	; 0x98dc
    882c:	e3401001 	movt	r1, #1
    8830:	e3090908 	movw	r0, #39176	; 0x9908
    8834:	e3400001 	movt	r0, #1
    8838:	e3a02062 	mov	r2, #98	; 0x62
    883c:	eb001c91 	bl	fa88 <assertion_failed>
    8840:	ed848a03 	vstr	s16, [r4, #12]
    8844:	ecbd8b02 	vpop	{d8}
    8848:	e8bd8010 	pop	{r4, pc}

0000884c <COscillator::SetModulationVolume(float)>:
    884c:	eeb50ac0 	vcmpe.f32	s0, #0.0
    8850:	e92d4010 	push	{r4, lr}
    8854:	e1a04000 	mov	r4, r0
    8858:	ed2d8b02 	vpush	{d8}
    885c:	eeb08a40 	vmov.f32	s16, s0
    8860:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    8864:	ba000003 	blt	8878 <COscillator::SetModulationVolume(float)+0x2c>
    8868:	eef77a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    886c:	eeb40ae7 	vcmpe.f32	s0, s15
    8870:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    8874:	9a000005 	bls	8890 <COscillator::SetModulationVolume(float)+0x44>
    8878:	e30918dc 	movw	r1, #39132	; 0x98dc
    887c:	e3401001 	movt	r1, #1
    8880:	e309091c 	movw	r0, #39196	; 0x991c
    8884:	e3400001 	movt	r0, #1
    8888:	e3a02068 	mov	r2, #104	; 0x68
    888c:	eb001c7d 	bl	fa88 <assertion_failed>
    8890:	ed848a04 	vstr	s16, [r4, #16]
    8894:	ecbd8b02 	vpop	{d8}
    8898:	e8bd8010 	pop	{r4, pc}

0000889c <COscillator::NextSample()>:
    889c:	e92d4010 	push	{r4, lr}
    88a0:	e1a04000 	mov	r4, r0
    88a4:	e5900004 	ldr	r0, [r0, #4]
    88a8:	ed2d8b02 	vpush	{d8}
    88ac:	e3500000 	cmp	r0, #0
    88b0:	ed948a03 	vldr	s16, [r4, #12]
    88b4:	0a000012 	beq	8904 <COscillator::NextSample()+0x68>
    88b8:	e5902000 	ldr	r2, [r0]
    88bc:	e308376c 	movw	r3, #34668	; 0x876c
    88c0:	e3403000 	movt	r3, #0
    88c4:	e5922008 	ldr	r2, [r2, #8]
    88c8:	e1520003 	cmp	r2, r3
    88cc:	1a00005f 	bne	8a50 <COscillator::NextSample()+0x1b4>
    88d0:	ed900a06 	vldr	s0, [r0, #24]
    88d4:	edd47a04 	vldr	s15, [r4, #16]
    88d8:	eef31b04 	vmov.f64	d17, #52	; 0x41a00000  20.0
    88dc:	eef70ac8 	vcvt.f64.f32	d16, s16
    88e0:	ee200a27 	vmul.f32	s0, s0, s15
    88e4:	eeb70ac0 	vcvt.f64.f32	d0, s0
    88e8:	eee00b21 	vfma.f64	d16, d0, d17
    88ec:	eeb78be0 	vcvt.f32.f64	s16, d16
    88f0:	eeb58ac0 	vcmpe.f32	s16, #0.0
    88f4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    88f8:	8a000001 	bhi	8904 <COscillator::NextSample()+0x68>
    88fc:	ecbd8b02 	vpop	{d8}
    8900:	e8bd8010 	pop	{r4, pc}
    8904:	eddf7a63 	vldr	s15, [pc, #396]	; 8a98 <COscillator::NextSample()+0x1fc>
    8908:	eef60b00 	vmov.f64	d16, #96	; 0x3f000000  0.5
    890c:	e5943014 	ldr	r3, [r4, #20]
    8910:	e5d42008 	ldrb	r2, [r4, #8]
    8914:	e2833001 	add	r3, r3, #1
    8918:	ee877a88 	vdiv.f32	s14, s15, s16
    891c:	eeb77ac7 	vcvt.f64.f32	d7, s14
    8920:	ee377b20 	vadd.f64	d7, d7, d16
    8924:	eefc7bc7 	vcvt.u32.f64	s15, d7
    8928:	ee170a90 	vmov	r0, s15
    892c:	e1530000 	cmp	r3, r0
    8930:	23a03000 	movcs	r3, #0
    8934:	e5843014 	str	r3, [r4, #20]
    8938:	e3520005 	cmp	r2, #5
    893c:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
    8940:	ea000044 	b	8a58 <COscillator::NextSample()+0x1bc>
    8944:	000089a0 	.word	0x000089a0
    8948:	000089c8 	.word	0x000089c8
    894c:	000089e4 	.word	0x000089e4
    8950:	00008a14 	.word	0x00008a14
    8954:	0000895c 	.word	0x0000895c
    8958:	0000895c 	.word	0x0000895c
    895c:	e3520004 	cmp	r2, #4
    8960:	eeb56a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    8964:	eeb45a00 	vmov.f32	s10, #64	; 0x3e000000  0.125
    8968:	eeb87a67 	vcvt.f32.u32	s14, s15
    896c:	ee073a90 	vmov	s15, r3
    8970:	eef76a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    8974:	eeff5a00 	vmov.f32	s11, #240	; 0xbf800000 -1.0
    8978:	fe056a06 	vseleq.f32	s12, s10, s12
    897c:	eef87a67 	vcvt.f32.u32	s15, s15
    8980:	ecbd8b02 	vpop	{d8}
    8984:	ee277a06 	vmul.f32	s14, s14, s12
    8988:	eef47ac7 	vcmpe.f32	s15, s14
    898c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    8990:	5ef07a65 	vmovpl.f32	s15, s11
    8994:	4ef07a66 	vmovmi.f32	s15, s13
    8998:	edc47a06 	vstr	s15, [r4, #24]
    899c:	e8bd8010 	pop	{r4, pc}
    89a0:	e3a01f5a 	mov	r1, #360	; 0x168
    89a4:	e30c20c8 	movw	r2, #49352	; 0xc0c8
    89a8:	e3402001 	movt	r2, #1
    89ac:	ecbd8b02 	vpop	{d8}
    89b0:	e0030391 	mul	r3, r1, r3
    89b4:	e733f013 	udiv	r3, r3, r0
    89b8:	e0822103 	add	r2, r2, r3, lsl #2
    89bc:	e5923000 	ldr	r3, [r2]
    89c0:	e5843018 	str	r3, [r4, #24]
    89c4:	e8bd8010 	pop	{r4, pc}
    89c8:	e1500083 	cmp	r0, r3, lsl #1
    89cc:	eeff7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    89d0:	eeb77a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    89d4:	ecbd8b02 	vpop	{d8}
    89d8:	8ef07a47 	vmovhi.f32	s15, s14
    89dc:	edc47a06 	vstr	s15, [r4, #24]
    89e0:	e8bd8010 	pop	{r4, pc}
    89e4:	ee073a90 	vmov	s15, r3
    89e8:	eef72b00 	vmov.f64	d18, #112	; 0x3f800000  1.0
    89ec:	ecbd8b02 	vpop	{d8}
    89f0:	eef80b67 	vcvt.f64.u32	d16, s15
    89f4:	ee070a90 	vmov	s15, r0
    89f8:	eeb87b67 	vcvt.f64.u32	d7, s15
    89fc:	ee700ba0 	vadd.f64	d16, d16, d16
    8a00:	eec01b87 	vdiv.f64	d17, d16, d7
    8a04:	ee711be2 	vsub.f64	d17, d17, d18
    8a08:	eef77be1 	vcvt.f32.f64	s15, d17
    8a0c:	edc47a06 	vstr	s15, [r4, #24]
    8a10:	e8bd8010 	pop	{r4, pc}
    8a14:	e1a02083 	lsl	r2, r3, #1
    8a18:	eef82b67 	vcvt.f64.u32	d18, s15
    8a1c:	e1520000 	cmp	r2, r0
    8a20:	2a000014 	bcs	8a78 <COscillator::NextSample()+0x1dc>
    8a24:	ee073a90 	vmov	s15, r3
    8a28:	eef73b00 	vmov.f64	d19, #112	; 0x3f800000  1.0
    8a2c:	eef80b67 	vcvt.f64.u32	d16, s15
    8a30:	ee700ba0 	vadd.f64	d16, d16, d16
    8a34:	ee700ba0 	vadd.f64	d16, d16, d16
    8a38:	eec01ba2 	vdiv.f64	d17, d16, d18
    8a3c:	ee711be3 	vsub.f64	d17, d17, d19
    8a40:	ecbd8b02 	vpop	{d8}
    8a44:	eef77be1 	vcvt.f32.f64	s15, d17
    8a48:	edc47a06 	vstr	s15, [r4, #24]
    8a4c:	e8bd8010 	pop	{r4, pc}
    8a50:	e12fff32 	blx	r2
    8a54:	eaffff9e 	b	88d4 <COscillator::NextSample()+0x38>
    8a58:	ecbd8b02 	vpop	{d8}
    8a5c:	e30918dc 	movw	r1, #39132	; 0x98dc
    8a60:	e3401001 	movt	r1, #1
    8a64:	e30b0b90 	movw	r0, #48016	; 0xbb90
    8a68:	e3400001 	movt	r0, #1
    8a6c:	e3a02099 	mov	r2, #153	; 0x99
    8a70:	e8bd4010 	pop	{r4, lr}
    8a74:	ea001c03 	b	fa88 <assertion_failed>
    8a78:	e0423000 	sub	r3, r2, r0
    8a7c:	ee073a10 	vmov	s14, r3
    8a80:	eef70b00 	vmov.f64	d16, #112	; 0x3f800000  1.0
    8a84:	eeb87b47 	vcvt.f64.u32	d7, s14
    8a88:	ee377b07 	vadd.f64	d7, d7, d7
    8a8c:	eec71b22 	vdiv.f64	d17, d7, d18
    8a90:	ee701be1 	vsub.f64	d17, d16, d17
    8a94:	eaffffe9 	b	8a40 <COscillator::NextSample()+0x1a4>
    8a98:	472c4400 	.word	0x472c4400

00008a9c <CScheduler::CScheduler()>:
    8a9c:	e92d4070 	push	{r4, r5, r6, lr}
    8aa0:	e30c5768 	movw	r5, #51048	; 0xc768
    8aa4:	e3405001 	movt	r5, #1
    8aa8:	e3a03000 	mov	r3, #0
    8aac:	e1a04000 	mov	r4, r0
    8ab0:	e5803050 	str	r3, [r0, #80]	; 0x50
    8ab4:	e5952000 	ldr	r2, [r5]
    8ab8:	e5803054 	str	r3, [r0, #84]	; 0x54
    8abc:	e1520003 	cmp	r2, r3
    8ac0:	e5803058 	str	r3, [r0, #88]	; 0x58
    8ac4:	0a000005 	beq	8ae0 <CScheduler::CScheduler()+0x44>
    8ac8:	e3091948 	movw	r1, #39240	; 0x9948
    8acc:	e3401001 	movt	r1, #1
    8ad0:	e3090958 	movw	r0, #39256	; 0x9958
    8ad4:	e3400001 	movt	r0, #1
    8ad8:	e3a02022 	mov	r2, #34	; 0x22
    8adc:	eb001be9 	bl	fa88 <assertion_failed>
    8ae0:	e3a000cc 	mov	r0, #204	; 0xcc
    8ae4:	e5854000 	str	r4, [r5]
    8ae8:	eb003f1c 	bl	18760 <operator new(unsigned int)>
    8aec:	e3a01000 	mov	r1, #0
    8af0:	e1a05000 	mov	r5, r0
    8af4:	eb0002e2 	bl	9684 <CTask::CTask(unsigned int)>
    8af8:	e5845054 	str	r5, [r4, #84]	; 0x54
    8afc:	e1a00004 	mov	r0, r4
    8b00:	e8bd8070 	pop	{r4, r5, r6, pc}

00008b04 <CScheduler::~CScheduler()>:
    8b04:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    8b08:	e92d4010 	push	{r4, lr}
    8b0c:	e1a04000 	mov	r4, r0
    8b10:	e3510001 	cmp	r1, #1
    8b14:	1a00002b 	bne	8bc8 <CScheduler::~CScheduler()+0xc4>
    8b18:	e5900000 	ldr	r0, [r0]
    8b1c:	e5943054 	ldr	r3, [r4, #84]	; 0x54
    8b20:	e1500003 	cmp	r0, r3
    8b24:	0a000034 	beq	8bfc <CScheduler::~CScheduler()+0xf8>
    8b28:	e3091948 	movw	r1, #39240	; 0x9948
    8b2c:	e3401001 	movt	r1, #1
    8b30:	e3090978 	movw	r0, #39288	; 0x9978
    8b34:	e3400001 	movt	r0, #1
    8b38:	e3a0202c 	mov	r2, #44	; 0x2c
    8b3c:	eb001bd1 	bl	fa88 <assertion_failed>
    8b40:	e5941050 	ldr	r1, [r4, #80]	; 0x50
    8b44:	e5940054 	ldr	r0, [r4, #84]	; 0x54
    8b48:	e3510000 	cmp	r1, #0
    8b4c:	0a00000b 	beq	8b80 <CScheduler::~CScheduler()+0x7c>
    8b50:	e5943000 	ldr	r3, [r4]
    8b54:	e1500003 	cmp	r0, r3
    8b58:	11a02004 	movne	r2, r4
    8b5c:	13a03000 	movne	r3, #0
    8b60:	1a000003 	bne	8b74 <CScheduler::~CScheduler()+0x70>
    8b64:	ea000024 	b	8bfc <CScheduler::~CScheduler()+0xf8>
    8b68:	e5b2c004 	ldr	ip, [r2, #4]!
    8b6c:	e150000c 	cmp	r0, ip
    8b70:	0a000022 	beq	8c00 <CScheduler::~CScheduler()+0xfc>
    8b74:	e2833001 	add	r3, r3, #1
    8b78:	e1510003 	cmp	r1, r3
    8b7c:	1afffff9 	bne	8b68 <CScheduler::~CScheduler()+0x64>
    8b80:	e3091948 	movw	r1, #39240	; 0x9948
    8b84:	e3401001 	movt	r1, #1
    8b88:	e30b0b90 	movw	r0, #48016	; 0xbb90
    8b8c:	e3400001 	movt	r0, #1
    8b90:	e3a0209b 	mov	r2, #155	; 0x9b
    8b94:	eb001bbb 	bl	fa88 <assertion_failed>
    8b98:	e5940054 	ldr	r0, [r4, #84]	; 0x54
    8b9c:	e3500000 	cmp	r0, #0
    8ba0:	0a000002 	beq	8bb0 <CScheduler::~CScheduler()+0xac>
    8ba4:	e5903000 	ldr	r3, [r0]
    8ba8:	e5933004 	ldr	r3, [r3, #4]
    8bac:	e12fff33 	blx	r3
    8bb0:	e30c3768 	movw	r3, #51048	; 0xc768
    8bb4:	e3403001 	movt	r3, #1
    8bb8:	e3a02000 	mov	r2, #0
    8bbc:	e1a00004 	mov	r0, r4
    8bc0:	e5832000 	str	r2, [r3]
    8bc4:	e8bd8010 	pop	{r4, pc}
    8bc8:	e3091948 	movw	r1, #39240	; 0x9948
    8bcc:	e3401001 	movt	r1, #1
    8bd0:	e3090968 	movw	r0, #39272	; 0x9968
    8bd4:	e3400001 	movt	r0, #1
    8bd8:	e3a0202b 	mov	r2, #43	; 0x2b
    8bdc:	eb001ba9 	bl	fa88 <assertion_failed>
    8be0:	e5940000 	ldr	r0, [r4]
    8be4:	e5943054 	ldr	r3, [r4, #84]	; 0x54
    8be8:	e1500003 	cmp	r0, r3
    8bec:	1affffcd 	bne	8b28 <CScheduler::~CScheduler()+0x24>
    8bf0:	e5941050 	ldr	r1, [r4, #80]	; 0x50
    8bf4:	e3510000 	cmp	r1, #0
    8bf8:	0affffe0 	beq	8b80 <CScheduler::~CScheduler()+0x7c>
    8bfc:	e3a03000 	mov	r3, #0
    8c00:	e2411001 	sub	r1, r1, #1
    8c04:	e3a02000 	mov	r2, #0
    8c08:	e1510003 	cmp	r1, r3
    8c0c:	e7842103 	str	r2, [r4, r3, lsl #2]
    8c10:	05843050 	streq	r3, [r4, #80]	; 0x50
    8c14:	eaffffe0 	b	8b9c <CScheduler::~CScheduler()+0x98>

00008c18 <CScheduler::Yield()>:
    8c18:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c1c:	e3097948 	movw	r7, #39240	; 0x9948
    8c20:	e3407001 	movt	r7, #1
    8c24:	e30b8b90 	movw	r8, #48016	; 0xbb90
    8c28:	e3408001 	movt	r8, #1
    8c2c:	e3099994 	movw	r9, #39316	; 0x9994
    8c30:	e3409001 	movt	r9, #1
    8c34:	e1a0a000 	mov	sl, r0
    8c38:	e59a4058 	ldr	r4, [sl, #88]	; 0x58
    8c3c:	e3540013 	cmp	r4, #19
    8c40:	8a000030 	bhi	8d08 <CScheduler::Yield()+0xf0>
    8c44:	eb000e91 	bl	c690 <CTimer::Get()>
    8c48:	eb000bbc 	bl	bb40 <CTimer::GetClockTicks()>
    8c4c:	e59a3050 	ldr	r3, [sl, #80]	; 0x50
    8c50:	e1a0b000 	mov	fp, r0
    8c54:	e3530000 	cmp	r3, #0
    8c58:	0a000062 	beq	8de8 <CScheduler::Yield()+0x1d0>
    8c5c:	e3a06001 	mov	r6, #1
    8c60:	e2844001 	add	r4, r4, #1
    8c64:	e2866001 	add	r6, r6, #1
    8c68:	e1530004 	cmp	r3, r4
    8c6c:	93a04000 	movls	r4, #0
    8c70:	e79a5104 	ldr	r5, [sl, r4, lsl #2]
    8c74:	e3550000 	cmp	r5, #0
    8c78:	0a00000c 	beq	8cb0 <CScheduler::Yield()+0x98>
    8c7c:	e5d52004 	ldrb	r2, [r5, #4]
    8c80:	e3520003 	cmp	r2, #3
    8c84:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
    8c88:	ea000003 	b	8c9c <CScheduler::Yield()+0x84>
    8c8c:	00008cf4 	.word	0x00008cf4
    8c90:	00008cb0 	.word	0x00008cb0
    8c94:	00008cdc 	.word	0x00008cdc
    8c98:	00008d10 	.word	0x00008d10
    8c9c:	e3a020e8 	mov	r2, #232	; 0xe8
    8ca0:	e1a01007 	mov	r1, r7
    8ca4:	e1a00008 	mov	r0, r8
    8ca8:	eb001b76 	bl	fa88 <assertion_failed>
    8cac:	e59a3050 	ldr	r3, [sl, #80]	; 0x50
    8cb0:	e1530006 	cmp	r3, r6
    8cb4:	2affffe9 	bcs	8c60 <CScheduler::Yield()+0x48>
    8cb8:	e3530000 	cmp	r3, #0
    8cbc:	e3a03014 	mov	r3, #20
    8cc0:	e58a3058 	str	r3, [sl, #88]	; 0x58
    8cc4:	1a00000f 	bne	8d08 <CScheduler::Yield()+0xf0>
    8cc8:	e3a02038 	mov	r2, #56	; 0x38
    8ccc:	e1a01007 	mov	r1, r7
    8cd0:	e1a00009 	mov	r0, r9
    8cd4:	eb001b6b 	bl	fa88 <assertion_failed>
    8cd8:	eaffffd6 	b	8c38 <CScheduler::Yield()+0x20>
    8cdc:	e5952008 	ldr	r2, [r5, #8]
    8ce0:	e042200b 	sub	r2, r2, fp
    8ce4:	e3520000 	cmp	r2, #0
    8ce8:	cafffff0 	bgt	8cb0 <CScheduler::Yield()+0x98>
    8cec:	e3a02000 	mov	r2, #0
    8cf0:	e5c52004 	strb	r2, [r5, #4]
    8cf4:	e58a4058 	str	r4, [sl, #88]	; 0x58
    8cf8:	e3540014 	cmp	r4, #20
    8cfc:	1a00002a 	bne	8dac <CScheduler::Yield()+0x194>
    8d00:	e3530000 	cmp	r3, #0
    8d04:	0affffef 	beq	8cc8 <CScheduler::Yield()+0xb0>
    8d08:	e3a04000 	mov	r4, #0
    8d0c:	eaffffcc 	b	8c44 <CScheduler::Yield()+0x2c>
    8d10:	e3530000 	cmp	r3, #0
    8d14:	0a00000b 	beq	8d48 <CScheduler::Yield()+0x130>
    8d18:	e59a2000 	ldr	r2, [sl]
    8d1c:	e1520005 	cmp	r2, r5
    8d20:	11a0100a 	movne	r1, sl
    8d24:	13a02000 	movne	r2, #0
    8d28:	1a000003 	bne	8d3c <CScheduler::Yield()+0x124>
    8d2c:	ea000017 	b	8d90 <CScheduler::Yield()+0x178>
    8d30:	e5b10004 	ldr	r0, [r1, #4]!
    8d34:	e1550000 	cmp	r5, r0
    8d38:	0a000015 	beq	8d94 <CScheduler::Yield()+0x17c>
    8d3c:	e2822001 	add	r2, r2, #1
    8d40:	e1530002 	cmp	r3, r2
    8d44:	1afffff9 	bne	8d30 <CScheduler::Yield()+0x118>
    8d48:	e3a0209b 	mov	r2, #155	; 0x9b
    8d4c:	e1a01007 	mov	r1, r7
    8d50:	e1a00008 	mov	r0, r8
    8d54:	eb001b4b 	bl	fa88 <assertion_failed>
    8d58:	e5953000 	ldr	r3, [r5]
    8d5c:	e1a00005 	mov	r0, r5
    8d60:	e5933004 	ldr	r3, [r3, #4]
    8d64:	e12fff33 	blx	r3
    8d68:	e59a3050 	ldr	r3, [sl, #80]	; 0x50
    8d6c:	e3a02014 	mov	r2, #20
    8d70:	e58a2058 	str	r2, [sl, #88]	; 0x58
    8d74:	e3530000 	cmp	r3, #0
    8d78:	1affffe2 	bne	8d08 <CScheduler::Yield()+0xf0>
    8d7c:	e3a02038 	mov	r2, #56	; 0x38
    8d80:	e1a01007 	mov	r1, r7
    8d84:	e1a00009 	mov	r0, r9
    8d88:	eb001b3e 	bl	fa88 <assertion_failed>
    8d8c:	eaffffa9 	b	8c38 <CScheduler::Yield()+0x20>
    8d90:	e3a02000 	mov	r2, #0
    8d94:	e2433001 	sub	r3, r3, #1
    8d98:	e3a01000 	mov	r1, #0
    8d9c:	e1520003 	cmp	r2, r3
    8da0:	e78a1102 	str	r1, [sl, r2, lsl #2]
    8da4:	058a2050 	streq	r2, [sl, #80]	; 0x50
    8da8:	eaffffea 	b	8d58 <CScheduler::Yield()+0x140>
    8dac:	e3540013 	cmp	r4, #19
    8db0:	8a000013 	bhi	8e04 <CScheduler::Yield()+0x1ec>
    8db4:	e59a0054 	ldr	r0, [sl, #84]	; 0x54
    8db8:	e1500005 	cmp	r0, r5
    8dbc:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8dc0:	e58a5054 	str	r5, [sl, #84]	; 0x54
    8dc4:	e290400c 	adds	r4, r0, #12
    8dc8:	e285500c 	add	r5, r5, #12
    8dcc:	0a00001d 	beq	8e48 <CScheduler::Yield()+0x230>
    8dd0:	e3550000 	cmp	r5, #0
    8dd4:	0a000023 	beq	8e68 <CScheduler::Yield()+0x250>
    8dd8:	e1a01005 	mov	r1, r5
    8ddc:	e1a00004 	mov	r0, r4
    8de0:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8de4:	ea0001c4 	b	94fc <TaskSwitch>
    8de8:	e3a03014 	mov	r3, #20
    8dec:	e3a02038 	mov	r2, #56	; 0x38
    8df0:	e58a3058 	str	r3, [sl, #88]	; 0x58
    8df4:	e1a01007 	mov	r1, r7
    8df8:	e1a00009 	mov	r0, r9
    8dfc:	eb001b21 	bl	fa88 <assertion_failed>
    8e00:	eaffff8c 	b	8c38 <CScheduler::Yield()+0x20>
    8e04:	e3091948 	movw	r1, #39240	; 0x9948
    8e08:	e3401001 	movt	r1, #1
    8e0c:	e30909a4 	movw	r0, #39332	; 0x99a4
    8e10:	e3400001 	movt	r0, #1
    8e14:	e3a0203b 	mov	r2, #59	; 0x3b
    8e18:	eb001b1a 	bl	fa88 <assertion_failed>
    8e1c:	e59a3058 	ldr	r3, [sl, #88]	; 0x58
    8e20:	e79a5103 	ldr	r5, [sl, r3, lsl #2]
    8e24:	e3550000 	cmp	r5, #0
    8e28:	1affffe1 	bne	8db4 <CScheduler::Yield()+0x19c>
    8e2c:	e3091948 	movw	r1, #39240	; 0x9948
    8e30:	e3401001 	movt	r1, #1
    8e34:	e30909bc 	movw	r0, #39356	; 0x99bc
    8e38:	e3400001 	movt	r0, #1
    8e3c:	e3a0203d 	mov	r2, #61	; 0x3d
    8e40:	eb001b10 	bl	fa88 <assertion_failed>
    8e44:	eaffffda 	b	8db4 <CScheduler::Yield()+0x19c>
    8e48:	e3091948 	movw	r1, #39240	; 0x9948
    8e4c:	e3401001 	movt	r1, #1
    8e50:	e30909c8 	movw	r0, #39368	; 0x99c8
    8e54:	e3400001 	movt	r0, #1
    8e58:	e3a02047 	mov	r2, #71	; 0x47
    8e5c:	eb001b09 	bl	fa88 <assertion_failed>
    8e60:	e3550000 	cmp	r5, #0
    8e64:	1affffdb 	bne	8dd8 <CScheduler::Yield()+0x1c0>
    8e68:	e3091948 	movw	r1, #39240	; 0x9948
    8e6c:	e3401001 	movt	r1, #1
    8e70:	e30909d8 	movw	r0, #39384	; 0x99d8
    8e74:	e3400001 	movt	r0, #1
    8e78:	e3a02048 	mov	r2, #72	; 0x48
    8e7c:	eb001b01 	bl	fa88 <assertion_failed>
    8e80:	e1a01005 	mov	r1, r5
    8e84:	e1a00004 	mov	r0, r4
    8e88:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e8c:	ea00019a 	b	94fc <TaskSwitch>

00008e90 <CScheduler::Sleep(unsigned int)>:
    8e90:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8e94:	e3003708 	movw	r3, #1800	; 0x708
    8e98:	e1a04001 	mov	r4, r1
    8e9c:	e1a05000 	mov	r5, r0
    8ea0:	e1510003 	cmp	r1, r3
    8ea4:	9a000019 	bls	8f10 <CScheduler::Sleep(unsigned int)+0x80>
    8ea8:	e3098948 	movw	r8, #39240	; 0x9948
    8eac:	e3408001 	movt	r8, #1
    8eb0:	e30999e8 	movw	r9, #39400	; 0x99e8
    8eb4:	e3409001 	movt	r9, #1
    8eb8:	e3a07cd2 	mov	r7, #53760	; 0xd200
    8ebc:	e3467b49 	movt	r7, #27465	; 0x6b49
    8ec0:	eb000df2 	bl	c690 <CTimer::Get()>
    8ec4:	eb000b1d 	bl	bb40 <CTimer::GetClockTicks()>
    8ec8:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    8ecc:	e1a06000 	mov	r6, r0
    8ed0:	e3530000 	cmp	r3, #0
    8ed4:	0a000034 	beq	8fac <CScheduler::Sleep(unsigned int)+0x11c>
    8ed8:	e5d32004 	ldrb	r2, [r3, #4]
    8edc:	e086c007 	add	ip, r6, r7
    8ee0:	e3a01002 	mov	r1, #2
    8ee4:	e1a00005 	mov	r0, r5
    8ee8:	e3520000 	cmp	r2, #0
    8eec:	1a00001c 	bne	8f64 <CScheduler::Sleep(unsigned int)+0xd4>
    8ef0:	e2444c07 	sub	r4, r4, #1792	; 0x700
    8ef4:	e583c008 	str	ip, [r3, #8]
    8ef8:	e5c31004 	strb	r1, [r3, #4]
    8efc:	e2444008 	sub	r4, r4, #8
    8f00:	ebffff44 	bl	8c18 <CScheduler::Yield()>
    8f04:	e3003708 	movw	r3, #1800	; 0x708
    8f08:	e1540003 	cmp	r4, r3
    8f0c:	8affffeb 	bhi	8ec0 <CScheduler::Sleep(unsigned int)+0x30>
    8f10:	e3043240 	movw	r3, #16960	; 0x4240
    8f14:	e340300f 	movt	r3, #15
    8f18:	e0040493 	mul	r4, r3, r4
    8f1c:	e3540000 	cmp	r4, #0
    8f20:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    8f24:	eb000dd9 	bl	c690 <CTimer::Get()>
    8f28:	eb000b04 	bl	bb40 <CTimer::GetClockTicks()>
    8f2c:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    8f30:	e1a06000 	mov	r6, r0
    8f34:	e3530000 	cmp	r3, #0
    8f38:	0a000029 	beq	8fe4 <CScheduler::Sleep(unsigned int)+0x154>
    8f3c:	e5d32004 	ldrb	r2, [r3, #4]
    8f40:	e3520000 	cmp	r2, #0
    8f44:	1a00001e 	bne	8fc4 <CScheduler::Sleep(unsigned int)+0x134>
    8f48:	e0844006 	add	r4, r4, r6
    8f4c:	e1a00005 	mov	r0, r5
    8f50:	e5834008 	str	r4, [r3, #8]
    8f54:	e3a02002 	mov	r2, #2
    8f58:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    8f5c:	e5c32004 	strb	r2, [r3, #4]
    8f60:	eaffff2c 	b	8c18 <CScheduler::Yield()>
    8f64:	e3a0206b 	mov	r2, #107	; 0x6b
    8f68:	e1a01008 	mov	r1, r8
    8f6c:	e30909f8 	movw	r0, #39416	; 0x99f8
    8f70:	e3400001 	movt	r0, #1
    8f74:	eb001ac3 	bl	fa88 <assertion_failed>
    8f78:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    8f7c:	e2444c07 	sub	r4, r4, #1792	; 0x700
    8f80:	e3a02002 	mov	r2, #2
    8f84:	e0866007 	add	r6, r6, r7
    8f88:	e2444008 	sub	r4, r4, #8
    8f8c:	e1a00005 	mov	r0, r5
    8f90:	e5836008 	str	r6, [r3, #8]
    8f94:	e5c32004 	strb	r2, [r3, #4]
    8f98:	ebffff1e 	bl	8c18 <CScheduler::Yield()>
    8f9c:	e3003708 	movw	r3, #1800	; 0x708
    8fa0:	e1540003 	cmp	r4, r3
    8fa4:	8affffc5 	bhi	8ec0 <CScheduler::Sleep(unsigned int)+0x30>
    8fa8:	eaffffd8 	b	8f10 <CScheduler::Sleep(unsigned int)+0x80>
    8fac:	e3a0206a 	mov	r2, #106	; 0x6a
    8fb0:	e1a01008 	mov	r1, r8
    8fb4:	e1a00009 	mov	r0, r9
    8fb8:	eb001ab2 	bl	fa88 <assertion_failed>
    8fbc:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    8fc0:	eaffffc4 	b	8ed8 <CScheduler::Sleep(unsigned int)+0x48>
    8fc4:	e3091948 	movw	r1, #39240	; 0x9948
    8fc8:	e3401001 	movt	r1, #1
    8fcc:	e30909f8 	movw	r0, #39416	; 0x99f8
    8fd0:	e3400001 	movt	r0, #1
    8fd4:	e3a0206b 	mov	r2, #107	; 0x6b
    8fd8:	eb001aaa 	bl	fa88 <assertion_failed>
    8fdc:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    8fe0:	eaffffd8 	b	8f48 <CScheduler::Sleep(unsigned int)+0xb8>
    8fe4:	e3091948 	movw	r1, #39240	; 0x9948
    8fe8:	e3401001 	movt	r1, #1
    8fec:	e30909e8 	movw	r0, #39400	; 0x99e8
    8ff0:	e3400001 	movt	r0, #1
    8ff4:	e3a0206a 	mov	r2, #106	; 0x6a
    8ff8:	eb001aa2 	bl	fa88 <assertion_failed>
    8ffc:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    9000:	eaffffcd 	b	8f3c <CScheduler::Sleep(unsigned int)+0xac>

00009004 <CScheduler::MsSleep(unsigned int)>:
    9004:	e3510000 	cmp	r1, #0
    9008:	012fff1e 	bxeq	lr
    900c:	e92d4070 	push	{r4, r5, r6, lr}
    9010:	e3a04ffa 	mov	r4, #1000	; 0x3e8
    9014:	e0040194 	mul	r4, r4, r1
    9018:	e3540000 	cmp	r4, #0
    901c:	08bd8070 	popeq	{r4, r5, r6, pc}
    9020:	e1a05000 	mov	r5, r0
    9024:	eb000d99 	bl	c690 <CTimer::Get()>
    9028:	eb000ac4 	bl	bb40 <CTimer::GetClockTicks()>
    902c:	e1a06000 	mov	r6, r0
    9030:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    9034:	e3530000 	cmp	r3, #0
    9038:	0a000011 	beq	9084 <CScheduler::MsSleep(unsigned int)+0x80>
    903c:	e5d32004 	ldrb	r2, [r3, #4]
    9040:	e3520000 	cmp	r2, #0
    9044:	1a000006 	bne	9064 <CScheduler::MsSleep(unsigned int)+0x60>
    9048:	e0844006 	add	r4, r4, r6
    904c:	e1a00005 	mov	r0, r5
    9050:	e5834008 	str	r4, [r3, #8]
    9054:	e3a02002 	mov	r2, #2
    9058:	e8bd4070 	pop	{r4, r5, r6, lr}
    905c:	e5c32004 	strb	r2, [r3, #4]
    9060:	eafffeec 	b	8c18 <CScheduler::Yield()>
    9064:	e3091948 	movw	r1, #39240	; 0x9948
    9068:	e3401001 	movt	r1, #1
    906c:	e30909f8 	movw	r0, #39416	; 0x99f8
    9070:	e3400001 	movt	r0, #1
    9074:	e3a0206b 	mov	r2, #107	; 0x6b
    9078:	eb001a82 	bl	fa88 <assertion_failed>
    907c:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    9080:	eafffff0 	b	9048 <CScheduler::MsSleep(unsigned int)+0x44>
    9084:	e3091948 	movw	r1, #39240	; 0x9948
    9088:	e3401001 	movt	r1, #1
    908c:	e30909e8 	movw	r0, #39400	; 0x99e8
    9090:	e3400001 	movt	r0, #1
    9094:	e3a0206a 	mov	r2, #106	; 0x6a
    9098:	eb001a7a 	bl	fa88 <assertion_failed>
    909c:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    90a0:	eaffffe5 	b	903c <CScheduler::MsSleep(unsigned int)+0x38>

000090a4 <CScheduler::usSleep(unsigned int)>:
    90a4:	e92d4070 	push	{r4, r5, r6, lr}
    90a8:	e2514000 	subs	r4, r1, #0
    90ac:	08bd8070 	popeq	{r4, r5, r6, pc}
    90b0:	e1a05000 	mov	r5, r0
    90b4:	eb000d75 	bl	c690 <CTimer::Get()>
    90b8:	eb000aa0 	bl	bb40 <CTimer::GetClockTicks()>
    90bc:	e1a06000 	mov	r6, r0
    90c0:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    90c4:	e3530000 	cmp	r3, #0
    90c8:	0a000011 	beq	9114 <CScheduler::usSleep(unsigned int)+0x70>
    90cc:	e5d32004 	ldrb	r2, [r3, #4]
    90d0:	e3520000 	cmp	r2, #0
    90d4:	1a000006 	bne	90f4 <CScheduler::usSleep(unsigned int)+0x50>
    90d8:	e0841006 	add	r1, r4, r6
    90dc:	e1a00005 	mov	r0, r5
    90e0:	e3a02002 	mov	r2, #2
    90e4:	e5831008 	str	r1, [r3, #8]
    90e8:	e5c32004 	strb	r2, [r3, #4]
    90ec:	e8bd4070 	pop	{r4, r5, r6, lr}
    90f0:	eafffec8 	b	8c18 <CScheduler::Yield()>
    90f4:	e3091948 	movw	r1, #39240	; 0x9948
    90f8:	e3401001 	movt	r1, #1
    90fc:	e30909f8 	movw	r0, #39416	; 0x99f8
    9100:	e3400001 	movt	r0, #1
    9104:	e3a0206b 	mov	r2, #107	; 0x6b
    9108:	eb001a5e 	bl	fa88 <assertion_failed>
    910c:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    9110:	eafffff0 	b	90d8 <CScheduler::usSleep(unsigned int)+0x34>
    9114:	e3091948 	movw	r1, #39240	; 0x9948
    9118:	e3401001 	movt	r1, #1
    911c:	e30909e8 	movw	r0, #39400	; 0x99e8
    9120:	e3400001 	movt	r0, #1
    9124:	e3a0206a 	mov	r2, #106	; 0x6a
    9128:	eb001a56 	bl	fa88 <assertion_failed>
    912c:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    9130:	eaffffe5 	b	90cc <CScheduler::usSleep(unsigned int)+0x28>

00009134 <CScheduler::AddTask(CTask*)>:
    9134:	e92d4070 	push	{r4, r5, r6, lr}
    9138:	e1a04000 	mov	r4, r0
    913c:	e2515000 	subs	r5, r1, #0
    9140:	0a00001c 	beq	91b8 <CScheduler::AddTask(CTask*)+0x84>
    9144:	e5940050 	ldr	r0, [r4, #80]	; 0x50
    9148:	e3500000 	cmp	r0, #0
    914c:	0a000020 	beq	91d4 <CScheduler::AddTask(CTask*)+0xa0>
    9150:	e5943000 	ldr	r3, [r4]
    9154:	e3530000 	cmp	r3, #0
    9158:	11a02004 	movne	r2, r4
    915c:	13a03000 	movne	r3, #0
    9160:	1a000003 	bne	9174 <CScheduler::AddTask(CTask*)+0x40>
    9164:	ea000011 	b	91b0 <CScheduler::AddTask(CTask*)+0x7c>
    9168:	e5b21004 	ldr	r1, [r2, #4]!
    916c:	e3510000 	cmp	r1, #0
    9170:	0a00000e 	beq	91b0 <CScheduler::AddTask(CTask*)+0x7c>
    9174:	e2833001 	add	r3, r3, #1
    9178:	e1500003 	cmp	r0, r3
    917c:	1afffff9 	bne	9168 <CScheduler::AddTask(CTask*)+0x34>
    9180:	e3530014 	cmp	r3, #20
    9184:	1a000007 	bne	91a8 <CScheduler::AddTask(CTask*)+0x74>
    9188:	eb001c9a 	bl	103f8 <CLogger::Get()>
    918c:	e3093a30 	movw	r3, #39472	; 0x9a30
    9190:	e3403001 	movt	r3, #1
    9194:	e3091940 	movw	r1, #39232	; 0x9940
    9198:	e3401001 	movt	r1, #1
    919c:	e3a02000 	mov	r2, #0
    91a0:	eb001e1f 	bl	10a24 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    91a4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    91a8:	e2832001 	add	r2, r3, #1
    91ac:	e5842050 	str	r2, [r4, #80]	; 0x50
    91b0:	e7845103 	str	r5, [r4, r3, lsl #2]
    91b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    91b8:	e3091948 	movw	r1, #39240	; 0x9948
    91bc:	e3401001 	movt	r1, #1
    91c0:	e3090a24 	movw	r0, #39460	; 0x9a24
    91c4:	e3400001 	movt	r0, #1
    91c8:	e3a02075 	mov	r2, #117	; 0x75
    91cc:	eb001a2d 	bl	fa88 <assertion_failed>
    91d0:	eaffffdb 	b	9144 <CScheduler::AddTask(CTask*)+0x10>
    91d4:	e1a03000 	mov	r3, r0
    91d8:	eafffff2 	b	91a8 <CScheduler::AddTask(CTask*)+0x74>

000091dc <CScheduler::RemoveTask(CTask*)>:
    91dc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    91e0:	e590e050 	ldr	lr, [r0, #80]	; 0x50
    91e4:	e35e0000 	cmp	lr, #0
    91e8:	0a00000b 	beq	921c <CScheduler::RemoveTask(CTask*)+0x40>
    91ec:	e5903000 	ldr	r3, [r0]
    91f0:	e1510003 	cmp	r1, r3
    91f4:	11a02000 	movne	r2, r0
    91f8:	13a03000 	movne	r3, #0
    91fc:	1a000003 	bne	9210 <CScheduler::RemoveTask(CTask*)+0x34>
    9200:	ea00000c 	b	9238 <CScheduler::RemoveTask(CTask*)+0x5c>
    9204:	e5b2c004 	ldr	ip, [r2, #4]!
    9208:	e15c0001 	cmp	ip, r1
    920c:	0a00000a 	beq	923c <CScheduler::RemoveTask(CTask*)+0x60>
    9210:	e2833001 	add	r3, r3, #1
    9214:	e15e0003 	cmp	lr, r3
    9218:	1afffff9 	bne	9204 <CScheduler::RemoveTask(CTask*)+0x28>
    921c:	e3091948 	movw	r1, #39240	; 0x9948
    9220:	e3401001 	movt	r1, #1
    9224:	e30b0b90 	movw	r0, #48016	; 0xbb90
    9228:	e3400001 	movt	r0, #1
    922c:	e3a0209b 	mov	r2, #155	; 0x9b
    9230:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    9234:	ea001a13 	b	fa88 <assertion_failed>
    9238:	e3a03000 	mov	r3, #0
    923c:	e24ee001 	sub	lr, lr, #1
    9240:	e3a02000 	mov	r2, #0
    9244:	e15e0003 	cmp	lr, r3
    9248:	e7802103 	str	r2, [r0, r3, lsl #2]
    924c:	05803050 	streq	r3, [r0, #80]	; 0x50
    9250:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00009254 <CScheduler::BlockTask(CTask**)>:
    9254:	e92d4070 	push	{r4, r5, r6, lr}
    9258:	e1a04000 	mov	r4, r0
    925c:	e2515000 	subs	r5, r1, #0
    9260:	0a00001b 	beq	92d4 <CScheduler::BlockTask(CTask**)+0x80>
    9264:	e5943054 	ldr	r3, [r4, #84]	; 0x54
    9268:	e5853000 	str	r3, [r5]
    926c:	e5943054 	ldr	r3, [r4, #84]	; 0x54
    9270:	e3530000 	cmp	r3, #0
    9274:	0a00000e 	beq	92b4 <CScheduler::BlockTask(CTask**)+0x60>
    9278:	e5d32004 	ldrb	r2, [r3, #4]
    927c:	e3520000 	cmp	r2, #0
    9280:	0a000006 	beq	92a0 <CScheduler::BlockTask(CTask**)+0x4c>
    9284:	e3091948 	movw	r1, #39240	; 0x9948
    9288:	e3401001 	movt	r1, #1
    928c:	e30909f8 	movw	r0, #39416	; 0x99f8
    9290:	e3400001 	movt	r0, #1
    9294:	e3a020a4 	mov	r2, #164	; 0xa4
    9298:	eb0019fa 	bl	fa88 <assertion_failed>
    929c:	e5943054 	ldr	r3, [r4, #84]	; 0x54
    92a0:	e1a00004 	mov	r0, r4
    92a4:	e3a02001 	mov	r2, #1
    92a8:	e8bd4070 	pop	{r4, r5, r6, lr}
    92ac:	e5c32004 	strb	r2, [r3, #4]
    92b0:	eafffe58 	b	8c18 <CScheduler::Yield()>
    92b4:	e3091948 	movw	r1, #39240	; 0x9948
    92b8:	e3401001 	movt	r1, #1
    92bc:	e30909e8 	movw	r0, #39400	; 0x99e8
    92c0:	e3400001 	movt	r0, #1
    92c4:	e3a020a3 	mov	r2, #163	; 0xa3
    92c8:	eb0019ee 	bl	fa88 <assertion_failed>
    92cc:	e5943054 	ldr	r3, [r4, #84]	; 0x54
    92d0:	eaffffe8 	b	9278 <CScheduler::BlockTask(CTask**)+0x24>
    92d4:	e3091948 	movw	r1, #39240	; 0x9948
    92d8:	e3401001 	movt	r1, #1
    92dc:	e3090a50 	movw	r0, #39504	; 0x9a50
    92e0:	e3400001 	movt	r0, #1
    92e4:	e3a020a0 	mov	r2, #160	; 0xa0
    92e8:	eb0019e6 	bl	fa88 <assertion_failed>
    92ec:	eaffffdc 	b	9264 <CScheduler::BlockTask(CTask**)+0x10>

000092f0 <CScheduler::WakeTask(CTask**)>:
    92f0:	e92d4070 	push	{r4, r5, r6, lr}
    92f4:	e2515000 	subs	r5, r1, #0
    92f8:	0a000010 	beq	9340 <CScheduler::WakeTask(CTask**)+0x50>
    92fc:	e5954000 	ldr	r4, [r5]
    9300:	e3a03000 	mov	r3, #0
    9304:	e5853000 	str	r3, [r5]
    9308:	e1540003 	cmp	r4, r3
    930c:	0a000012 	beq	935c <CScheduler::WakeTask(CTask**)+0x6c>
    9310:	e5d43004 	ldrb	r3, [r4, #4]
    9314:	e3530001 	cmp	r3, #1
    9318:	0a000005 	beq	9334 <CScheduler::WakeTask(CTask**)+0x44>
    931c:	e3091948 	movw	r1, #39240	; 0x9948
    9320:	e3401001 	movt	r1, #1
    9324:	e3090a5c 	movw	r0, #39516	; 0x9a5c
    9328:	e3400001 	movt	r0, #1
    932c:	e3a020b9 	mov	r2, #185	; 0xb9
    9330:	eb0019d4 	bl	fa88 <assertion_failed>
    9334:	e3a03000 	mov	r3, #0
    9338:	e5c43004 	strb	r3, [r4, #4]
    933c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9340:	e3091948 	movw	r1, #39240	; 0x9948
    9344:	e3401001 	movt	r1, #1
    9348:	e3090a50 	movw	r0, #39504	; 0x9a50
    934c:	e3400001 	movt	r0, #1
    9350:	e3a020ac 	mov	r2, #172	; 0xac
    9354:	eb0019cb 	bl	fa88 <assertion_failed>
    9358:	eaffffe7 	b	92fc <CScheduler::WakeTask(CTask**)+0xc>
    935c:	e3091948 	movw	r1, #39240	; 0x9948
    9360:	e3401001 	movt	r1, #1
    9364:	e3090a24 	movw	r0, #39460	; 0x9a24
    9368:	e3400001 	movt	r0, #1
    936c:	e3a020b8 	mov	r2, #184	; 0xb8
    9370:	eb0019c4 	bl	fa88 <assertion_failed>
    9374:	eaffffe5 	b	9310 <CScheduler::WakeTask(CTask**)+0x20>

00009378 <CScheduler::GetNextTask()>:
    9378:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    937c:	e1a07000 	mov	r7, r0
    9380:	e5904058 	ldr	r4, [r0, #88]	; 0x58
    9384:	e3540014 	cmp	r4, #20
    9388:	23a04000 	movcs	r4, #0
    938c:	eb000cbf 	bl	c690 <CTimer::Get()>
    9390:	eb0009ea 	bl	bb40 <CTimer::GetClockTicks()>
    9394:	e5973050 	ldr	r3, [r7, #80]	; 0x50
    9398:	e3530000 	cmp	r3, #0
    939c:	0a00001b 	beq	9410 <CScheduler::GetNextTask()+0x98>
    93a0:	e3099948 	movw	r9, #39240	; 0x9948
    93a4:	e3409001 	movt	r9, #1
    93a8:	e30b8b90 	movw	r8, #48016	; 0xbb90
    93ac:	e3408001 	movt	r8, #1
    93b0:	e1a0a000 	mov	sl, r0
    93b4:	e3a06001 	mov	r6, #1
    93b8:	e2844001 	add	r4, r4, #1
    93bc:	e2866001 	add	r6, r6, #1
    93c0:	e1540003 	cmp	r4, r3
    93c4:	23a04000 	movcs	r4, #0
    93c8:	e7975104 	ldr	r5, [r7, r4, lsl #2]
    93cc:	e3550000 	cmp	r5, #0
    93d0:	0a00000c 	beq	9408 <CScheduler::GetNextTask()+0x90>
    93d4:	e5d52004 	ldrb	r2, [r5, #4]
    93d8:	e3520003 	cmp	r2, #3
    93dc:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
    93e0:	ea000003 	b	93f4 <CScheduler::GetNextTask()+0x7c>
    93e4:	00009414 	.word	0x00009414
    93e8:	00009408 	.word	0x00009408
    93ec:	0000941c 	.word	0x0000941c
    93f0:	0000943c 	.word	0x0000943c
    93f4:	e3a020e8 	mov	r2, #232	; 0xe8
    93f8:	e1a01009 	mov	r1, r9
    93fc:	e1a00008 	mov	r0, r8
    9400:	eb0019a0 	bl	fa88 <assertion_failed>
    9404:	e5973050 	ldr	r3, [r7, #80]	; 0x50
    9408:	e1530006 	cmp	r3, r6
    940c:	2affffe9 	bcs	93b8 <CScheduler::GetNextTask()+0x40>
    9410:	e3a04014 	mov	r4, #20
    9414:	e1a00004 	mov	r0, r4
    9418:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    941c:	e5952008 	ldr	r2, [r5, #8]
    9420:	e042200a 	sub	r2, r2, sl
    9424:	e3520000 	cmp	r2, #0
    9428:	cafffff6 	bgt	9408 <CScheduler::GetNextTask()+0x90>
    942c:	e3a03000 	mov	r3, #0
    9430:	e1a00004 	mov	r0, r4
    9434:	e5c53004 	strb	r3, [r5, #4]
    9438:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    943c:	e3530000 	cmp	r3, #0
    9440:	0a00000b 	beq	9474 <CScheduler::GetNextTask()+0xfc>
    9444:	e5972000 	ldr	r2, [r7]
    9448:	e1550002 	cmp	r5, r2
    944c:	11a01007 	movne	r1, r7
    9450:	13a02000 	movne	r2, #0
    9454:	1a000003 	bne	9468 <CScheduler::GetNextTask()+0xf0>
    9458:	ea000012 	b	94a8 <CScheduler::GetNextTask()+0x130>
    945c:	e5b10004 	ldr	r0, [r1, #4]!
    9460:	e1550000 	cmp	r5, r0
    9464:	0a000010 	beq	94ac <CScheduler::GetNextTask()+0x134>
    9468:	e2822001 	add	r2, r2, #1
    946c:	e1520003 	cmp	r2, r3
    9470:	1afffff9 	bne	945c <CScheduler::GetNextTask()+0xe4>
    9474:	e3091948 	movw	r1, #39240	; 0x9948
    9478:	e3401001 	movt	r1, #1
    947c:	e30b0b90 	movw	r0, #48016	; 0xbb90
    9480:	e3400001 	movt	r0, #1
    9484:	e3a0209b 	mov	r2, #155	; 0x9b
    9488:	eb00197e 	bl	fa88 <assertion_failed>
    948c:	e5953000 	ldr	r3, [r5]
    9490:	e1a00005 	mov	r0, r5
    9494:	e3a04014 	mov	r4, #20
    9498:	e5933004 	ldr	r3, [r3, #4]
    949c:	e12fff33 	blx	r3
    94a0:	e1a00004 	mov	r0, r4
    94a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    94a8:	e3a02000 	mov	r2, #0
    94ac:	e2433001 	sub	r3, r3, #1
    94b0:	e3a01000 	mov	r1, #0
    94b4:	e1530002 	cmp	r3, r2
    94b8:	e7871102 	str	r1, [r7, r2, lsl #2]
    94bc:	05872050 	streq	r2, [r7, #80]	; 0x50
    94c0:	eafffff1 	b	948c <CScheduler::GetNextTask()+0x114>

000094c4 <CScheduler::Get()>:
    94c4:	e92d4010 	push	{r4, lr}
    94c8:	e30c4768 	movw	r4, #51048	; 0xc768
    94cc:	e3404001 	movt	r4, #1
    94d0:	e5940000 	ldr	r0, [r4]
    94d4:	e3500000 	cmp	r0, #0
    94d8:	18bd8010 	popne	{r4, pc}
    94dc:	e3a020f2 	mov	r2, #242	; 0xf2
    94e0:	e3091948 	movw	r1, #39240	; 0x9948
    94e4:	e3401001 	movt	r1, #1
    94e8:	e3090a84 	movw	r0, #39556	; 0x9a84
    94ec:	e3400001 	movt	r0, #1
    94f0:	eb001964 	bl	fa88 <assertion_failed>
    94f4:	e5940000 	ldr	r0, [r4]
    94f8:	e8bd8010 	pop	{r4, pc}

000094fc <TaskSwitch>:
    94fc:	eef82a10 	vmrs	r2, fpexc
    9500:	eef13a10 	vmrs	r3, fpscr
    9504:	e8a07ffd 	stmia	r0!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
    9508:	ec800b20 	vstmia	r0, {d0-d15}
    950c:	e8b17ffd 	ldm	r1!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
    9510:	eee82a10 	vmsr	fpexc, r2
    9514:	eee13a10 	vmsr	fpscr, r3
    9518:	ec910b20 	vldmia	r1, {d0-d15}
    951c:	e12fff1e 	bx	lr

00009520 <CTask::Run()>:
    9520:	e3091aa8 	movw	r1, #39592	; 0x9aa8
    9524:	e3401001 	movt	r1, #1
    9528:	e30b0b90 	movw	r0, #48016	; 0xbb90
    952c:	e3400001 	movt	r0, #1
    9530:	e3a02036 	mov	r2, #54	; 0x36
    9534:	ea001953 	b	fa88 <assertion_failed>

00009538 <CTask::~CTask()>:
    9538:	e5d03004 	ldrb	r3, [r0, #4]
    953c:	e59f2048 	ldr	r2, [pc, #72]	; 958c <CTask::~CTask()+0x54>
    9540:	e92d4010 	push	{r4, lr}
    9544:	e3530003 	cmp	r3, #3
    9548:	e1a04000 	mov	r4, r0
    954c:	e5802000 	str	r2, [r0]
    9550:	0a000005 	beq	956c <CTask::~CTask()+0x34>
    9554:	e3091aa8 	movw	r1, #39592	; 0x9aa8
    9558:	e3401001 	movt	r1, #1
    955c:	e3090ab4 	movw	r0, #39604	; 0x9ab4
    9560:	e3400001 	movt	r0, #1
    9564:	e3a0202d 	mov	r2, #45	; 0x2d
    9568:	eb001946 	bl	fa88 <assertion_failed>
    956c:	e59400c8 	ldr	r0, [r4, #200]	; 0xc8
    9570:	e3a03004 	mov	r3, #4
    9574:	e5c43004 	strb	r3, [r4, #4]
    9578:	e3500000 	cmp	r0, #0
    957c:	0a000000 	beq	9584 <CTask::~CTask()+0x4c>
    9580:	eb003c79 	bl	1876c <operator delete[](void*)>
    9584:	e1a00004 	mov	r0, r4
    9588:	e8bd8010 	pop	{r4, pc}
    958c:	00019a9c 	.word	0x00019a9c

00009590 <CTask::TaskEntry(void*)>:
    9590:	e92d4010 	push	{r4, lr}
    9594:	e2504000 	subs	r4, r0, #0
    9598:	0a000019 	beq	9604 <CTask::TaskEntry(void*)+0x74>
    959c:	e5942000 	ldr	r2, [r4]
    95a0:	e3093520 	movw	r3, #38176	; 0x9520
    95a4:	e3403000 	movt	r3, #0
    95a8:	e5922008 	ldr	r2, [r2, #8]
    95ac:	e1520003 	cmp	r2, r3
    95b0:	1a000010 	bne	95f8 <CTask::TaskEntry(void*)+0x68>
    95b4:	e3091aa8 	movw	r1, #39592	; 0x9aa8
    95b8:	e3401001 	movt	r1, #1
    95bc:	e30b0b90 	movw	r0, #48016	; 0xbb90
    95c0:	e3400001 	movt	r0, #1
    95c4:	e3a02036 	mov	r2, #54	; 0x36
    95c8:	eb00192e 	bl	fa88 <assertion_failed>
    95cc:	e3a03003 	mov	r3, #3
    95d0:	e5c43004 	strb	r3, [r4, #4]
    95d4:	ebffffba 	bl	94c4 <CScheduler::Get()>
    95d8:	ebfffd8e 	bl	8c18 <CScheduler::Yield()>
    95dc:	e3091aa8 	movw	r1, #39592	; 0x9aa8
    95e0:	e3401001 	movt	r1, #1
    95e4:	e30b0b90 	movw	r0, #48016	; 0xbb90
    95e8:	e3400001 	movt	r0, #1
    95ec:	e3a02053 	mov	r2, #83	; 0x53
    95f0:	e8bd4010 	pop	{r4, lr}
    95f4:	ea001923 	b	fa88 <assertion_failed>
    95f8:	e1a00004 	mov	r0, r4
    95fc:	e12fff32 	blx	r2
    9600:	eafffff1 	b	95cc <CTask::TaskEntry(void*)+0x3c>
    9604:	e3091aa8 	movw	r1, #39592	; 0x9aa8
    9608:	e3401001 	movt	r1, #1
    960c:	e3090ad4 	movw	r0, #39636	; 0x9ad4
    9610:	e3400001 	movt	r0, #1
    9614:	e3a0204c 	mov	r2, #76	; 0x4c
    9618:	eb00191a 	bl	fa88 <assertion_failed>
    961c:	eaffffde 	b	959c <CTask::TaskEntry(void*)+0xc>

00009620 <CTask::~CTask()>:
    9620:	e5d03004 	ldrb	r3, [r0, #4]
    9624:	e59f2054 	ldr	r2, [pc, #84]	; 9680 <CTask::~CTask()+0x60>
    9628:	e92d4010 	push	{r4, lr}
    962c:	e3530003 	cmp	r3, #3
    9630:	e1a04000 	mov	r4, r0
    9634:	e5802000 	str	r2, [r0]
    9638:	0a000005 	beq	9654 <CTask::~CTask()+0x34>
    963c:	e3091aa8 	movw	r1, #39592	; 0x9aa8
    9640:	e3401001 	movt	r1, #1
    9644:	e3090ab4 	movw	r0, #39604	; 0x9ab4
    9648:	e3400001 	movt	r0, #1
    964c:	e3a0202d 	mov	r2, #45	; 0x2d
    9650:	eb00190c 	bl	fa88 <assertion_failed>
    9654:	e59400c8 	ldr	r0, [r4, #200]	; 0xc8
    9658:	e3a03004 	mov	r3, #4
    965c:	e5c43004 	strb	r3, [r4, #4]
    9660:	e3500000 	cmp	r0, #0
    9664:	0a000000 	beq	966c <CTask::~CTask()+0x4c>
    9668:	eb003c3f 	bl	1876c <operator delete[](void*)>
    966c:	e1a00004 	mov	r0, r4
    9670:	e3a010cc 	mov	r1, #204	; 0xcc
    9674:	eb003c3d 	bl	18770 <operator delete(void*, unsigned int)>
    9678:	e1a00004 	mov	r0, r4
    967c:	e8bd8010 	pop	{r4, pc}
    9680:	00019a9c 	.word	0x00019a9c

00009684 <CTask::CTask(unsigned int)>:
    9684:	e59f2104 	ldr	r2, [pc, #260]	; 9790 <CTask::CTask(unsigned int)+0x10c>
    9688:	e3a03000 	mov	r3, #0
    968c:	e92d4010 	push	{r4, lr}
    9690:	e3510000 	cmp	r1, #0
    9694:	e1a04000 	mov	r4, r0
    9698:	e58010c4 	str	r1, [r0, #196]	; 0xc4
    969c:	e5802000 	str	r2, [r0]
    96a0:	e5c03004 	strb	r3, [r0, #4]
    96a4:	e58030c8 	str	r3, [r0, #200]	; 0xc8
    96a8:	0a000017 	beq	970c <CTask::CTask(unsigned int)+0x88>
    96ac:	e3510b01 	cmp	r1, #1024	; 0x400
    96b0:	3a000022 	bcc	9740 <CTask::CTask(unsigned int)+0xbc>
    96b4:	e3110003 	tst	r1, #3
    96b8:	1a000018 	bne	9720 <CTask::CTask(unsigned int)+0x9c>
    96bc:	e1a00001 	mov	r0, r1
    96c0:	eb003c27 	bl	18764 <operator new[](unsigned int)>
    96c4:	e3a020b8 	mov	r2, #184	; 0xb8
    96c8:	e58400c8 	str	r0, [r4, #200]	; 0xc8
    96cc:	e3a01000 	mov	r1, #0
    96d0:	e284000c 	add	r0, r4, #12
    96d4:	eb000bfb 	bl	c6c8 <memset>
    96d8:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    96dc:	e584400c 	str	r4, [r4, #12]
    96e0:	e3530000 	cmp	r3, #0
    96e4:	0a00001f 	beq	9768 <CTask::CTask(unsigned int)+0xe4>
    96e8:	eddf0b26 	vldr	d16, [pc, #152]	; 9788 <CTask::CTask(unsigned int)+0x104>
    96ec:	e2842010 	add	r2, r4, #16
    96f0:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
    96f4:	e3091590 	movw	r1, #38288	; 0x9590
    96f8:	e3401000 	movt	r1, #0
    96fc:	e5841040 	str	r1, [r4, #64]	; 0x40
    9700:	e0833000 	add	r3, r3, r0
    9704:	e584303c 	str	r3, [r4, #60]	; 0x3c
    9708:	f442078f 	vst1.32	{d16}, [r2]
    970c:	ebffff6c 	bl	94c4 <CScheduler::Get()>
    9710:	e1a01004 	mov	r1, r4
    9714:	ebfffe86 	bl	9134 <CScheduler::AddTask(CTask*)>
    9718:	e1a00004 	mov	r0, r4
    971c:	e8bd8010 	pop	{r4, pc}
    9720:	e3091aa8 	movw	r1, #39592	; 0x9aa8
    9724:	e3401001 	movt	r1, #1
    9728:	e3090af8 	movw	r0, #39672	; 0x9af8
    972c:	e3400001 	movt	r0, #1
    9730:	e3a02021 	mov	r2, #33	; 0x21
    9734:	eb0018d3 	bl	fa88 <assertion_failed>
    9738:	e59410c4 	ldr	r1, [r4, #196]	; 0xc4
    973c:	eaffffde 	b	96bc <CTask::CTask(unsigned int)+0x38>
    9740:	e3091aa8 	movw	r1, #39592	; 0x9aa8
    9744:	e3401001 	movt	r1, #1
    9748:	e3090ae0 	movw	r0, #39648	; 0x9ae0
    974c:	e3400001 	movt	r0, #1
    9750:	e3a02020 	mov	r2, #32
    9754:	eb0018cb 	bl	fa88 <assertion_failed>
    9758:	e59410c4 	ldr	r1, [r4, #196]	; 0xc4
    975c:	e3110003 	tst	r1, #3
    9760:	0affffd5 	beq	96bc <CTask::CTask(unsigned int)+0x38>
    9764:	eaffffed 	b	9720 <CTask::CTask(unsigned int)+0x9c>
    9768:	e3091aa8 	movw	r1, #39592	; 0x9aa8
    976c:	e3401001 	movt	r1, #1
    9770:	e3090b10 	movw	r0, #39696	; 0x9b10
    9774:	e3400001 	movt	r0, #1
    9778:	e3a0203f 	mov	r2, #63	; 0x3f
    977c:	eb0018c1 	bl	fa88 <assertion_failed>
    9780:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    9784:	eaffffd7 	b	96e8 <CTask::CTask(unsigned int)+0x64>
    9788:	40000000 	.word	0x40000000
    978c:	00000000 	.word	0x00000000
    9790:	00019a9c 	.word	0x00019a9c

00009794 <CTask::InitializeRegs()>:
    9794:	e92d4010 	push	{r4, lr}
    9798:	e1a04000 	mov	r4, r0
    979c:	e3a020b8 	mov	r2, #184	; 0xb8
    97a0:	e280000c 	add	r0, r0, #12
    97a4:	e3a01000 	mov	r1, #0
    97a8:	eb000bc6 	bl	c6c8 <memset>
    97ac:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    97b0:	e584400c 	str	r4, [r4, #12]
    97b4:	e3530000 	cmp	r3, #0
    97b8:	0a000009 	beq	97e4 <CTask::InitializeRegs()+0x50>
    97bc:	eddf0b11 	vldr	d16, [pc, #68]	; 9808 <CTask::InitializeRegs()+0x74>
    97c0:	e2841010 	add	r1, r4, #16
    97c4:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
    97c8:	e3092590 	movw	r2, #38288	; 0x9590
    97cc:	e3402000 	movt	r2, #0
    97d0:	e5842040 	str	r2, [r4, #64]	; 0x40
    97d4:	e0833000 	add	r3, r3, r0
    97d8:	e584303c 	str	r3, [r4, #60]	; 0x3c
    97dc:	f441078f 	vst1.32	{d16}, [r1]
    97e0:	e8bd8010 	pop	{r4, pc}
    97e4:	e3091aa8 	movw	r1, #39592	; 0x9aa8
    97e8:	e3401001 	movt	r1, #1
    97ec:	e3090b10 	movw	r0, #39696	; 0x9b10
    97f0:	e3400001 	movt	r0, #1
    97f4:	e3a0203f 	mov	r2, #63	; 0x3f
    97f8:	eb0018a2 	bl	fa88 <assertion_failed>
    97fc:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    9800:	eaffffed 	b	97bc <CTask::InitializeRegs()+0x28>
    9804:	e320f000 	nop	{0}
    9808:	40000000 	.word	0x40000000
    980c:	00000000 	.word	0x00000000

00009810 <CActLED::CActLED()>:
    9810:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
    9814:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9818:	e1a04000 	mov	r4, r0
    981c:	e30c376c 	movw	r3, #51052	; 0xc76c
    9820:	e3403001 	movt	r3, #1
    9824:	e24dd024 	sub	sp, sp, #36	; 0x24
    9828:	e3a06000 	mov	r6, #0
    982c:	e28d000c 	add	r0, sp, #12
    9830:	f444078f 	vst1.32	{d16}, [r4]
    9834:	e5834000 	str	r4, [r3]
    9838:	eb000093 	bl	9a8c <CBcmPropertyTags::CBcmPropertyTags()>
    983c:	e3a03010 	mov	r3, #16
    9840:	e28d000c 	add	r0, sp, #12
    9844:	e58d6000 	str	r6, [sp]
    9848:	e3a01002 	mov	r1, #2
    984c:	e3401001 	movt	r1, #1
    9850:	e08d2003 	add	r2, sp, r3
    9854:	eb000097 	bl	9ab8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9858:	e2505000 	subs	r5, r0, #0
    985c:	0a00001a 	beq	98cc <CActLED::CActLED()+0xbc>
    9860:	e59d301c 	ldr	r3, [sp, #28]
    9864:	e3130502 	tst	r3, #8388608	; 0x800000
    9868:	0a00001c 	beq	98e0 <CActLED::CActLED()+0xd0>
    986c:	e7e73253 	ubfx	r3, r3, #4, #8
    9870:	e3530001 	cmp	r3, #1
    9874:	9a00002e 	bls	9934 <CActLED::CActLED()+0x124>
    9878:	e353000c 	cmp	r3, #12
    987c:	13530009 	cmpne	r3, #9
    9880:	03a05001 	moveq	r5, #1
    9884:	13a05000 	movne	r5, #0
    9888:	e2255001 	eor	r5, r5, #1
    988c:	e3530008 	cmp	r3, #8
    9890:	1a000015 	bne	98ec <CActLED::CActLED()+0xdc>
    9894:	e3a00010 	mov	r0, #16
    9898:	eb003bb0 	bl	18760 <operator new(unsigned int)>
    989c:	e1a01006 	mov	r1, r6
    98a0:	e1a07000 	mov	r7, r0
    98a4:	eb002f23 	bl	15538 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    98a8:	e5946000 	ldr	r6, [r4]
    98ac:	e5847004 	str	r7, [r4, #4]
    98b0:	e5c45008 	strb	r5, [r4, #8]
    98b4:	e3560000 	cmp	r6, #0
    98b8:	0a000016 	beq	9918 <CActLED::CActLED()+0x108>
    98bc:	e2251001 	eor	r1, r5, #1
    98c0:	e1a00006 	mov	r0, r6
    98c4:	e6ef1071 	uxtb	r1, r1
    98c8:	eb00035e 	bl	a648 <CGPIOPin::Write(unsigned int)>
    98cc:	e28d000c 	add	r0, sp, #12
    98d0:	eb000073 	bl	9aa4 <CBcmPropertyTags::~CBcmPropertyTags()>
    98d4:	e1a00004 	mov	r0, r4
    98d8:	e28dd024 	add	sp, sp, #36	; 0x24
    98dc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    98e0:	e6ff3073 	uxth	r3, r3
    98e4:	e353000f 	cmp	r3, #15
    98e8:	9a000011 	bls	9934 <CActLED::CActLED()+0x124>
    98ec:	e3a00028 	mov	r0, #40	; 0x28
    98f0:	eb003b9a 	bl	18760 <operator new(unsigned int)>
    98f4:	e3a03000 	mov	r3, #0
    98f8:	e1a06000 	mov	r6, r0
    98fc:	e3a02001 	mov	r2, #1
    9900:	e3a0102f 	mov	r1, #47	; 0x2f
    9904:	eb000104 	bl	9d1c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    9908:	e5846000 	str	r6, [r4]
    990c:	e5c45008 	strb	r5, [r4, #8]
    9910:	e3560000 	cmp	r6, #0
    9914:	1affffe8 	bne	98bc <CActLED::CActLED()+0xac>
    9918:	e5940004 	ldr	r0, [r4, #4]
    991c:	e3500000 	cmp	r0, #0
    9920:	0affffe9 	beq	98cc <CActLED::CActLED()+0xbc>
    9924:	e2251001 	eor	r1, r5, #1
    9928:	e6ef1071 	uxtb	r1, r1
    992c:	eb002f66 	bl	156cc <CVirtualGPIOPin::Write(unsigned int)>
    9930:	eaffffe5 	b	98cc <CActLED::CActLED()+0xbc>
    9934:	e3a00028 	mov	r0, #40	; 0x28
    9938:	eb003b88 	bl	18760 <operator new(unsigned int)>
    993c:	e3a03000 	mov	r3, #0
    9940:	e3a02001 	mov	r2, #1
    9944:	e3a01010 	mov	r1, #16
    9948:	e1a06000 	mov	r6, r0
    994c:	eb0000f2 	bl	9d1c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    9950:	e3a03000 	mov	r3, #0
    9954:	e5846000 	str	r6, [r4]
    9958:	e1a05003 	mov	r5, r3
    995c:	e5c43008 	strb	r3, [r4, #8]
    9960:	eaffffd5 	b	98bc <CActLED::CActLED()+0xac>

00009964 <CActLED::~CActLED()>:
    9964:	e30c376c 	movw	r3, #51052	; 0xc76c
    9968:	e3403001 	movt	r3, #1
    996c:	e3a02000 	mov	r2, #0
    9970:	e5832000 	str	r2, [r3]
    9974:	e12fff1e 	bx	lr

00009978 <CActLED::On()>:
    9978:	e5903000 	ldr	r3, [r0]
    997c:	e3530000 	cmp	r3, #0
    9980:	0a000002 	beq	9990 <CActLED::On()+0x18>
    9984:	e5d01008 	ldrb	r1, [r0, #8]
    9988:	e1a00003 	mov	r0, r3
    998c:	ea00032d 	b	a648 <CGPIOPin::Write(unsigned int)>
    9990:	e5903004 	ldr	r3, [r0, #4]
    9994:	e3530000 	cmp	r3, #0
    9998:	012fff1e 	bxeq	lr
    999c:	e5d01008 	ldrb	r1, [r0, #8]
    99a0:	e1a00003 	mov	r0, r3
    99a4:	ea002f48 	b	156cc <CVirtualGPIOPin::Write(unsigned int)>

000099a8 <CActLED::Off()>:
    99a8:	e5903000 	ldr	r3, [r0]
    99ac:	e3530000 	cmp	r3, #0
    99b0:	0a000003 	beq	99c4 <CActLED::Off()+0x1c>
    99b4:	e5d01008 	ldrb	r1, [r0, #8]
    99b8:	e1a00003 	mov	r0, r3
    99bc:	e2211001 	eor	r1, r1, #1
    99c0:	ea000320 	b	a648 <CGPIOPin::Write(unsigned int)>
    99c4:	e5903004 	ldr	r3, [r0, #4]
    99c8:	e3530000 	cmp	r3, #0
    99cc:	012fff1e 	bxeq	lr
    99d0:	e5d01008 	ldrb	r1, [r0, #8]
    99d4:	e1a00003 	mov	r0, r3
    99d8:	e2211001 	eor	r1, r1, #1
    99dc:	ea002f3a 	b	156cc <CVirtualGPIOPin::Write(unsigned int)>

000099e0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    99e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    99e4:	e2518000 	subs	r8, r1, #0
    99e8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    99ec:	e1a07003 	mov	r7, r3
    99f0:	e1a06002 	mov	r6, r2
    99f4:	e1a04000 	mov	r4, r0
    99f8:	e3a05001 	mov	r5, #1
    99fc:	ea00000e 	b	9a3c <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x5c>
    9a00:	e5d41008 	ldrb	r1, [r4, #8]
    9a04:	eb00030f 	bl	a648 <CGPIOPin::Write(unsigned int)>
    9a08:	e1a00006 	mov	r0, r6
    9a0c:	eb000ad1 	bl	c558 <CTimer::SimpleMsDelay(unsigned int)>
    9a10:	e594c000 	ldr	ip, [r4]
    9a14:	e25c0000 	subs	r0, ip, #0
    9a18:	0a000010 	beq	9a60 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x80>
    9a1c:	e5d41008 	ldrb	r1, [r4, #8]
    9a20:	e2211001 	eor	r1, r1, #1
    9a24:	eb000307 	bl	a648 <CGPIOPin::Write(unsigned int)>
    9a28:	e2855001 	add	r5, r5, #1
    9a2c:	e1a00007 	mov	r0, r7
    9a30:	eb000ac8 	bl	c558 <CTimer::SimpleMsDelay(unsigned int)>
    9a34:	e1580005 	cmp	r8, r5
    9a38:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    9a3c:	e594c000 	ldr	ip, [r4]
    9a40:	e25c0000 	subs	r0, ip, #0
    9a44:	1affffed 	bne	9a00 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x20>
    9a48:	e5943004 	ldr	r3, [r4, #4]
    9a4c:	e2530000 	subs	r0, r3, #0
    9a50:	0affffec 	beq	9a08 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x28>
    9a54:	e5d41008 	ldrb	r1, [r4, #8]
    9a58:	eb002f1b 	bl	156cc <CVirtualGPIOPin::Write(unsigned int)>
    9a5c:	eaffffe9 	b	9a08 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x28>
    9a60:	e5943004 	ldr	r3, [r4, #4]
    9a64:	e2530000 	subs	r0, r3, #0
    9a68:	0affffee 	beq	9a28 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x48>
    9a6c:	e5d41008 	ldrb	r1, [r4, #8]
    9a70:	e2211001 	eor	r1, r1, #1
    9a74:	eb002f14 	bl	156cc <CVirtualGPIOPin::Write(unsigned int)>
    9a78:	eaffffea 	b	9a28 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x48>

00009a7c <CActLED::Get()>:
    9a7c:	e30c376c 	movw	r3, #51052	; 0xc76c
    9a80:	e3403001 	movt	r3, #1
    9a84:	e5930000 	ldr	r0, [r3]
    9a88:	e12fff1e 	bx	lr

00009a8c <CBcmPropertyTags::CBcmPropertyTags()>:
    9a8c:	e92d4010 	push	{r4, lr}
    9a90:	e3a01008 	mov	r1, #8
    9a94:	e1a04000 	mov	r4, r0
    9a98:	eb003d4f 	bl	18fdc <CBcmMailBox::CBcmMailBox(unsigned int)>
    9a9c:	e1a00004 	mov	r0, r4
    9aa0:	e8bd8010 	pop	{r4, pc}

00009aa4 <CBcmPropertyTags::~CBcmPropertyTags()>:
    9aa4:	e92d4010 	push	{r4, lr}
    9aa8:	e1a04000 	mov	r4, r0
    9aac:	eb003d4c 	bl	18fe4 <CBcmMailBox::~CBcmMailBox()>
    9ab0:	e1a00004 	mov	r0, r4
    9ab4:	e8bd8010 	pop	{r4, pc}

00009ab8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    9ab8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9abc:	e1a09000 	mov	r9, r0
    9ac0:	e1a08001 	mov	r8, r1
    9ac4:	e1a04003 	mov	r4, r3
    9ac8:	e2525000 	subs	r5, r2, #0
    9acc:	e59d6020 	ldr	r6, [sp, #32]
    9ad0:	0a000045 	beq	9bec <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x134>
    9ad4:	e354000f 	cmp	r4, #15
    9ad8:	e3c66102 	bic	r6, r6, #-2147483648	; 0x80000000
    9adc:	e244700c 	sub	r7, r4, #12
    9ae0:	85858000 	strhi	r8, [r5]
    9ae4:	85857004 	strhi	r7, [r5, #4]
    9ae8:	85856008 	strhi	r6, [r5, #8]
    9aec:	9a00002e 	bls	9bac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf4>
    9af0:	e284a00c 	add	sl, r4, #12
    9af4:	e31a0003 	tst	sl, #3
    9af8:	1a000024 	bne	9b90 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xd8>
    9afc:	e3a00000 	mov	r0, #0
    9b00:	e1a08000 	mov	r8, r0
    9b04:	eb00064d 	bl	b440 <CMemorySystem::GetCoherentPage(unsigned int)>
    9b08:	e1a06000 	mov	r6, r0
    9b0c:	e2807008 	add	r7, r0, #8
    9b10:	e1a02004 	mov	r2, r4
    9b14:	e1a00007 	mov	r0, r7
    9b18:	e1a01005 	mov	r1, r5
    9b1c:	e586a000 	str	sl, [r6]
    9b20:	e5868004 	str	r8, [r6, #4]
    9b24:	eb000ca8 	bl	cdcc <memcpy>
    9b28:	e7878004 	str	r8, [r7, r4]
    9b2c:	f57ff04f 	dsb	sy
    9b30:	e2868103 	add	r8, r6, #-1073741824	; 0xc0000000
    9b34:	e1a00009 	mov	r0, r9
    9b38:	e1a01008 	mov	r1, r8
    9b3c:	eb003d29 	bl	18fe8 <CBcmMailBox::WriteRead(unsigned int)>
    9b40:	e1580000 	cmp	r8, r0
    9b44:	0a000001 	beq	9b50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x98>
    9b48:	e3a00000 	mov	r0, #0
    9b4c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9b50:	f57ff05f 	dmb	sy
    9b54:	e5963004 	ldr	r3, [r6, #4]
    9b58:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    9b5c:	1afffff9 	bne	9b48 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x90>
    9b60:	e1a02004 	mov	r2, r4
    9b64:	e1a01007 	mov	r1, r7
    9b68:	e1a00005 	mov	r0, r5
    9b6c:	eb000c96 	bl	cdcc <memcpy>
    9b70:	e5950008 	ldr	r0, [r5, #8]
    9b74:	e3500000 	cmp	r0, #0
    9b78:	aafffff2 	bge	9b48 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x90>
    9b7c:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    9b80:	e5850008 	str	r0, [r5, #8]
    9b84:	e2900000 	adds	r0, r0, #0
    9b88:	13a00001 	movne	r0, #1
    9b8c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9b90:	e3091b20 	movw	r1, #39712	; 0x9b20
    9b94:	e3401001 	movt	r1, #1
    9b98:	e3090b94 	movw	r0, #39828	; 0x9b94
    9b9c:	e3400001 	movt	r0, #1
    9ba0:	e3a02052 	mov	r2, #82	; 0x52
    9ba4:	eb0017b7 	bl	fa88 <assertion_failed>
    9ba8:	eaffffd3 	b	9afc <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x44>
    9bac:	e3a02033 	mov	r2, #51	; 0x33
    9bb0:	e3091b20 	movw	r1, #39712	; 0x9b20
    9bb4:	e3401001 	movt	r1, #1
    9bb8:	e3090b40 	movw	r0, #39744	; 0x9b40
    9bbc:	e3400001 	movt	r0, #1
    9bc0:	eb0017b0 	bl	fa88 <assertion_failed>
    9bc4:	e5858000 	str	r8, [r5]
    9bc8:	e5857004 	str	r7, [r5, #4]
    9bcc:	e3091b20 	movw	r1, #39712	; 0x9b20
    9bd0:	e3401001 	movt	r1, #1
    9bd4:	e5856008 	str	r6, [r5, #8]
    9bd8:	e3090b68 	movw	r0, #39784	; 0x9b68
    9bdc:	e3400001 	movt	r0, #1
    9be0:	e3a02050 	mov	r2, #80	; 0x50
    9be4:	eb0017a7 	bl	fa88 <assertion_failed>
    9be8:	eaffffc0 	b	9af0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x38>
    9bec:	e3091b20 	movw	r1, #39712	; 0x9b20
    9bf0:	e3401001 	movt	r1, #1
    9bf4:	e3090b34 	movw	r0, #39732	; 0x9b34
    9bf8:	e3400001 	movt	r0, #1
    9bfc:	e3a02032 	mov	r2, #50	; 0x32
    9c00:	eb0017a0 	bl	fa88 <assertion_failed>
    9c04:	eaffffb2 	b	9ad4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>

00009c08 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    9c08:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9c0c:	e1a0a000 	mov	sl, r0
    9c10:	e1a05002 	mov	r5, r2
    9c14:	e2519000 	subs	r9, r1, #0
    9c18:	0a000031 	beq	9ce4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xdc>
    9c1c:	e355000f 	cmp	r5, #15
    9c20:	9a000028 	bls	9cc8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xc0>
    9c24:	e285800c 	add	r8, r5, #12
    9c28:	e3180003 	tst	r8, #3
    9c2c:	1a00001e 	bne	9cac <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa4>
    9c30:	e3a00000 	mov	r0, #0
    9c34:	e1a07000 	mov	r7, r0
    9c38:	eb000600 	bl	b440 <CMemorySystem::GetCoherentPage(unsigned int)>
    9c3c:	e1a04000 	mov	r4, r0
    9c40:	e2806008 	add	r6, r0, #8
    9c44:	e1a02005 	mov	r2, r5
    9c48:	e1a00006 	mov	r0, r6
    9c4c:	e1a01009 	mov	r1, r9
    9c50:	e5848000 	str	r8, [r4]
    9c54:	e5847004 	str	r7, [r4, #4]
    9c58:	eb000c5b 	bl	cdcc <memcpy>
    9c5c:	e7867005 	str	r7, [r6, r5]
    9c60:	f57ff04f 	dsb	sy
    9c64:	e2847103 	add	r7, r4, #-1073741824	; 0xc0000000
    9c68:	e1a0000a 	mov	r0, sl
    9c6c:	e1a01007 	mov	r1, r7
    9c70:	eb003cdc 	bl	18fe8 <CBcmMailBox::WriteRead(unsigned int)>
    9c74:	e1500007 	cmp	r0, r7
    9c78:	0a000001 	beq	9c84 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x7c>
    9c7c:	e3a00000 	mov	r0, #0
    9c80:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9c84:	f57ff05f 	dmb	sy
    9c88:	e5943004 	ldr	r3, [r4, #4]
    9c8c:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    9c90:	1afffff9 	bne	9c7c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x74>
    9c94:	e1a02005 	mov	r2, r5
    9c98:	e1a01006 	mov	r1, r6
    9c9c:	e1a00009 	mov	r0, r9
    9ca0:	eb000c49 	bl	cdcc <memcpy>
    9ca4:	e3a00001 	mov	r0, #1
    9ca8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9cac:	e3091b20 	movw	r1, #39712	; 0x9b20
    9cb0:	e3401001 	movt	r1, #1
    9cb4:	e3090b94 	movw	r0, #39828	; 0x9b94
    9cb8:	e3400001 	movt	r0, #1
    9cbc:	e3a02052 	mov	r2, #82	; 0x52
    9cc0:	eb001770 	bl	fa88 <assertion_failed>
    9cc4:	eaffffd9 	b	9c30 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    9cc8:	e3091b20 	movw	r1, #39712	; 0x9b20
    9ccc:	e3401001 	movt	r1, #1
    9cd0:	e3090b68 	movw	r0, #39784	; 0x9b68
    9cd4:	e3400001 	movt	r0, #1
    9cd8:	e3a02050 	mov	r2, #80	; 0x50
    9cdc:	eb001769 	bl	fa88 <assertion_failed>
    9ce0:	eaffffcf 	b	9c24 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    9ce4:	e3091b20 	movw	r1, #39712	; 0x9b20
    9ce8:	e3401001 	movt	r1, #1
    9cec:	e3090bac 	movw	r0, #39852	; 0x9bac
    9cf0:	e3400001 	movt	r0, #1
    9cf4:	e3a0204f 	mov	r2, #79	; 0x4f
    9cf8:	eb001762 	bl	fa88 <assertion_failed>
    9cfc:	eaffffc6 	b	9c1c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>

00009d00 <CGPIOPin::~CGPIOPin()>:
    9d00:	e12fff1e 	bx	lr

00009d04 <CGPIOPin::~CGPIOPin()>:
    9d04:	e92d4010 	push	{r4, lr}
    9d08:	e3a01028 	mov	r1, #40	; 0x28
    9d0c:	e1a04000 	mov	r4, r0
    9d10:	eb003a96 	bl	18770 <operator delete(void*, unsigned int)>
    9d14:	e1a00004 	mov	r0, r4
    9d18:	e8bd8010 	pop	{r4, pc}

00009d1c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    9d1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9d20:	e1a04000 	mov	r4, r0
    9d24:	e59f04d0 	ldr	r0, [pc, #1232]	; a1fc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x4e0>
    9d28:	e1a05001 	mov	r5, r1
    9d2c:	e3510035 	cmp	r1, #53	; 0x35
    9d30:	e1a06002 	mov	r6, r2
    9d34:	e3a0100a 	mov	r1, #10
    9d38:	e5843018 	str	r3, [r4, #24]
    9d3c:	e3a02000 	mov	r2, #0
    9d40:	e3a03006 	mov	r3, #6
    9d44:	e8840021 	stm	r4, {r0, r5}
    9d48:	e5c41010 	strb	r1, [r4, #16]
    9d4c:	e584201c 	str	r2, [r4, #28]
    9d50:	e5c43024 	strb	r3, [r4, #36]	; 0x24
    9d54:	e5c43025 	strb	r3, [r4, #37]	; 0x25
    9d58:	8a00008f 	bhi	9f9c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x280>
    9d5c:	e205201f 	and	r2, r5, #31
    9d60:	e3a03001 	mov	r3, #1
    9d64:	e1a052a5 	lsr	r5, r5, #5
    9d68:	e3560009 	cmp	r6, #9
    9d6c:	e1a05105 	lsl	r5, r5, #2
    9d70:	e1a03213 	lsl	r3, r3, r2
    9d74:	e5845008 	str	r5, [r4, #8]
    9d78:	e584300c 	str	r3, [r4, #12]
    9d7c:	8a00007f 	bhi	9f80 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x264>
    9d80:	e2463004 	sub	r3, r6, #4
    9d84:	e5c46010 	strb	r6, [r4, #16]
    9d88:	e3530005 	cmp	r3, #5
    9d8c:	8a000039 	bhi	9e78 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x15c>
    9d90:	e30c6770 	movw	r6, #51056	; 0xc770
    9d94:	e3406001 	movt	r6, #1
    9d98:	e5943008 	ldr	r3, [r4, #8]
    9d9c:	e3a05098 	mov	r5, #152	; 0x98
    9da0:	e3435f20 	movt	r5, #16160	; 0x3f20
    9da4:	e5960000 	ldr	r0, [r6]
    9da8:	e0835005 	add	r5, r3, r5
    9dac:	e3500000 	cmp	r0, #0
    9db0:	1a00009d 	bne	a02c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x310>
    9db4:	e3a08000 	mov	r8, #0
    9db8:	e3438f20 	movt	r8, #16160	; 0x3f20
    9dbc:	e3a07000 	mov	r7, #0
    9dc0:	e3a00005 	mov	r0, #5
    9dc4:	e5887094 	str	r7, [r8, #148]	; 0x94
    9dc8:	eb0009f2 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
    9dcc:	e594300c 	ldr	r3, [r4, #12]
    9dd0:	e5853000 	str	r3, [r5]
    9dd4:	e3a00005 	mov	r0, #5
    9dd8:	eb0009ee 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
    9ddc:	e5887094 	str	r7, [r8, #148]	; 0x94
    9de0:	e5857000 	str	r7, [r5]
    9de4:	e5963000 	ldr	r3, [r6]
    9de8:	e1530007 	cmp	r3, r7
    9dec:	1a000079 	bne	9fd8 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x2bc>
    9df0:	e5d48010 	ldrb	r8, [r4, #16]
    9df4:	e5942004 	ldr	r2, [r4, #4]
    9df8:	e2488004 	sub	r8, r8, #4
    9dfc:	e3520035 	cmp	r2, #53	; 0x35
    9e00:	8a000076 	bhi	9fe0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x2c4>
    9e04:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    9e08:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    9e0c:	e3a0100a 	mov	r1, #10
    9e10:	e3580005 	cmp	r8, #5
    9e14:	e0853293 	umull	r3, r5, r3, r2
    9e18:	e1a051a5 	lsr	r5, r5, #3
    9e1c:	e285753f 	add	r7, r5, #264241152	; 0xfc00000
    9e20:	e2877702 	add	r7, r7, #524288	; 0x80000
    9e24:	e0652591 	mls	r5, r1, r5, r2
    9e28:	e1a07107 	lsl	r7, r7, #2
    9e2c:	e0855085 	add	r5, r5, r5, lsl #1
    9e30:	8a000072 	bhi	a000 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x2e4>
    9e34:	e5960000 	ldr	r0, [r6]
    9e38:	e3500000 	cmp	r0, #0
    9e3c:	1a000078 	bne	a024 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x308>
    9e40:	e3093bb8 	movw	r3, #39864	; 0x9bb8
    9e44:	e3403001 	movt	r3, #1
    9e48:	e0838108 	add	r8, r3, r8, lsl #2
    9e4c:	e5973000 	ldr	r3, [r7]
    9e50:	e3a01007 	mov	r1, #7
    9e54:	e5982010 	ldr	r2, [r8, #16]
    9e58:	e1c33511 	bic	r3, r3, r1, lsl r5
    9e5c:	e1835512 	orr	r5, r3, r2, lsl r5
    9e60:	e5875000 	str	r5, [r7]
    9e64:	e5963000 	ldr	r3, [r6]
    9e68:	e3530000 	cmp	r3, #0
    9e6c:	1a000040 	bne	9f74 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x258>
    9e70:	e1a00004 	mov	r0, r4
    9e74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9e78:	e3560001 	cmp	r6, #1
    9e7c:	e30c6770 	movw	r6, #51056	; 0xc770
    9e80:	e3406001 	movt	r6, #1
    9e84:	0a00006a 	beq	a034 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x318>
    9e88:	e5942004 	ldr	r2, [r4, #4]
    9e8c:	e3520035 	cmp	r2, #53	; 0x35
    9e90:	8a0000b0 	bhi	a158 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x43c>
    9e94:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    9e98:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    9e9c:	e3a0100a 	mov	r1, #10
    9ea0:	e5960000 	ldr	r0, [r6]
    9ea4:	e0853293 	umull	r3, r5, r3, r2
    9ea8:	e3500000 	cmp	r0, #0
    9eac:	e1a051a5 	lsr	r5, r5, #3
    9eb0:	e285353f 	add	r3, r5, #264241152	; 0xfc00000
    9eb4:	e2833702 	add	r3, r3, #524288	; 0x80000
    9eb8:	e0652591 	mls	r5, r1, r5, r2
    9ebc:	e1a07103 	lsl	r7, r3, #2
    9ec0:	e0855085 	add	r5, r5, r5, lsl #1
    9ec4:	0a000000 	beq	9ecc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x1b0>
    9ec8:	eb000564 	bl	b460 <EnterCritical>
    9ecc:	e5973000 	ldr	r3, [r7]
    9ed0:	e3a01007 	mov	r1, #7
    9ed4:	e5d42010 	ldrb	r2, [r4, #16]
    9ed8:	e1c33511 	bic	r3, r3, r1, lsl r5
    9edc:	e2421001 	sub	r1, r2, #1
    9ee0:	e16f1f11 	clz	r1, r1
    9ee4:	e1a012a1 	lsr	r1, r1, #5
    9ee8:	e1835511 	orr	r5, r3, r1, lsl r5
    9eec:	e5875000 	str	r5, [r7]
    9ef0:	e5963000 	ldr	r3, [r6]
    9ef4:	e3530000 	cmp	r3, #0
    9ef8:	1a00009e 	bne	a178 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x45c>
    9efc:	e3520003 	cmp	r2, #3
    9f00:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
    9f04:	eaffffd9 	b	9e70 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x154>
    9f08:	0000a0e4 	.word	0x0000a0e4
    9f0c:	0000a134 	.word	0x0000a134
    9f10:	00009f18 	.word	0x00009f18
    9f14:	0000a0c4 	.word	0x0000a0c4
    9f18:	e5943008 	ldr	r3, [r4, #8]
    9f1c:	e3a05098 	mov	r5, #152	; 0x98
    9f20:	e3435f20 	movt	r5, #16160	; 0x3f20
    9f24:	e5960000 	ldr	r0, [r6]
    9f28:	e0835005 	add	r5, r3, r5
    9f2c:	e3500000 	cmp	r0, #0
    9f30:	1a0000af 	bne	a1f4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x4d8>
    9f34:	e3a07000 	mov	r7, #0
    9f38:	e3437f20 	movt	r7, #16160	; 0x3f20
    9f3c:	e3a03002 	mov	r3, #2
    9f40:	e3a00005 	mov	r0, #5
    9f44:	e5873094 	str	r3, [r7, #148]	; 0x94
    9f48:	eb000992 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
    9f4c:	e594300c 	ldr	r3, [r4, #12]
    9f50:	e5853000 	str	r3, [r5]
    9f54:	e3a00005 	mov	r0, #5
    9f58:	eb00098e 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
    9f5c:	e3a03000 	mov	r3, #0
    9f60:	e5873094 	str	r3, [r7, #148]	; 0x94
    9f64:	e5853000 	str	r3, [r5]
    9f68:	e5963000 	ldr	r3, [r6]
    9f6c:	e3530000 	cmp	r3, #0
    9f70:	0affffbe 	beq	9e70 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x154>
    9f74:	eb000566 	bl	b514 <LeaveCritical>
    9f78:	e1a00004 	mov	r0, r4
    9f7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9f80:	e3091be0 	movw	r1, #39904	; 0x9be0
    9f84:	e3401001 	movt	r1, #1
    9f88:	e3090c00 	movw	r0, #39936	; 0x9c00
    9f8c:	e3400001 	movt	r0, #1
    9f90:	e3a0203d 	mov	r2, #61	; 0x3d
    9f94:	eb0016bb 	bl	fa88 <assertion_failed>
    9f98:	eaffff78 	b	9d80 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x64>
    9f9c:	eb002f71 	bl	15d68 <CMachineInfo::Get()>
    9fa0:	e6ef1075 	uxtb	r1, r5
    9fa4:	eb002f44 	bl	15cbc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    9fa8:	e1a05000 	mov	r5, r0
    9fac:	e3500035 	cmp	r0, #53	; 0x35
    9fb0:	e5840004 	str	r0, [r4, #4]
    9fb4:	9affff68 	bls	9d5c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x40>
    9fb8:	e3091be0 	movw	r1, #39904	; 0x9be0
    9fbc:	e3401001 	movt	r1, #1
    9fc0:	e3090bec 	movw	r0, #39916	; 0x9bec
    9fc4:	e3400001 	movt	r0, #1
    9fc8:	e3a0202b 	mov	r2, #43	; 0x2b
    9fcc:	eb0016ad 	bl	fa88 <assertion_failed>
    9fd0:	e5945004 	ldr	r5, [r4, #4]
    9fd4:	eaffff60 	b	9d5c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x40>
    9fd8:	eb00054d 	bl	b514 <LeaveCritical>
    9fdc:	eaffff83 	b	9df0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0xd4>
    9fe0:	e3002132 	movw	r2, #306	; 0x132
    9fe4:	e3091be0 	movw	r1, #39904	; 0x9be0
    9fe8:	e3401001 	movt	r1, #1
    9fec:	e3090bec 	movw	r0, #39916	; 0x9bec
    9ff0:	e3400001 	movt	r0, #1
    9ff4:	eb0016a3 	bl	fa88 <assertion_failed>
    9ff8:	e5942004 	ldr	r2, [r4, #4]
    9ffc:	eaffff80 	b	9e04 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0xe8>
    a000:	e3091be0 	movw	r1, #39904	; 0x9be0
    a004:	e3401001 	movt	r1, #1
    a008:	e3090c18 	movw	r0, #39960	; 0x9c18
    a00c:	e3400001 	movt	r0, #1
    a010:	e3002136 	movw	r2, #310	; 0x136
    a014:	eb00169b 	bl	fa88 <assertion_failed>
    a018:	e5960000 	ldr	r0, [r6]
    a01c:	e3500000 	cmp	r0, #0
    a020:	0affff86 	beq	9e40 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x124>
    a024:	eb00050d 	bl	b460 <EnterCritical>
    a028:	eaffff84 	b	9e40 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x124>
    a02c:	eb00050b 	bl	b460 <EnterCritical>
    a030:	eaffff5f 	b	9db4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x98>
    a034:	e5943008 	ldr	r3, [r4, #8]
    a038:	e3a05098 	mov	r5, #152	; 0x98
    a03c:	e3435f20 	movt	r5, #16160	; 0x3f20
    a040:	e5960000 	ldr	r0, [r6]
    a044:	e0835005 	add	r5, r3, r5
    a048:	e3500000 	cmp	r0, #0
    a04c:	1a000066 	bne	a1ec <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x4d0>
    a050:	e3a08000 	mov	r8, #0
    a054:	e3438f20 	movt	r8, #16160	; 0x3f20
    a058:	e3a07000 	mov	r7, #0
    a05c:	e3a00005 	mov	r0, #5
    a060:	e5887094 	str	r7, [r8, #148]	; 0x94
    a064:	eb00094b 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
    a068:	e594300c 	ldr	r3, [r4, #12]
    a06c:	e5853000 	str	r3, [r5]
    a070:	e3a00005 	mov	r0, #5
    a074:	eb000947 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
    a078:	e5887094 	str	r7, [r8, #148]	; 0x94
    a07c:	e5857000 	str	r7, [r5]
    a080:	e5963000 	ldr	r3, [r6]
    a084:	e1530007 	cmp	r3, r7
    a088:	1a000055 	bne	a1e4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x4c8>
    a08c:	e5942004 	ldr	r2, [r4, #4]
    a090:	e3520035 	cmp	r2, #53	; 0x35
    a094:	8a00002f 	bhi	a158 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x43c>
    a098:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    a09c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    a0a0:	e3a0100a 	mov	r1, #10
    a0a4:	e0853293 	umull	r3, r5, r3, r2
    a0a8:	e1a051a5 	lsr	r5, r5, #3
    a0ac:	e285353f 	add	r3, r5, #264241152	; 0xfc00000
    a0b0:	e2833702 	add	r3, r3, #524288	; 0x80000
    a0b4:	e0652591 	mls	r5, r1, r5, r2
    a0b8:	e1a07103 	lsl	r7, r3, #2
    a0bc:	e0855085 	add	r5, r5, r5, lsl #1
    a0c0:	eaffff81 	b	9ecc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x1b0>
    a0c4:	e5943008 	ldr	r3, [r4, #8]
    a0c8:	e3a05098 	mov	r5, #152	; 0x98
    a0cc:	e3435f20 	movt	r5, #16160	; 0x3f20
    a0d0:	e0835005 	add	r5, r3, r5
    a0d4:	e3a07000 	mov	r7, #0
    a0d8:	e3437f20 	movt	r7, #16160	; 0x3f20
    a0dc:	e3a03001 	mov	r3, #1
    a0e0:	eaffff96 	b	9f40 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x224>
    a0e4:	e5943008 	ldr	r3, [r4, #8]
    a0e8:	e3a05098 	mov	r5, #152	; 0x98
    a0ec:	e3435f20 	movt	r5, #16160	; 0x3f20
    a0f0:	e0835005 	add	r5, r3, r5
    a0f4:	e3a08000 	mov	r8, #0
    a0f8:	e3438f20 	movt	r8, #16160	; 0x3f20
    a0fc:	e3a07000 	mov	r7, #0
    a100:	e3a00005 	mov	r0, #5
    a104:	e5887094 	str	r7, [r8, #148]	; 0x94
    a108:	eb000922 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
    a10c:	e594300c 	ldr	r3, [r4, #12]
    a110:	e5853000 	str	r3, [r5]
    a114:	e3a00005 	mov	r0, #5
    a118:	eb00091e 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
    a11c:	e5887094 	str	r7, [r8, #148]	; 0x94
    a120:	e5857000 	str	r7, [r5]
    a124:	e5963000 	ldr	r3, [r6]
    a128:	e1530007 	cmp	r3, r7
    a12c:	0affff4f 	beq	9e70 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x154>
    a130:	eaffff8f 	b	9f74 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x258>
    a134:	e5942008 	ldr	r2, [r4, #8]
    a138:	e3a03028 	mov	r3, #40	; 0x28
    a13c:	e3433f20 	movt	r3, #16160	; 0x3f20
    a140:	e594100c 	ldr	r1, [r4, #12]
    a144:	e3a00000 	mov	r0, #0
    a148:	e5840014 	str	r0, [r4, #20]
    a14c:	e1a00004 	mov	r0, r4
    a150:	e7821003 	str	r1, [r2, r3]
    a154:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a158:	e3a02056 	mov	r2, #86	; 0x56
    a15c:	e3091be0 	movw	r1, #39904	; 0x9be0
    a160:	e3401001 	movt	r1, #1
    a164:	e3090bec 	movw	r0, #39916	; 0x9bec
    a168:	e3400001 	movt	r0, #1
    a16c:	eb001645 	bl	fa88 <assertion_failed>
    a170:	e5942004 	ldr	r2, [r4, #4]
    a174:	eaffff46 	b	9e94 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x178>
    a178:	eb0004e5 	bl	b514 <LeaveCritical>
    a17c:	e5d43010 	ldrb	r3, [r4, #16]
    a180:	e3530003 	cmp	r3, #3
    a184:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    a188:	eaffff38 	b	9e70 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x154>
    a18c:	0000a19c 	.word	0x0000a19c
    a190:	0000a134 	.word	0x0000a134
    a194:	00009f18 	.word	0x00009f18
    a198:	0000a1c0 	.word	0x0000a1c0
    a19c:	e5943008 	ldr	r3, [r4, #8]
    a1a0:	e3a05098 	mov	r5, #152	; 0x98
    a1a4:	e3435f20 	movt	r5, #16160	; 0x3f20
    a1a8:	e5960000 	ldr	r0, [r6]
    a1ac:	e0835005 	add	r5, r3, r5
    a1b0:	e3500000 	cmp	r0, #0
    a1b4:	0affffce 	beq	a0f4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x3d8>
    a1b8:	eb0004a8 	bl	b460 <EnterCritical>
    a1bc:	eaffffcc 	b	a0f4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x3d8>
    a1c0:	e5943008 	ldr	r3, [r4, #8]
    a1c4:	e3a05098 	mov	r5, #152	; 0x98
    a1c8:	e3435f20 	movt	r5, #16160	; 0x3f20
    a1cc:	e5960000 	ldr	r0, [r6]
    a1d0:	e0835005 	add	r5, r3, r5
    a1d4:	e3500000 	cmp	r0, #0
    a1d8:	0affffbd 	beq	a0d4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x3b8>
    a1dc:	eb00049f 	bl	b460 <EnterCritical>
    a1e0:	eaffffbb 	b	a0d4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x3b8>
    a1e4:	eb0004ca 	bl	b514 <LeaveCritical>
    a1e8:	eaffff26 	b	9e88 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x16c>
    a1ec:	eb00049b 	bl	b460 <EnterCritical>
    a1f0:	eaffff96 	b	a050 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x334>
    a1f4:	eb000499 	bl	b460 <EnterCritical>
    a1f8:	eaffff4d 	b	9f34 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x218>
    a1fc:	00019bc0 	.word	0x00019bc0

0000a200 <CGPIOPin::SetMode(TGPIOMode, bool)>:
    a200:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a204:	e3510009 	cmp	r1, #9
    a208:	e1a04001 	mov	r4, r1
    a20c:	e1a06000 	mov	r6, r0
    a210:	e1a07002 	mov	r7, r2
    a214:	8a000057 	bhi	a378 <CGPIOPin::SetMode(TGPIOMode, bool)+0x178>
    a218:	e2448004 	sub	r8, r4, #4
    a21c:	e5c64010 	strb	r4, [r6, #16]
    a220:	e6ef3078 	uxtb	r3, r8
    a224:	e3530005 	cmp	r3, #5
    a228:	8a000023 	bhi	a2bc <CGPIOPin::SetMode(TGPIOMode, bool)+0xbc>
    a22c:	e30c5770 	movw	r5, #51056	; 0xc770
    a230:	e3405001 	movt	r5, #1
    a234:	e3570000 	cmp	r7, #0
    a238:	1a000055 	bne	a394 <CGPIOPin::SetMode(TGPIOMode, bool)+0x194>
    a23c:	e5962004 	ldr	r2, [r6, #4]
    a240:	e3520035 	cmp	r2, #53	; 0x35
    a244:	8a00006e 	bhi	a404 <CGPIOPin::SetMode(TGPIOMode, bool)+0x204>
    a248:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    a24c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    a250:	e3a0100a 	mov	r1, #10
    a254:	e3580005 	cmp	r8, #5
    a258:	e0843293 	umull	r3, r4, r3, r2
    a25c:	e1a041a4 	lsr	r4, r4, #3
    a260:	e284653f 	add	r6, r4, #264241152	; 0xfc00000
    a264:	e2866702 	add	r6, r6, #524288	; 0x80000
    a268:	e0642491 	mls	r4, r1, r4, r2
    a26c:	e1a06106 	lsl	r6, r6, #2
    a270:	e0844084 	add	r4, r4, r4, lsl #1
    a274:	8a00006a 	bhi	a424 <CGPIOPin::SetMode(TGPIOMode, bool)+0x224>
    a278:	e5950000 	ldr	r0, [r5]
    a27c:	e3500000 	cmp	r0, #0
    a280:	1a000070 	bne	a448 <CGPIOPin::SetMode(TGPIOMode, bool)+0x248>
    a284:	e3093bb8 	movw	r3, #39864	; 0x9bb8
    a288:	e3403001 	movt	r3, #1
    a28c:	e0838108 	add	r8, r3, r8, lsl #2
    a290:	e5963000 	ldr	r3, [r6]
    a294:	e3a01007 	mov	r1, #7
    a298:	e5982010 	ldr	r2, [r8, #16]
    a29c:	e1c33411 	bic	r3, r3, r1, lsl r4
    a2a0:	e1834412 	orr	r4, r3, r2, lsl r4
    a2a4:	e5864000 	str	r4, [r6]
    a2a8:	e5953000 	ldr	r3, [r5]
    a2ac:	e3530000 	cmp	r3, #0
    a2b0:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    a2b4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    a2b8:	ea000495 	b	b514 <LeaveCritical>
    a2bc:	e3540001 	cmp	r4, #1
    a2c0:	13a04000 	movne	r4, #0
    a2c4:	02074001 	andeq	r4, r7, #1
    a2c8:	e30c5770 	movw	r5, #51056	; 0xc770
    a2cc:	e3405001 	movt	r5, #1
    a2d0:	e3540000 	cmp	r4, #0
    a2d4:	1a00009f 	bne	a558 <CGPIOPin::SetMode(TGPIOMode, bool)+0x358>
    a2d8:	e5962004 	ldr	r2, [r6, #4]
    a2dc:	e3520035 	cmp	r2, #53	; 0x35
    a2e0:	8a0000c4 	bhi	a5f8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x3f8>
    a2e4:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    a2e8:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    a2ec:	e3a0100a 	mov	r1, #10
    a2f0:	e5950000 	ldr	r0, [r5]
    a2f4:	e0843293 	umull	r3, r4, r3, r2
    a2f8:	e3500000 	cmp	r0, #0
    a2fc:	e1a041a4 	lsr	r4, r4, #3
    a300:	e284853f 	add	r8, r4, #264241152	; 0xfc00000
    a304:	e2888702 	add	r8, r8, #524288	; 0x80000
    a308:	e0642491 	mls	r4, r1, r4, r2
    a30c:	e1a08108 	lsl	r8, r8, #2
    a310:	e0844084 	add	r4, r4, r4, lsl #1
    a314:	0a000000 	beq	a31c <CGPIOPin::SetMode(TGPIOMode, bool)+0x11c>
    a318:	eb000450 	bl	b460 <EnterCritical>
    a31c:	e5d62010 	ldrb	r2, [r6, #16]
    a320:	e3a01007 	mov	r1, #7
    a324:	e5983000 	ldr	r3, [r8]
    a328:	e2422001 	sub	r2, r2, #1
    a32c:	e16f2f12 	clz	r2, r2
    a330:	e1c33411 	bic	r3, r3, r1, lsl r4
    a334:	e1a022a2 	lsr	r2, r2, #5
    a338:	e1834412 	orr	r4, r3, r2, lsl r4
    a33c:	e5884000 	str	r4, [r8]
    a340:	e5953000 	ldr	r3, [r5]
    a344:	e3530000 	cmp	r3, #0
    a348:	1a0000a6 	bne	a5e8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x3e8>
    a34c:	e3570000 	cmp	r7, #0
    a350:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    a354:	e5d63010 	ldrb	r3, [r6, #16]
    a358:	e3530003 	cmp	r3, #3
    a35c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    a360:	ea000003 	b	a374 <CGPIOPin::SetMode(TGPIOMode, bool)+0x174>
    a364:	0000a4fc 	.word	0x0000a4fc
    a368:	0000a4dc 	.word	0x0000a4dc
    a36c:	0000a4b0 	.word	0x0000a4b0
    a370:	0000a450 	.word	0x0000a450
    a374:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a378:	e3091be0 	movw	r1, #39904	; 0x9be0
    a37c:	e3401001 	movt	r1, #1
    a380:	e3090c00 	movw	r0, #39936	; 0x9c00
    a384:	e3400001 	movt	r0, #1
    a388:	e3a0203d 	mov	r2, #61	; 0x3d
    a38c:	eb0015bd 	bl	fa88 <assertion_failed>
    a390:	eaffffa0 	b	a218 <CGPIOPin::SetMode(TGPIOMode, bool)+0x18>
    a394:	e5963008 	ldr	r3, [r6, #8]
    a398:	e3a04098 	mov	r4, #152	; 0x98
    a39c:	e3434f20 	movt	r4, #16160	; 0x3f20
    a3a0:	e5950000 	ldr	r0, [r5]
    a3a4:	e0834004 	add	r4, r3, r4
    a3a8:	e3500000 	cmp	r0, #0
    a3ac:	1a000099 	bne	a618 <CGPIOPin::SetMode(TGPIOMode, bool)+0x418>
    a3b0:	e3a08000 	mov	r8, #0
    a3b4:	e3438f20 	movt	r8, #16160	; 0x3f20
    a3b8:	e3a07000 	mov	r7, #0
    a3bc:	e3a00005 	mov	r0, #5
    a3c0:	e5887094 	str	r7, [r8, #148]	; 0x94
    a3c4:	eb000873 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
    a3c8:	e596300c 	ldr	r3, [r6, #12]
    a3cc:	e5843000 	str	r3, [r4]
    a3d0:	e3a00005 	mov	r0, #5
    a3d4:	eb00086f 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
    a3d8:	e5887094 	str	r7, [r8, #148]	; 0x94
    a3dc:	e5847000 	str	r7, [r4]
    a3e0:	e5953000 	ldr	r3, [r5]
    a3e4:	e1530007 	cmp	r3, r7
    a3e8:	0a000000 	beq	a3f0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1f0>
    a3ec:	eb000448 	bl	b514 <LeaveCritical>
    a3f0:	e5d64010 	ldrb	r4, [r6, #16]
    a3f4:	e5962004 	ldr	r2, [r6, #4]
    a3f8:	e2448004 	sub	r8, r4, #4
    a3fc:	e3520035 	cmp	r2, #53	; 0x35
    a400:	9affff90 	bls	a248 <CGPIOPin::SetMode(TGPIOMode, bool)+0x48>
    a404:	e3002132 	movw	r2, #306	; 0x132
    a408:	e3091be0 	movw	r1, #39904	; 0x9be0
    a40c:	e3401001 	movt	r1, #1
    a410:	e3090bec 	movw	r0, #39916	; 0x9bec
    a414:	e3400001 	movt	r0, #1
    a418:	eb00159a 	bl	fa88 <assertion_failed>
    a41c:	e5962004 	ldr	r2, [r6, #4]
    a420:	eaffff88 	b	a248 <CGPIOPin::SetMode(TGPIOMode, bool)+0x48>
    a424:	e3091be0 	movw	r1, #39904	; 0x9be0
    a428:	e3401001 	movt	r1, #1
    a42c:	e3090c18 	movw	r0, #39960	; 0x9c18
    a430:	e3400001 	movt	r0, #1
    a434:	e3002136 	movw	r2, #310	; 0x136
    a438:	eb001592 	bl	fa88 <assertion_failed>
    a43c:	e5950000 	ldr	r0, [r5]
    a440:	e3500000 	cmp	r0, #0
    a444:	0affff8e 	beq	a284 <CGPIOPin::SetMode(TGPIOMode, bool)+0x84>
    a448:	eb000404 	bl	b460 <EnterCritical>
    a44c:	eaffff8c 	b	a284 <CGPIOPin::SetMode(TGPIOMode, bool)+0x84>
    a450:	e5963008 	ldr	r3, [r6, #8]
    a454:	e3a04098 	mov	r4, #152	; 0x98
    a458:	e3434f20 	movt	r4, #16160	; 0x3f20
    a45c:	e5950000 	ldr	r0, [r5]
    a460:	e0834004 	add	r4, r3, r4
    a464:	e3500000 	cmp	r0, #0
    a468:	1a000072 	bne	a638 <CGPIOPin::SetMode(TGPIOMode, bool)+0x438>
    a46c:	e3a07000 	mov	r7, #0
    a470:	e3437f20 	movt	r7, #16160	; 0x3f20
    a474:	e3a03001 	mov	r3, #1
    a478:	e3a00005 	mov	r0, #5
    a47c:	e5873094 	str	r3, [r7, #148]	; 0x94
    a480:	eb000844 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
    a484:	e596300c 	ldr	r3, [r6, #12]
    a488:	e5843000 	str	r3, [r4]
    a48c:	e3a00005 	mov	r0, #5
    a490:	eb000840 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
    a494:	e3a03000 	mov	r3, #0
    a498:	e5873094 	str	r3, [r7, #148]	; 0x94
    a49c:	e5843000 	str	r3, [r4]
    a4a0:	e5953000 	ldr	r3, [r5]
    a4a4:	e3530000 	cmp	r3, #0
    a4a8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    a4ac:	eaffff80 	b	a2b4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xb4>
    a4b0:	e5963008 	ldr	r3, [r6, #8]
    a4b4:	e3a04098 	mov	r4, #152	; 0x98
    a4b8:	e3434f20 	movt	r4, #16160	; 0x3f20
    a4bc:	e5950000 	ldr	r0, [r5]
    a4c0:	e0834004 	add	r4, r3, r4
    a4c4:	e3500000 	cmp	r0, #0
    a4c8:	1a000058 	bne	a630 <CGPIOPin::SetMode(TGPIOMode, bool)+0x430>
    a4cc:	e3a07000 	mov	r7, #0
    a4d0:	e3437f20 	movt	r7, #16160	; 0x3f20
    a4d4:	e3a03002 	mov	r3, #2
    a4d8:	eaffffe6 	b	a478 <CGPIOPin::SetMode(TGPIOMode, bool)+0x278>
    a4dc:	e5962008 	ldr	r2, [r6, #8]
    a4e0:	e3a03028 	mov	r3, #40	; 0x28
    a4e4:	e3433f20 	movt	r3, #16160	; 0x3f20
    a4e8:	e596100c 	ldr	r1, [r6, #12]
    a4ec:	e3a00000 	mov	r0, #0
    a4f0:	e5860014 	str	r0, [r6, #20]
    a4f4:	e7821003 	str	r1, [r2, r3]
    a4f8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a4fc:	e5963008 	ldr	r3, [r6, #8]
    a500:	e3a04098 	mov	r4, #152	; 0x98
    a504:	e3434f20 	movt	r4, #16160	; 0x3f20
    a508:	e5950000 	ldr	r0, [r5]
    a50c:	e0834004 	add	r4, r3, r4
    a510:	e3500000 	cmp	r0, #0
    a514:	1a000043 	bne	a628 <CGPIOPin::SetMode(TGPIOMode, bool)+0x428>
    a518:	e3a08000 	mov	r8, #0
    a51c:	e3438f20 	movt	r8, #16160	; 0x3f20
    a520:	e3a07000 	mov	r7, #0
    a524:	e3a00005 	mov	r0, #5
    a528:	e5887094 	str	r7, [r8, #148]	; 0x94
    a52c:	eb000819 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
    a530:	e596300c 	ldr	r3, [r6, #12]
    a534:	e5843000 	str	r3, [r4]
    a538:	e3a00005 	mov	r0, #5
    a53c:	eb000815 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
    a540:	e5887094 	str	r7, [r8, #148]	; 0x94
    a544:	e5847000 	str	r7, [r4]
    a548:	e5953000 	ldr	r3, [r5]
    a54c:	e1530007 	cmp	r3, r7
    a550:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    a554:	eaffff56 	b	a2b4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xb4>
    a558:	e5963008 	ldr	r3, [r6, #8]
    a55c:	e3a04098 	mov	r4, #152	; 0x98
    a560:	e3434f20 	movt	r4, #16160	; 0x3f20
    a564:	e5950000 	ldr	r0, [r5]
    a568:	e0834004 	add	r4, r3, r4
    a56c:	e3500000 	cmp	r0, #0
    a570:	1a000032 	bne	a640 <CGPIOPin::SetMode(TGPIOMode, bool)+0x440>
    a574:	e3a09000 	mov	r9, #0
    a578:	e3439f20 	movt	r9, #16160	; 0x3f20
    a57c:	e3a08000 	mov	r8, #0
    a580:	e3a00005 	mov	r0, #5
    a584:	e5898094 	str	r8, [r9, #148]	; 0x94
    a588:	eb000802 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
    a58c:	e596300c 	ldr	r3, [r6, #12]
    a590:	e5843000 	str	r3, [r4]
    a594:	e3a00005 	mov	r0, #5
    a598:	eb0007fe 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
    a59c:	e5898094 	str	r8, [r9, #148]	; 0x94
    a5a0:	e5848000 	str	r8, [r4]
    a5a4:	e5953000 	ldr	r3, [r5]
    a5a8:	e1530008 	cmp	r3, r8
    a5ac:	1a00001b 	bne	a620 <CGPIOPin::SetMode(TGPIOMode, bool)+0x420>
    a5b0:	e5962004 	ldr	r2, [r6, #4]
    a5b4:	e3520035 	cmp	r2, #53	; 0x35
    a5b8:	8a00000e 	bhi	a5f8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x3f8>
    a5bc:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    a5c0:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    a5c4:	e3a0100a 	mov	r1, #10
    a5c8:	e0843293 	umull	r3, r4, r3, r2
    a5cc:	e1a041a4 	lsr	r4, r4, #3
    a5d0:	e284853f 	add	r8, r4, #264241152	; 0xfc00000
    a5d4:	e2888702 	add	r8, r8, #524288	; 0x80000
    a5d8:	e0642491 	mls	r4, r1, r4, r2
    a5dc:	e1a08108 	lsl	r8, r8, #2
    a5e0:	e0844084 	add	r4, r4, r4, lsl #1
    a5e4:	eaffff4c 	b	a31c <CGPIOPin::SetMode(TGPIOMode, bool)+0x11c>
    a5e8:	eb0003c9 	bl	b514 <LeaveCritical>
    a5ec:	e3570000 	cmp	r7, #0
    a5f0:	1affff57 	bne	a354 <CGPIOPin::SetMode(TGPIOMode, bool)+0x154>
    a5f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a5f8:	e3a02056 	mov	r2, #86	; 0x56
    a5fc:	e3091be0 	movw	r1, #39904	; 0x9be0
    a600:	e3401001 	movt	r1, #1
    a604:	e3090bec 	movw	r0, #39916	; 0x9bec
    a608:	e3400001 	movt	r0, #1
    a60c:	eb00151d 	bl	fa88 <assertion_failed>
    a610:	e5962004 	ldr	r2, [r6, #4]
    a614:	eaffff32 	b	a2e4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe4>
    a618:	eb000390 	bl	b460 <EnterCritical>
    a61c:	eaffff63 	b	a3b0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b0>
    a620:	eb0003bb 	bl	b514 <LeaveCritical>
    a624:	eaffff2b 	b	a2d8 <CGPIOPin::SetMode(TGPIOMode, bool)+0xd8>
    a628:	eb00038c 	bl	b460 <EnterCritical>
    a62c:	eaffffb9 	b	a518 <CGPIOPin::SetMode(TGPIOMode, bool)+0x318>
    a630:	eb00038a 	bl	b460 <EnterCritical>
    a634:	eaffffa4 	b	a4cc <CGPIOPin::SetMode(TGPIOMode, bool)+0x2cc>
    a638:	eb000388 	bl	b460 <EnterCritical>
    a63c:	eaffff8a 	b	a46c <CGPIOPin::SetMode(TGPIOMode, bool)+0x26c>
    a640:	eb000386 	bl	b460 <EnterCritical>
    a644:	eaffffca 	b	a574 <CGPIOPin::SetMode(TGPIOMode, bool)+0x374>

0000a648 <CGPIOPin::Write(unsigned int)>:
    a648:	e5d03010 	ldrb	r3, [r0, #16]
    a64c:	e92d4070 	push	{r4, r5, r6, lr}
    a650:	e1a04000 	mov	r4, r0
    a654:	e1a05001 	mov	r5, r1
    a658:	e3530003 	cmp	r3, #3
    a65c:	8a000016 	bhi	a6bc <CGPIOPin::Write(unsigned int)+0x74>
    a660:	e3550001 	cmp	r5, #1
    a664:	8a00000a 	bhi	a694 <CGPIOPin::Write(unsigned int)+0x4c>
    a668:	e3a02028 	mov	r2, #40	; 0x28
    a66c:	e3432f20 	movt	r2, #16160	; 0x3f20
    a670:	e3550000 	cmp	r5, #0
    a674:	e3a0301c 	mov	r3, #28
    a678:	e3433f20 	movt	r3, #16160	; 0x3f20
    a67c:	01a03002 	moveq	r3, r2
    a680:	e5845014 	str	r5, [r4, #20]
    a684:	e5942008 	ldr	r2, [r4, #8]
    a688:	e594100c 	ldr	r1, [r4, #12]
    a68c:	e7831002 	str	r1, [r3, r2]
    a690:	e8bd8070 	pop	{r4, r5, r6, pc}
    a694:	e3091be0 	movw	r1, #39904	; 0x9be0
    a698:	e3401001 	movt	r1, #1
    a69c:	e3090c4c 	movw	r0, #40012	; 0x9c4c
    a6a0:	e3400001 	movt	r0, #1
    a6a4:	e3a02084 	mov	r2, #132	; 0x84
    a6a8:	eb0014f6 	bl	fa88 <assertion_failed>
    a6ac:	e3a0301c 	mov	r3, #28
    a6b0:	e3433f20 	movt	r3, #16160	; 0x3f20
    a6b4:	e5845014 	str	r5, [r4, #20]
    a6b8:	eafffff1 	b	a684 <CGPIOPin::Write(unsigned int)+0x3c>
    a6bc:	e3091be0 	movw	r1, #39904	; 0x9be0
    a6c0:	e3401001 	movt	r1, #1
    a6c4:	e3090c28 	movw	r0, #39976	; 0x9c28
    a6c8:	e3400001 	movt	r0, #1
    a6cc:	e3a02080 	mov	r2, #128	; 0x80
    a6d0:	eb0014ec 	bl	fa88 <assertion_failed>
    a6d4:	eaffffe1 	b	a660 <CGPIOPin::Write(unsigned int)+0x18>

0000a6d8 <CGPIOPin::Read() const>:
    a6d8:	e5d03010 	ldrb	r3, [r0, #16]
    a6dc:	e92d4010 	push	{r4, lr}
    a6e0:	e1a04000 	mov	r4, r0
    a6e4:	e2432002 	sub	r2, r3, #2
    a6e8:	e3530000 	cmp	r3, #0
    a6ec:	13520001 	cmpne	r2, #1
    a6f0:	8a000008 	bhi	a718 <CGPIOPin::Read() const+0x40>
    a6f4:	e5941008 	ldr	r1, [r4, #8]
    a6f8:	e3a03034 	mov	r3, #52	; 0x34
    a6fc:	e3433f20 	movt	r3, #16160	; 0x3f20
    a700:	e594200c 	ldr	r2, [r4, #12]
    a704:	e7913003 	ldr	r3, [r1, r3]
    a708:	e1130002 	tst	r3, r2
    a70c:	13a00001 	movne	r0, #1
    a710:	03a00000 	moveq	r0, #0
    a714:	e8bd8010 	pop	{r4, pc}
    a718:	e3091be0 	movw	r1, #39904	; 0x9be0
    a71c:	e3401001 	movt	r1, #1
    a720:	e3090c6c 	movw	r0, #40044	; 0x9c6c
    a724:	e3400001 	movt	r0, #1
    a728:	e3a02092 	mov	r2, #146	; 0x92
    a72c:	eb0014d5 	bl	fa88 <assertion_failed>
    a730:	eaffffef 	b	a6f4 <CGPIOPin::Read() const+0x1c>

0000a734 <CGPIOPin::Invert()>:
    a734:	e5d03010 	ldrb	r3, [r0, #16]
    a738:	e92d4070 	push	{r4, r5, r6, lr}
    a73c:	e1a04000 	mov	r4, r0
    a740:	e3530001 	cmp	r3, #1
    a744:	0a000023 	beq	a7d8 <CGPIOPin::Invert()+0xa4>
    a748:	e3091be0 	movw	r1, #39904	; 0x9be0
    a74c:	e3401001 	movt	r1, #1
    a750:	e3090cc8 	movw	r0, #40136	; 0x9cc8
    a754:	e3400001 	movt	r0, #1
    a758:	e3a0209f 	mov	r2, #159	; 0x9f
    a75c:	eb0014c9 	bl	fa88 <assertion_failed>
    a760:	e5946014 	ldr	r6, [r4, #20]
    a764:	e5d43010 	ldrb	r3, [r4, #16]
    a768:	e2265001 	eor	r5, r6, #1
    a76c:	e3530003 	cmp	r3, #3
    a770:	9a000005 	bls	a78c <CGPIOPin::Invert()+0x58>
    a774:	e3091be0 	movw	r1, #39904	; 0x9be0
    a778:	e3401001 	movt	r1, #1
    a77c:	e3090c28 	movw	r0, #39976	; 0x9c28
    a780:	e3400001 	movt	r0, #1
    a784:	e3a02080 	mov	r2, #128	; 0x80
    a788:	eb0014be 	bl	fa88 <assertion_failed>
    a78c:	e3550001 	cmp	r5, #1
    a790:	9a000005 	bls	a7ac <CGPIOPin::Invert()+0x78>
    a794:	e3091be0 	movw	r1, #39904	; 0x9be0
    a798:	e3401001 	movt	r1, #1
    a79c:	e3090c4c 	movw	r0, #40012	; 0x9c4c
    a7a0:	e3400001 	movt	r0, #1
    a7a4:	e3a02084 	mov	r2, #132	; 0x84
    a7a8:	eb0014b6 	bl	fa88 <assertion_failed>
    a7ac:	e3a02028 	mov	r2, #40	; 0x28
    a7b0:	e3432f20 	movt	r2, #16160	; 0x3f20
    a7b4:	e5941008 	ldr	r1, [r4, #8]
    a7b8:	e3560001 	cmp	r6, #1
    a7bc:	e3a0301c 	mov	r3, #28
    a7c0:	e3433f20 	movt	r3, #16160	; 0x3f20
    a7c4:	01a03002 	moveq	r3, r2
    a7c8:	e594200c 	ldr	r2, [r4, #12]
    a7cc:	e5845014 	str	r5, [r4, #20]
    a7d0:	e7832001 	str	r2, [r3, r1]
    a7d4:	e8bd8070 	pop	{r4, r5, r6, pc}
    a7d8:	e5906014 	ldr	r6, [r0, #20]
    a7dc:	e2265001 	eor	r5, r6, #1
    a7e0:	eaffffe9 	b	a78c <CGPIOPin::Invert()+0x58>

0000a7e4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    a7e4:	e5d03010 	ldrb	r3, [r0, #16]
    a7e8:	e92d4070 	push	{r4, r5, r6, lr}
    a7ec:	e1a06002 	mov	r6, r2
    a7f0:	e2432002 	sub	r2, r3, #2
    a7f4:	e1a04000 	mov	r4, r0
    a7f8:	e1a05001 	mov	r5, r1
    a7fc:	e3530000 	cmp	r3, #0
    a800:	13520001 	cmpne	r2, #1
    a804:	8a000024 	bhi	a89c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb8>
    a808:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    a80c:	e3530006 	cmp	r3, #6
    a810:	0a000005 	beq	a82c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x48>
    a814:	e3091be0 	movw	r1, #39904	; 0x9be0
    a818:	e3401001 	movt	r1, #1
    a81c:	e3090ce4 	movw	r0, #40164	; 0x9ce4
    a820:	e3400001 	movt	r0, #1
    a824:	e3a020aa 	mov	r2, #170	; 0xaa
    a828:	eb001496 	bl	fa88 <assertion_failed>
    a82c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    a830:	e3530006 	cmp	r3, #6
    a834:	0a000005 	beq	a850 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x6c>
    a838:	e3091be0 	movw	r1, #39904	; 0x9be0
    a83c:	e3401001 	movt	r1, #1
    a840:	e3090d08 	movw	r0, #40200	; 0x9d08
    a844:	e3400001 	movt	r0, #1
    a848:	e3a020ab 	mov	r2, #171	; 0xab
    a84c:	eb00148d 	bl	fa88 <assertion_failed>
    a850:	e3550000 	cmp	r5, #0
    a854:	0a000021 	beq	a8e0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xfc>
    a858:	e594301c 	ldr	r3, [r4, #28]
    a85c:	e3530000 	cmp	r3, #0
    a860:	0a000005 	beq	a87c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x98>
    a864:	e3091be0 	movw	r1, #39904	; 0x9be0
    a868:	e3401001 	movt	r1, #1
    a86c:	e3090d30 	movw	r0, #40240	; 0x9d30
    a870:	e3400001 	movt	r0, #1
    a874:	e3a020ae 	mov	r2, #174	; 0xae
    a878:	eb001482 	bl	fa88 <assertion_failed>
    a87c:	e5940018 	ldr	r0, [r4, #24]
    a880:	e584501c 	str	r5, [r4, #28]
    a884:	e5846020 	str	r6, [r4, #32]
    a888:	e3500000 	cmp	r0, #0
    a88c:	0a000009 	beq	a8b8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd4>
    a890:	e1a01004 	mov	r1, r4
    a894:	e8bd4070 	pop	{r4, r5, r6, lr}
    a898:	ea00275c 	b	14610 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    a89c:	e3091be0 	movw	r1, #39904	; 0x9be0
    a8a0:	e3401001 	movt	r1, #1
    a8a4:	e3090c6c 	movw	r0, #40044	; 0x9c6c
    a8a8:	e3400001 	movt	r0, #1
    a8ac:	e3a020a8 	mov	r2, #168	; 0xa8
    a8b0:	eb001474 	bl	fa88 <assertion_failed>
    a8b4:	eaffffd3 	b	a808 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x24>
    a8b8:	e3091be0 	movw	r1, #39904	; 0x9be0
    a8bc:	e3401001 	movt	r1, #1
    a8c0:	e3090d40 	movw	r0, #40256	; 0x9d40
    a8c4:	e3400001 	movt	r0, #1
    a8c8:	e3a020b3 	mov	r2, #179	; 0xb3
    a8cc:	eb00146d 	bl	fa88 <assertion_failed>
    a8d0:	e5940018 	ldr	r0, [r4, #24]
    a8d4:	e1a01004 	mov	r1, r4
    a8d8:	e8bd4070 	pop	{r4, r5, r6, lr}
    a8dc:	ea00274b 	b	14610 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    a8e0:	e3091be0 	movw	r1, #39904	; 0x9be0
    a8e4:	e3401001 	movt	r1, #1
    a8e8:	e30b03cc 	movw	r0, #46028	; 0xb3cc
    a8ec:	e3400001 	movt	r0, #1
    a8f0:	e3a020ad 	mov	r2, #173	; 0xad
    a8f4:	eb001463 	bl	fa88 <assertion_failed>
    a8f8:	eaffffd6 	b	a858 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x74>

0000a8fc <CGPIOPin::DisconnectInterrupt()>:
    a8fc:	e5d03010 	ldrb	r3, [r0, #16]
    a900:	e92d4010 	push	{r4, lr}
    a904:	e1a04000 	mov	r4, r0
    a908:	e2432002 	sub	r2, r3, #2
    a90c:	e3530000 	cmp	r3, #0
    a910:	13520001 	cmpne	r2, #1
    a914:	8a00001c 	bhi	a98c <CGPIOPin::DisconnectInterrupt()+0x90>
    a918:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    a91c:	e3530006 	cmp	r3, #6
    a920:	0a000005 	beq	a93c <CGPIOPin::DisconnectInterrupt()+0x40>
    a924:	e3091be0 	movw	r1, #39904	; 0x9be0
    a928:	e3401001 	movt	r1, #1
    a92c:	e3090ce4 	movw	r0, #40164	; 0x9ce4
    a930:	e3400001 	movt	r0, #1
    a934:	e3a020bd 	mov	r2, #189	; 0xbd
    a938:	eb001452 	bl	fa88 <assertion_failed>
    a93c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    a940:	e3530006 	cmp	r3, #6
    a944:	0a000005 	beq	a960 <CGPIOPin::DisconnectInterrupt()+0x64>
    a948:	e3091be0 	movw	r1, #39904	; 0x9be0
    a94c:	e3401001 	movt	r1, #1
    a950:	e3090d08 	movw	r0, #40200	; 0x9d08
    a954:	e3400001 	movt	r0, #1
    a958:	e3a020be 	mov	r2, #190	; 0xbe
    a95c:	eb001449 	bl	fa88 <assertion_failed>
    a960:	e594301c 	ldr	r3, [r4, #28]
    a964:	e3530000 	cmp	r3, #0
    a968:	0a000018 	beq	a9d0 <CGPIOPin::DisconnectInterrupt()+0xd4>
    a96c:	e5940018 	ldr	r0, [r4, #24]
    a970:	e3a03000 	mov	r3, #0
    a974:	e584301c 	str	r3, [r4, #28]
    a978:	e1500003 	cmp	r0, r3
    a97c:	0a000009 	beq	a9a8 <CGPIOPin::DisconnectInterrupt()+0xac>
    a980:	e1a01004 	mov	r1, r4
    a984:	e8bd4010 	pop	{r4, lr}
    a988:	ea00274f 	b	146cc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    a98c:	e3091be0 	movw	r1, #39904	; 0x9be0
    a990:	e3401001 	movt	r1, #1
    a994:	e3090c6c 	movw	r0, #40044	; 0x9c6c
    a998:	e3400001 	movt	r0, #1
    a99c:	e3a020bb 	mov	r2, #187	; 0xbb
    a9a0:	eb001438 	bl	fa88 <assertion_failed>
    a9a4:	eaffffdb 	b	a918 <CGPIOPin::DisconnectInterrupt()+0x1c>
    a9a8:	e3091be0 	movw	r1, #39904	; 0x9be0
    a9ac:	e3401001 	movt	r1, #1
    a9b0:	e3090d40 	movw	r0, #40256	; 0x9d40
    a9b4:	e3400001 	movt	r0, #1
    a9b8:	e3a020c3 	mov	r2, #195	; 0xc3
    a9bc:	eb001431 	bl	fa88 <assertion_failed>
    a9c0:	e5940018 	ldr	r0, [r4, #24]
    a9c4:	e1a01004 	mov	r1, r4
    a9c8:	e8bd4010 	pop	{r4, lr}
    a9cc:	ea00273e 	b	146cc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    a9d0:	e3091be0 	movw	r1, #39904	; 0x9be0
    a9d4:	e3401001 	movt	r1, #1
    a9d8:	e3090d50 	movw	r0, #40272	; 0x9d50
    a9dc:	e3400001 	movt	r0, #1
    a9e0:	e3a020c0 	mov	r2, #192	; 0xc0
    a9e4:	eb001427 	bl	fa88 <assertion_failed>
    a9e8:	eaffffdf 	b	a96c <CGPIOPin::DisconnectInterrupt()+0x70>

0000a9ec <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    a9ec:	e5d03010 	ldrb	r3, [r0, #16]
    a9f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a9f4:	e1a04000 	mov	r4, r0
    a9f8:	e2432002 	sub	r2, r3, #2
    a9fc:	e1a08001 	mov	r8, r1
    aa00:	e3530000 	cmp	r3, #0
    aa04:	13520001 	cmpne	r2, #1
    aa08:	8a000037 	bhi	aaec <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x100>
    aa0c:	e594301c 	ldr	r3, [r4, #28]
    aa10:	e3530000 	cmp	r3, #0
    aa14:	0a00003d 	beq	ab10 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x124>
    aa18:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    aa1c:	e3530006 	cmp	r3, #6
    aa20:	0a000005 	beq	aa3c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x50>
    aa24:	e3091be0 	movw	r1, #39904	; 0x9be0
    aa28:	e3401001 	movt	r1, #1
    aa2c:	e3090ce4 	movw	r0, #40164	; 0x9ce4
    aa30:	e3400001 	movt	r0, #1
    aa34:	e3a020ce 	mov	r2, #206	; 0xce
    aa38:	eb001412 	bl	fa88 <assertion_failed>
    aa3c:	e3580005 	cmp	r8, #5
    aa40:	8a000019 	bhi	aaac <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc0>
    aa44:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    aa48:	e1530008 	cmp	r3, r8
    aa4c:	0a00001f 	beq	aad0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe4>
    aa50:	e30c6770 	movw	r6, #51056	; 0xc770
    aa54:	e3406001 	movt	r6, #1
    aa58:	e3a0700c 	mov	r7, #12
    aa5c:	e5943008 	ldr	r3, [r4, #8]
    aa60:	e3a0504c 	mov	r5, #76	; 0x4c
    aa64:	e3435f20 	movt	r5, #16160	; 0x3f20
    aa68:	e5960000 	ldr	r0, [r6]
    aa6c:	e0835005 	add	r5, r3, r5
    aa70:	e5c48024 	strb	r8, [r4, #36]	; 0x24
    aa74:	e0070897 	mul	r7, r7, r8
    aa78:	e3500000 	cmp	r0, #0
    aa7c:	1a000008 	bne	aaa4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb8>
    aa80:	e594200c 	ldr	r2, [r4, #12]
    aa84:	e7953007 	ldr	r3, [r5, r7]
    aa88:	e1833002 	orr	r3, r3, r2
    aa8c:	e7853007 	str	r3, [r5, r7]
    aa90:	e5963000 	ldr	r3, [r6]
    aa94:	e3530000 	cmp	r3, #0
    aa98:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    aa9c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    aaa0:	ea00029b 	b	b514 <LeaveCritical>
    aaa4:	eb00026d 	bl	b460 <EnterCritical>
    aaa8:	eafffff4 	b	aa80 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
    aaac:	e3091be0 	movw	r1, #39904	; 0x9be0
    aab0:	e3401001 	movt	r1, #1
    aab4:	e3090d60 	movw	r0, #40288	; 0x9d60
    aab8:	e3400001 	movt	r0, #1
    aabc:	e3a020cf 	mov	r2, #207	; 0xcf
    aac0:	eb0013f0 	bl	fa88 <assertion_failed>
    aac4:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    aac8:	e1530008 	cmp	r3, r8
    aacc:	1affffdf 	bne	aa50 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x64>
    aad0:	e3091be0 	movw	r1, #39904	; 0x9be0
    aad4:	e3401001 	movt	r1, #1
    aad8:	e3090d84 	movw	r0, #40324	; 0x9d84
    aadc:	e3400001 	movt	r0, #1
    aae0:	e3a020d0 	mov	r2, #208	; 0xd0
    aae4:	eb0013e7 	bl	fa88 <assertion_failed>
    aae8:	eaffffd8 	b	aa50 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x64>
    aaec:	e3091be0 	movw	r1, #39904	; 0x9be0
    aaf0:	e3401001 	movt	r1, #1
    aaf4:	e3090c6c 	movw	r0, #40044	; 0x9c6c
    aaf8:	e3400001 	movt	r0, #1
    aafc:	e3a020cb 	mov	r2, #203	; 0xcb
    ab00:	eb0013e0 	bl	fa88 <assertion_failed>
    ab04:	e594301c 	ldr	r3, [r4, #28]
    ab08:	e3530000 	cmp	r3, #0
    ab0c:	1affffc1 	bne	aa18 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x2c>
    ab10:	e3091be0 	movw	r1, #39904	; 0x9be0
    ab14:	e3401001 	movt	r1, #1
    ab18:	e3090d50 	movw	r0, #40272	; 0x9d50
    ab1c:	e3400001 	movt	r0, #1
    ab20:	e3a020cc 	mov	r2, #204	; 0xcc
    ab24:	eb0013d7 	bl	fa88 <assertion_failed>
    ab28:	eaffffba 	b	aa18 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x2c>

0000ab2c <CGPIOPin::DisableInterrupt()>:
    ab2c:	e5d03010 	ldrb	r3, [r0, #16]
    ab30:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ab34:	e1a04000 	mov	r4, r0
    ab38:	e2432002 	sub	r2, r3, #2
    ab3c:	e3530000 	cmp	r3, #0
    ab40:	13520001 	cmpne	r2, #1
    ab44:	8a000022 	bhi	abd4 <CGPIOPin::DisableInterrupt()+0xa8>
    ab48:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    ab4c:	e3530005 	cmp	r3, #5
    ab50:	8a000017 	bhi	abb4 <CGPIOPin::DisableInterrupt()+0x88>
    ab54:	e30c6770 	movw	r6, #51056	; 0xc770
    ab58:	e3406001 	movt	r6, #1
    ab5c:	e3a0700c 	mov	r7, #12
    ab60:	e5942008 	ldr	r2, [r4, #8]
    ab64:	e3a0504c 	mov	r5, #76	; 0x4c
    ab68:	e3435f20 	movt	r5, #16160	; 0x3f20
    ab6c:	e5960000 	ldr	r0, [r6]
    ab70:	e0825005 	add	r5, r2, r5
    ab74:	e0070397 	mul	r7, r7, r3
    ab78:	e3500000 	cmp	r0, #0
    ab7c:	1a00000a 	bne	abac <CGPIOPin::DisableInterrupt()+0x80>
    ab80:	e7953007 	ldr	r3, [r5, r7]
    ab84:	e594200c 	ldr	r2, [r4, #12]
    ab88:	e1c33002 	bic	r3, r3, r2
    ab8c:	e7853007 	str	r3, [r5, r7]
    ab90:	e5963000 	ldr	r3, [r6]
    ab94:	e3530000 	cmp	r3, #0
    ab98:	0a000000 	beq	aba0 <CGPIOPin::DisableInterrupt()+0x74>
    ab9c:	eb00025c 	bl	b514 <LeaveCritical>
    aba0:	e3a03006 	mov	r3, #6
    aba4:	e5c43024 	strb	r3, [r4, #36]	; 0x24
    aba8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    abac:	eb00022b 	bl	b460 <EnterCritical>
    abb0:	eafffff2 	b	ab80 <CGPIOPin::DisableInterrupt()+0x54>
    abb4:	e3091be0 	movw	r1, #39904	; 0x9be0
    abb8:	e3401001 	movt	r1, #1
    abbc:	e3090da0 	movw	r0, #40352	; 0x9da0
    abc0:	e3400001 	movt	r0, #1
    abc4:	e3a020e3 	mov	r2, #227	; 0xe3
    abc8:	eb0013ae 	bl	fa88 <assertion_failed>
    abcc:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    abd0:	eaffffdf 	b	ab54 <CGPIOPin::DisableInterrupt()+0x28>
    abd4:	e3091be0 	movw	r1, #39904	; 0x9be0
    abd8:	e3401001 	movt	r1, #1
    abdc:	e3090c6c 	movw	r0, #40044	; 0x9c6c
    abe0:	e3400001 	movt	r0, #1
    abe4:	e3a020e1 	mov	r2, #225	; 0xe1
    abe8:	eb0013a6 	bl	fa88 <assertion_failed>
    abec:	eaffffd5 	b	ab48 <CGPIOPin::DisableInterrupt()+0x1c>

0000abf0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    abf0:	e5d03010 	ldrb	r3, [r0, #16]
    abf4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    abf8:	e1a04000 	mov	r4, r0
    abfc:	e2432002 	sub	r2, r3, #2
    ac00:	e1a08001 	mov	r8, r1
    ac04:	e3530000 	cmp	r3, #0
    ac08:	13520001 	cmpne	r2, #1
    ac0c:	8a000037 	bhi	acf0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x100>
    ac10:	e594301c 	ldr	r3, [r4, #28]
    ac14:	e3530000 	cmp	r3, #0
    ac18:	0a00003d 	beq	ad14 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x124>
    ac1c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    ac20:	e3530006 	cmp	r3, #6
    ac24:	0a000005 	beq	ac40 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x50>
    ac28:	e3091be0 	movw	r1, #39904	; 0x9be0
    ac2c:	e3401001 	movt	r1, #1
    ac30:	e3090d08 	movw	r0, #40200	; 0x9d08
    ac34:	e3400001 	movt	r0, #1
    ac38:	e3a020f7 	mov	r2, #247	; 0xf7
    ac3c:	eb001391 	bl	fa88 <assertion_failed>
    ac40:	e3580005 	cmp	r8, #5
    ac44:	8a000019 	bhi	acb0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc0>
    ac48:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    ac4c:	e1530008 	cmp	r3, r8
    ac50:	0a00001f 	beq	acd4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe4>
    ac54:	e30c6770 	movw	r6, #51056	; 0xc770
    ac58:	e3406001 	movt	r6, #1
    ac5c:	e3a0700c 	mov	r7, #12
    ac60:	e5943008 	ldr	r3, [r4, #8]
    ac64:	e3a0504c 	mov	r5, #76	; 0x4c
    ac68:	e3435f20 	movt	r5, #16160	; 0x3f20
    ac6c:	e5960000 	ldr	r0, [r6]
    ac70:	e0835005 	add	r5, r3, r5
    ac74:	e5c48025 	strb	r8, [r4, #37]	; 0x25
    ac78:	e0070897 	mul	r7, r7, r8
    ac7c:	e3500000 	cmp	r0, #0
    ac80:	1a000008 	bne	aca8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb8>
    ac84:	e594200c 	ldr	r2, [r4, #12]
    ac88:	e7953007 	ldr	r3, [r5, r7]
    ac8c:	e1833002 	orr	r3, r3, r2
    ac90:	e7853007 	str	r3, [r5, r7]
    ac94:	e5963000 	ldr	r3, [r6]
    ac98:	e3530000 	cmp	r3, #0
    ac9c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    aca0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    aca4:	ea00021a 	b	b514 <LeaveCritical>
    aca8:	eb0001ec 	bl	b460 <EnterCritical>
    acac:	eafffff4 	b	ac84 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
    acb0:	e3091be0 	movw	r1, #39904	; 0x9be0
    acb4:	e3401001 	movt	r1, #1
    acb8:	e3090d60 	movw	r0, #40288	; 0x9d60
    acbc:	e3400001 	movt	r0, #1
    acc0:	e3a020f8 	mov	r2, #248	; 0xf8
    acc4:	eb00136f 	bl	fa88 <assertion_failed>
    acc8:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    accc:	e1530008 	cmp	r3, r8
    acd0:	1affffdf 	bne	ac54 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x64>
    acd4:	e3091be0 	movw	r1, #39904	; 0x9be0
    acd8:	e3401001 	movt	r1, #1
    acdc:	e3090dc4 	movw	r0, #40388	; 0x9dc4
    ace0:	e3400001 	movt	r0, #1
    ace4:	e3a020f9 	mov	r2, #249	; 0xf9
    ace8:	eb001366 	bl	fa88 <assertion_failed>
    acec:	eaffffd8 	b	ac54 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x64>
    acf0:	e3091be0 	movw	r1, #39904	; 0x9be0
    acf4:	e3401001 	movt	r1, #1
    acf8:	e3090c6c 	movw	r0, #40044	; 0x9c6c
    acfc:	e3400001 	movt	r0, #1
    ad00:	e3a020f4 	mov	r2, #244	; 0xf4
    ad04:	eb00135f 	bl	fa88 <assertion_failed>
    ad08:	e594301c 	ldr	r3, [r4, #28]
    ad0c:	e3530000 	cmp	r3, #0
    ad10:	1affffc1 	bne	ac1c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x2c>
    ad14:	e3091be0 	movw	r1, #39904	; 0x9be0
    ad18:	e3401001 	movt	r1, #1
    ad1c:	e3090d50 	movw	r0, #40272	; 0x9d50
    ad20:	e3400001 	movt	r0, #1
    ad24:	e3a020f5 	mov	r2, #245	; 0xf5
    ad28:	eb001356 	bl	fa88 <assertion_failed>
    ad2c:	eaffffba 	b	ac1c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x2c>

0000ad30 <CGPIOPin::DisableInterrupt2()>:
    ad30:	e5d03010 	ldrb	r3, [r0, #16]
    ad34:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ad38:	e1a04000 	mov	r4, r0
    ad3c:	e2432002 	sub	r2, r3, #2
    ad40:	e3530000 	cmp	r3, #0
    ad44:	13520001 	cmpne	r2, #1
    ad48:	8a000022 	bhi	add8 <CGPIOPin::DisableInterrupt2()+0xa8>
    ad4c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    ad50:	e3530005 	cmp	r3, #5
    ad54:	8a000017 	bhi	adb8 <CGPIOPin::DisableInterrupt2()+0x88>
    ad58:	e30c6770 	movw	r6, #51056	; 0xc770
    ad5c:	e3406001 	movt	r6, #1
    ad60:	e3a0700c 	mov	r7, #12
    ad64:	e5942008 	ldr	r2, [r4, #8]
    ad68:	e3a0504c 	mov	r5, #76	; 0x4c
    ad6c:	e3435f20 	movt	r5, #16160	; 0x3f20
    ad70:	e5960000 	ldr	r0, [r6]
    ad74:	e0825005 	add	r5, r2, r5
    ad78:	e0070397 	mul	r7, r7, r3
    ad7c:	e3500000 	cmp	r0, #0
    ad80:	1a00000a 	bne	adb0 <CGPIOPin::DisableInterrupt2()+0x80>
    ad84:	e7953007 	ldr	r3, [r5, r7]
    ad88:	e594200c 	ldr	r2, [r4, #12]
    ad8c:	e1c33002 	bic	r3, r3, r2
    ad90:	e7853007 	str	r3, [r5, r7]
    ad94:	e5963000 	ldr	r3, [r6]
    ad98:	e3530000 	cmp	r3, #0
    ad9c:	0a000000 	beq	ada4 <CGPIOPin::DisableInterrupt2()+0x74>
    ada0:	eb0001db 	bl	b514 <LeaveCritical>
    ada4:	e3a03006 	mov	r3, #6
    ada8:	e5c43025 	strb	r3, [r4, #37]	; 0x25
    adac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    adb0:	eb0001aa 	bl	b460 <EnterCritical>
    adb4:	eafffff2 	b	ad84 <CGPIOPin::DisableInterrupt2()+0x54>
    adb8:	e3091be0 	movw	r1, #39904	; 0x9be0
    adbc:	e3401001 	movt	r1, #1
    adc0:	e3090de0 	movw	r0, #40416	; 0x9de0
    adc4:	e3400001 	movt	r0, #1
    adc8:	e3a02f43 	mov	r2, #268	; 0x10c
    adcc:	eb00132d 	bl	fa88 <assertion_failed>
    add0:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    add4:	eaffffdf 	b	ad58 <CGPIOPin::DisableInterrupt2()+0x28>
    add8:	e3091be0 	movw	r1, #39904	; 0x9be0
    addc:	e3401001 	movt	r1, #1
    ade0:	e3090c6c 	movw	r0, #40044	; 0x9c6c
    ade4:	e3400001 	movt	r0, #1
    ade8:	e300210a 	movw	r2, #266	; 0x10a
    adec:	eb001325 	bl	fa88 <assertion_failed>
    adf0:	eaffffd5 	b	ad4c <CGPIOPin::DisableInterrupt2()+0x1c>

0000adf4 <CGPIOPin::ReadAll()>:
    adf4:	e3a03000 	mov	r3, #0
    adf8:	e3433f20 	movt	r3, #16160	; 0x3f20
    adfc:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    ae00:	e12fff1e 	bx	lr

0000ae04 <CGPIOPin::SetPullUpMode(unsigned int)>:
    ae04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ae08:	e30c5770 	movw	r5, #51056	; 0xc770
    ae0c:	e3405001 	movt	r5, #1
    ae10:	e5903008 	ldr	r3, [r0, #8]
    ae14:	e1a07000 	mov	r7, r0
    ae18:	e3a04098 	mov	r4, #152	; 0x98
    ae1c:	e3434f20 	movt	r4, #16160	; 0x3f20
    ae20:	e5950000 	ldr	r0, [r5]
    ae24:	e1a08001 	mov	r8, r1
    ae28:	e0834004 	add	r4, r3, r4
    ae2c:	e3500000 	cmp	r0, #0
    ae30:	1a000019 	bne	ae9c <CGPIOPin::SetPullUpMode(unsigned int)+0x98>
    ae34:	e3580002 	cmp	r8, #2
    ae38:	8a000010 	bhi	ae80 <CGPIOPin::SetPullUpMode(unsigned int)+0x7c>
    ae3c:	e3a06000 	mov	r6, #0
    ae40:	e3436f20 	movt	r6, #16160	; 0x3f20
    ae44:	e3a00005 	mov	r0, #5
    ae48:	e5868094 	str	r8, [r6, #148]	; 0x94
    ae4c:	eb0005d1 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
    ae50:	e597300c 	ldr	r3, [r7, #12]
    ae54:	e5843000 	str	r3, [r4]
    ae58:	e3a00005 	mov	r0, #5
    ae5c:	eb0005cd 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
    ae60:	e3a03000 	mov	r3, #0
    ae64:	e5863094 	str	r3, [r6, #148]	; 0x94
    ae68:	e5843000 	str	r3, [r4]
    ae6c:	e5953000 	ldr	r3, [r5]
    ae70:	e3530000 	cmp	r3, #0
    ae74:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    ae78:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    ae7c:	ea0001a4 	b	b514 <LeaveCritical>
    ae80:	e3091be0 	movw	r1, #39904	; 0x9be0
    ae84:	e3401001 	movt	r1, #1
    ae88:	e3090e04 	movw	r0, #40452	; 0x9e04
    ae8c:	e3400001 	movt	r0, #1
    ae90:	e3002125 	movw	r2, #293	; 0x125
    ae94:	eb0012fb 	bl	fa88 <assertion_failed>
    ae98:	eaffffe7 	b	ae3c <CGPIOPin::SetPullUpMode(unsigned int)+0x38>
    ae9c:	eb00016f 	bl	b460 <EnterCritical>
    aea0:	eaffffe3 	b	ae34 <CGPIOPin::SetPullUpMode(unsigned int)+0x30>

0000aea4 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    aea4:	e5902004 	ldr	r2, [r0, #4]
    aea8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    aeac:	e1a07001 	mov	r7, r1
    aeb0:	e3520035 	cmp	r2, #53	; 0x35
    aeb4:	8a000027 	bhi	af58 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb4>
    aeb8:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    aebc:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    aec0:	e3a0100a 	mov	r1, #10
    aec4:	e3570005 	cmp	r7, #5
    aec8:	e0843293 	umull	r3, r4, r3, r2
    aecc:	e1a041a4 	lsr	r4, r4, #3
    aed0:	e284553f 	add	r5, r4, #264241152	; 0xfc00000
    aed4:	e2855702 	add	r5, r5, #524288	; 0x80000
    aed8:	e0642491 	mls	r4, r1, r4, r2
    aedc:	e1a05105 	lsl	r5, r5, #2
    aee0:	e0844084 	add	r4, r4, r4, lsl #1
    aee4:	8a000014 	bhi	af3c <CGPIOPin::SetAlternateFunction(unsigned int)+0x98>
    aee8:	e30c6770 	movw	r6, #51056	; 0xc770
    aeec:	e3406001 	movt	r6, #1
    aef0:	e5960000 	ldr	r0, [r6]
    aef4:	e3500000 	cmp	r0, #0
    aef8:	1a00000d 	bne	af34 <CGPIOPin::SetAlternateFunction(unsigned int)+0x90>
    aefc:	e3091bb8 	movw	r1, #39864	; 0x9bb8
    af00:	e3401001 	movt	r1, #1
    af04:	e0811107 	add	r1, r1, r7, lsl #2
    af08:	e5953000 	ldr	r3, [r5]
    af0c:	e3a00007 	mov	r0, #7
    af10:	e5912010 	ldr	r2, [r1, #16]
    af14:	e1c33410 	bic	r3, r3, r0, lsl r4
    af18:	e1834412 	orr	r4, r3, r2, lsl r4
    af1c:	e5854000 	str	r4, [r5]
    af20:	e5963000 	ldr	r3, [r6]
    af24:	e3530000 	cmp	r3, #0
    af28:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    af2c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    af30:	ea000177 	b	b514 <LeaveCritical>
    af34:	eb000149 	bl	b460 <EnterCritical>
    af38:	eaffffef 	b	aefc <CGPIOPin::SetAlternateFunction(unsigned int)+0x58>
    af3c:	e3091be0 	movw	r1, #39904	; 0x9be0
    af40:	e3401001 	movt	r1, #1
    af44:	e3090c18 	movw	r0, #39960	; 0x9c18
    af48:	e3400001 	movt	r0, #1
    af4c:	e3002136 	movw	r2, #310	; 0x136
    af50:	eb0012cc 	bl	fa88 <assertion_failed>
    af54:	eaffffe3 	b	aee8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x44>
    af58:	e1a04000 	mov	r4, r0
    af5c:	e3002132 	movw	r2, #306	; 0x132
    af60:	e3091be0 	movw	r1, #39904	; 0x9be0
    af64:	e3401001 	movt	r1, #1
    af68:	e3090bec 	movw	r0, #39916	; 0x9bec
    af6c:	e3400001 	movt	r0, #1
    af70:	eb0012c4 	bl	fa88 <assertion_failed>
    af74:	e5942004 	ldr	r2, [r4, #4]
    af78:	eaffffce 	b	aeb8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>

0000af7c <CGPIOPin::InterruptHandler()>:
    af7c:	e5d03010 	ldrb	r3, [r0, #16]
    af80:	e92d4010 	push	{r4, lr}
    af84:	e1a04000 	mov	r4, r0
    af88:	e2432002 	sub	r2, r3, #2
    af8c:	e3530000 	cmp	r3, #0
    af90:	13520001 	cmpne	r2, #1
    af94:	8a00000b 	bhi	afc8 <CGPIOPin::InterruptHandler()+0x4c>
    af98:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    af9c:	e3530005 	cmp	r3, #5
    afa0:	9a000002 	bls	afb0 <CGPIOPin::InterruptHandler()+0x34>
    afa4:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    afa8:	e3530005 	cmp	r3, #5
    afac:	8a00000c 	bhi	afe4 <CGPIOPin::InterruptHandler()+0x68>
    afb0:	e594301c 	ldr	r3, [r4, #28]
    afb4:	e3530000 	cmp	r3, #0
    afb8:	0a000012 	beq	b008 <CGPIOPin::InterruptHandler()+0x8c>
    afbc:	e5940020 	ldr	r0, [r4, #32]
    afc0:	e8bd4010 	pop	{r4, lr}
    afc4:	e12fff13 	bx	r3
    afc8:	e3091be0 	movw	r1, #39904	; 0x9be0
    afcc:	e3401001 	movt	r1, #1
    afd0:	e3090c6c 	movw	r0, #40044	; 0x9c6c
    afd4:	e3400001 	movt	r0, #1
    afd8:	e3002145 	movw	r2, #325	; 0x145
    afdc:	eb0012a9 	bl	fa88 <assertion_failed>
    afe0:	eaffffec 	b	af98 <CGPIOPin::InterruptHandler()+0x1c>
    afe4:	e3091be0 	movw	r1, #39904	; 0x9be0
    afe8:	e3401001 	movt	r1, #1
    afec:	e3090e10 	movw	r0, #40464	; 0x9e10
    aff0:	e3400001 	movt	r0, #1
    aff4:	e3002147 	movw	r2, #327	; 0x147
    aff8:	eb0012a2 	bl	fa88 <assertion_failed>
    affc:	e594301c 	ldr	r3, [r4, #28]
    b000:	e3530000 	cmp	r3, #0
    b004:	1affffec 	bne	afbc <CGPIOPin::InterruptHandler()+0x40>
    b008:	e3091be0 	movw	r1, #39904	; 0x9be0
    b00c:	e3401001 	movt	r1, #1
    b010:	e3090d50 	movw	r0, #40272	; 0x9d50
    b014:	e3400001 	movt	r0, #1
    b018:	e3002149 	movw	r2, #329	; 0x149
    b01c:	eb001299 	bl	fa88 <assertion_failed>
    b020:	e594301c 	ldr	r3, [r4, #28]
    b024:	e5940020 	ldr	r0, [r4, #32]
    b028:	e8bd4010 	pop	{r4, lr}
    b02c:	e12fff13 	bx	r3

0000b030 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    b030:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b034:	e3500035 	cmp	r0, #53	; 0x35
    b038:	e1a07000 	mov	r7, r0
    b03c:	8a000022 	bhi	b0cc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x9c>
    b040:	e30c6770 	movw	r6, #51056	; 0xc770
    b044:	e3406001 	movt	r6, #1
    b048:	e3a04013 	mov	r4, #19
    b04c:	e3404fc8 	movt	r4, #4040	; 0xfc8
    b050:	e207501f 	and	r5, r7, #31
    b054:	e3a02001 	mov	r2, #1
    b058:	e5960000 	ldr	r0, [r6]
    b05c:	e08442a7 	add	r4, r4, r7, lsr #5
    b060:	e1a04104 	lsl	r4, r4, #2
    b064:	e1a05512 	lsl	r5, r2, r5
    b068:	e3500000 	cmp	r0, #0
    b06c:	1a000010 	bne	b0b4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
    b070:	e3a0308b 	mov	r3, #139	; 0x8b
    b074:	e3433f20 	movt	r3, #16160	; 0x3f20
    b078:	e1540003 	cmp	r4, r3
    b07c:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
    b080:	e3a0108b 	mov	r1, #139	; 0x8b
    b084:	e3431f20 	movt	r1, #16160	; 0x3f20
    b088:	e1e02005 	mvn	r2, r5
    b08c:	e5943000 	ldr	r3, [r4]
    b090:	e0033002 	and	r3, r3, r2
    b094:	e484300c 	str	r3, [r4], #12
    b098:	e1540001 	cmp	r4, r1
    b09c:	9afffffa 	bls	b08c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x5c>
    b0a0:	e5963000 	ldr	r3, [r6]
    b0a4:	e3530000 	cmp	r3, #0
    b0a8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    b0ac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    b0b0:	ea000117 	b	b514 <LeaveCritical>
    b0b4:	eb0000e9 	bl	b460 <EnterCritical>
    b0b8:	e3a0308b 	mov	r3, #139	; 0x8b
    b0bc:	e3433f20 	movt	r3, #16160	; 0x3f20
    b0c0:	e1540003 	cmp	r4, r3
    b0c4:	9affffed 	bls	b080 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>
    b0c8:	eafffff4 	b	b0a0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
    b0cc:	e3091be0 	movw	r1, #39904	; 0x9be0
    b0d0:	e3401001 	movt	r1, #1
    b0d4:	e3090e5c 	movw	r0, #40540	; 0x9e5c
    b0d8:	e3400001 	movt	r0, #1
    b0dc:	e300214f 	movw	r2, #335	; 0x14f
    b0e0:	eb001268 	bl	fa88 <assertion_failed>
    b0e4:	eaffffd5 	b	b040 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>

0000b0e8 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    b0e8:	e30c3770 	movw	r3, #51056	; 0xc770
    b0ec:	e3403001 	movt	r3, #1
    b0f0:	e3a02001 	mov	r2, #1
    b0f4:	e5832000 	str	r2, [r3]
    b0f8:	e12fff1e 	bx	lr
    b0fc:	00000000 	andeq	r0, r0, r0

0000b100 <CMemorySystem::~CMemorySystem()>:
    b100:	e30c3774 	movw	r3, #51060	; 0xc774
    b104:	e3403001 	movt	r3, #1
    b108:	e92d4070 	push	{r4, r5, r6, lr}
    b10c:	e1a04000 	mov	r4, r0
    b110:	e5932000 	ldr	r2, [r3]
    b114:	e1520000 	cmp	r2, r0
    b118:	0a000001 	beq	b124 <CMemorySystem::~CMemorySystem()+0x24>
    b11c:	e1a00004 	mov	r0, r4
    b120:	e8bd8070 	pop	{r4, r5, r6, pc}
    b124:	e5d01000 	ldrb	r1, [r0]
    b128:	e3a02000 	mov	r2, #0
    b12c:	e5832000 	str	r2, [r3]
    b130:	e1510002 	cmp	r1, r2
    b134:	0a000004 	beq	b14c <CMemorySystem::~CMemorySystem()+0x4c>
    b138:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    b13c:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
    b140:	e3c33005 	bic	r3, r3, #5
    b144:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    b148:	ee082f17 	mcr	15, 0, r2, cr8, cr7, {0}
    b14c:	e594500c 	ldr	r5, [r4, #12]
    b150:	e3550000 	cmp	r5, #0
    b154:	0a000004 	beq	b16c <CMemorySystem::~CMemorySystem()+0x6c>
    b158:	e1a00005 	mov	r0, r5
    b15c:	eb000977 	bl	d740 <CPageTable::~CPageTable()>
    b160:	e1a00005 	mov	r0, r5
    b164:	e3a01008 	mov	r1, #8
    b168:	eb003580 	bl	18770 <operator delete(void*, unsigned int)>
    b16c:	e5945008 	ldr	r5, [r4, #8]
    b170:	e3a03000 	mov	r3, #0
    b174:	e584300c 	str	r3, [r4, #12]
    b178:	e1550003 	cmp	r5, r3
    b17c:	0affffe6 	beq	b11c <CMemorySystem::~CMemorySystem()+0x1c>
    b180:	e1a00005 	mov	r0, r5
    b184:	eb00096d 	bl	d740 <CPageTable::~CPageTable()>
    b188:	e1a00005 	mov	r0, r5
    b18c:	e3a01008 	mov	r1, #8
    b190:	eb003576 	bl	18770 <operator delete(void*, unsigned int)>
    b194:	e1a00004 	mov	r0, r4
    b198:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b19c <CMemorySystem::GetMemSize() const>:
    b19c:	e92d4010 	push	{r4, lr}
    b1a0:	e30c4774 	movw	r4, #51060	; 0xc774
    b1a4:	e3404001 	movt	r4, #1
    b1a8:	e5943000 	ldr	r3, [r4]
    b1ac:	e3530000 	cmp	r3, #0
    b1b0:	0a000001 	beq	b1bc <CMemorySystem::GetMemSize() const+0x20>
    b1b4:	e5930004 	ldr	r0, [r3, #4]
    b1b8:	e8bd8010 	pop	{r4, pc}
    b1bc:	e3a0208b 	mov	r2, #139	; 0x8b
    b1c0:	e3091e70 	movw	r1, #40560	; 0x9e70
    b1c4:	e3401001 	movt	r1, #1
    b1c8:	e3090a84 	movw	r0, #39556	; 0x9a84
    b1cc:	e3400001 	movt	r0, #1
    b1d0:	eb00122c 	bl	fa88 <assertion_failed>
    b1d4:	e5943000 	ldr	r3, [r4]
    b1d8:	e5930004 	ldr	r0, [r3, #4]
    b1dc:	e8bd8010 	pop	{r4, pc}

0000b1e0 <CMemorySystem::Get()>:
    b1e0:	e92d4010 	push	{r4, lr}
    b1e4:	e30c4774 	movw	r4, #51060	; 0xc774
    b1e8:	e3404001 	movt	r4, #1
    b1ec:	e5940000 	ldr	r0, [r4]
    b1f0:	e3500000 	cmp	r0, #0
    b1f4:	18bd8010 	popne	{r4, pc}
    b1f8:	e3a020d0 	mov	r2, #208	; 0xd0
    b1fc:	e3091e70 	movw	r1, #40560	; 0x9e70
    b200:	e3401001 	movt	r1, #1
    b204:	e3090a84 	movw	r0, #39556	; 0x9a84
    b208:	e3400001 	movt	r0, #1
    b20c:	eb00121d 	bl	fa88 <assertion_failed>
    b210:	e5940000 	ldr	r0, [r4]
    b214:	e8bd8010 	pop	{r4, pc}

0000b218 <CMemorySystem::EnableMMU()>:
    b218:	e5d03000 	ldrb	r3, [r0]
    b21c:	e92d4010 	push	{r4, lr}
    b220:	e1a04000 	mov	r4, r0
    b224:	e3530000 	cmp	r3, #0
    b228:	0a00001f 	beq	b2ac <CMemorySystem::EnableMMU()+0x94>
    b22c:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    b230:	e3833040 	orr	r3, r3, #64	; 0x40
    b234:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    b238:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    b23c:	e3130001 	tst	r3, #1
    b240:	1a000020 	bne	b2c8 <CMemorySystem::EnableMMU()+0xb0>
    b244:	e3a03002 	mov	r3, #2
    b248:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    b24c:	e5940008 	ldr	r0, [r4, #8]
    b250:	e3500000 	cmp	r0, #0
    b254:	0a00002a 	beq	b304 <CMemorySystem::EnableMMU()+0xec>
    b258:	eb000941 	bl	d764 <CPageTable::GetBaseAddress() const>
    b25c:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    b260:	e594000c 	ldr	r0, [r4, #12]
    b264:	e3500000 	cmp	r0, #0
    b268:	0a00001d 	beq	b2e4 <CMemorySystem::EnableMMU()+0xcc>
    b26c:	eb00093c 	bl	d764 <CPageTable::GetBaseAddress() const>
    b270:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
    b274:	e3a03005 	mov	r3, #5
    b278:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    b27c:	eb002ae2 	bl	15e0c <InvalidateDataCache>
    b280:	e3a03000 	mov	r3, #0
    b284:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    b288:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    b28c:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    b290:	f57ff04f 	dsb	sy
    b294:	f57ff06f 	isb	sy
    b298:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    b29c:	e3833b06 	orr	r3, r3, #6144	; 0x1800
    b2a0:	e3833005 	orr	r3, r3, #5
    b2a4:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    b2a8:	e8bd8010 	pop	{r4, pc}
    b2ac:	e3091e70 	movw	r1, #40560	; 0x9e70
    b2b0:	e3401001 	movt	r1, #1
    b2b4:	e3090e7c 	movw	r0, #40572	; 0x9e7c
    b2b8:	e3400001 	movt	r0, #1
    b2bc:	e3a020d6 	mov	r2, #214	; 0xd6
    b2c0:	eb0011f0 	bl	fa88 <assertion_failed>
    b2c4:	eaffffd8 	b	b22c <CMemorySystem::EnableMMU()+0x14>
    b2c8:	e3091e70 	movw	r1, #40560	; 0x9e70
    b2cc:	e3401001 	movt	r1, #1
    b2d0:	e3090e8c 	movw	r0, #40588	; 0x9e8c
    b2d4:	e3400001 	movt	r0, #1
    b2d8:	e3a020e3 	mov	r2, #227	; 0xe3
    b2dc:	eb0011e9 	bl	fa88 <assertion_failed>
    b2e0:	eaffffd7 	b	b244 <CMemorySystem::EnableMMU()+0x2c>
    b2e4:	e3091e70 	movw	r1, #40560	; 0x9e70
    b2e8:	e3401001 	movt	r1, #1
    b2ec:	e3090ed4 	movw	r0, #40660	; 0x9ed4
    b2f0:	e3400001 	movt	r0, #1
    b2f4:	e3a020ed 	mov	r2, #237	; 0xed
    b2f8:	eb0011e2 	bl	fa88 <assertion_failed>
    b2fc:	e594000c 	ldr	r0, [r4, #12]
    b300:	eaffffd9 	b	b26c <CMemorySystem::EnableMMU()+0x54>
    b304:	e3091e70 	movw	r1, #40560	; 0x9e70
    b308:	e3401001 	movt	r1, #1
    b30c:	e3090eb8 	movw	r0, #40632	; 0x9eb8
    b310:	e3400001 	movt	r0, #1
    b314:	e3a020e9 	mov	r2, #233	; 0xe9
    b318:	eb0011da 	bl	fa88 <assertion_failed>
    b31c:	e5940008 	ldr	r0, [r4, #8]
    b320:	eaffffcc 	b	b258 <CMemorySystem::EnableMMU()+0x40>

0000b324 <CMemorySystem::CMemorySystem(bool)>:
    b324:	e30c3774 	movw	r3, #51060	; 0xc774
    b328:	e3403001 	movt	r3, #1
    b32c:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
    b330:	e92d4030 	push	{r4, r5, lr}
    b334:	e2802008 	add	r2, r0, #8
    b338:	e1a04000 	mov	r4, r0
    b33c:	e5935000 	ldr	r5, [r3]
    b340:	e3a00000 	mov	r0, #0
    b344:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    b348:	e1550000 	cmp	r5, r0
    b34c:	e5c41000 	strb	r1, [r4]
    b350:	e5840004 	str	r0, [r4, #4]
    b354:	f442078f 	vst1.32	{d16}, [r2]
    b358:	0a000002 	beq	b368 <CMemorySystem::CMemorySystem(bool)+0x44>
    b35c:	e1a00004 	mov	r0, r4
    b360:	e28dd02c 	add	sp, sp, #44	; 0x2c
    b364:	e8bd8030 	pop	{r4, r5, pc}
    b368:	e28d000c 	add	r0, sp, #12
    b36c:	e5834000 	str	r4, [r3]
    b370:	ebfff9c5 	bl	9a8c <CBcmPropertyTags::CBcmPropertyTags()>
    b374:	e58d5000 	str	r5, [sp]
    b378:	e28d000c 	add	r0, sp, #12
    b37c:	e3a01005 	mov	r1, #5
    b380:	e3401001 	movt	r1, #1
    b384:	e3a03014 	mov	r3, #20
    b388:	e28d2010 	add	r2, sp, #16
    b38c:	ebfff9c9 	bl	9ab8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    b390:	e3500000 	cmp	r0, #0
    b394:	1a00001a 	bne	b404 <CMemorySystem::CMemorySystem(bool)+0xe0>
    b398:	eddf0b26 	vldr	d16, [pc, #152]	; b438 <CMemorySystem::CMemorySystem(bool)+0x114>
    b39c:	e28d301c 	add	r3, sp, #28
    b3a0:	e3a01303 	mov	r1, #201326592	; 0xc000000
    b3a4:	f443078f 	vst1.32	{d16}, [r3]
    b3a8:	e5841004 	str	r1, [r4, #4]
    b3ac:	eb0034f7 	bl	18790 <mem_init>
    b3b0:	e5d43000 	ldrb	r3, [r4]
    b3b4:	e3530000 	cmp	r3, #0
    b3b8:	0a00000c 	beq	b3f0 <CMemorySystem::CMemorySystem(bool)+0xcc>
    b3bc:	e3a00008 	mov	r0, #8
    b3c0:	eb0034e6 	bl	18760 <operator new(unsigned int)>
    b3c4:	e5941004 	ldr	r1, [r4, #4]
    b3c8:	e1a05000 	mov	r5, r0
    b3cc:	eb00088b 	bl	d600 <CPageTable::CPageTable(unsigned int)>
    b3d0:	e5845008 	str	r5, [r4, #8]
    b3d4:	e3a00008 	mov	r0, #8
    b3d8:	eb0034e0 	bl	18760 <operator new(unsigned int)>
    b3dc:	e1a05000 	mov	r5, r0
    b3e0:	eb000859 	bl	d54c <CPageTable::CPageTable()>
    b3e4:	e584500c 	str	r5, [r4, #12]
    b3e8:	e1a00004 	mov	r0, r4
    b3ec:	ebffff89 	bl	b218 <CMemorySystem::EnableMMU()>
    b3f0:	e28d000c 	add	r0, sp, #12
    b3f4:	ebfff9aa 	bl	9aa4 <CBcmPropertyTags::~CBcmPropertyTags()>
    b3f8:	e1a00004 	mov	r0, r4
    b3fc:	e28dd02c 	add	sp, sp, #44	; 0x2c
    b400:	e8bd8030 	pop	{r4, r5, pc}
    b404:	e59d001c 	ldr	r0, [sp, #28]
    b408:	e3500000 	cmp	r0, #0
    b40c:	059d1020 	ldreq	r1, [sp, #32]
    b410:	0affffe4 	beq	b3a8 <CMemorySystem::CMemorySystem(bool)+0x84>
    b414:	e3091e70 	movw	r1, #40560	; 0x9e70
    b418:	e3401001 	movt	r1, #1
    b41c:	e3090ee8 	movw	r0, #40680	; 0x9ee8
    b420:	e3400001 	movt	r0, #1
    b424:	e3a0204a 	mov	r2, #74	; 0x4a
    b428:	eb001196 	bl	fa88 <assertion_failed>
    b42c:	e1cd01dc 	ldrd	r0, [sp, #28]
    b430:	eaffffdc 	b	b3a8 <CMemorySystem::CMemorySystem(bool)+0x84>
    b434:	e320f000 	nop	{0}
    b438:	00000000 	.word	0x00000000
    b43c:	0c000000 	.word	0x0c000000

0000b440 <CMemorySystem::GetCoherentPage(unsigned int)>:
    b440:	e1a00600 	lsl	r0, r0, #12
    b444:	e2800501 	add	r0, r0, #4194304	; 0x400000
    b448:	e12fff1e 	bx	lr

0000b44c <CurrentExecutionLevel>:
    b44c:	e10f0000 	mrs	r0, CPSR
    b450:	e3100040 	tst	r0, #64	; 0x40
    b454:	07e003d0 	ubfxeq	r0, r0, #7, #1
    b458:	13a00002 	movne	r0, #2
    b45c:	e12fff1e 	bx	lr

0000b460 <EnterCritical>:
    b460:	e2403001 	sub	r3, r0, #1
    b464:	e92d4070 	push	{r4, r5, r6, lr}
    b468:	e3530001 	cmp	r3, #1
    b46c:	e1a04000 	mov	r4, r0
    b470:	9a000005 	bls	b48c <EnterCritical+0x2c>
    b474:	e3091f04 	movw	r1, #40708	; 0x9f04
    b478:	e3401001 	movt	r1, #1
    b47c:	e3090f14 	movw	r0, #40724	; 0x9f14
    b480:	e3400001 	movt	r0, #1
    b484:	e3a02061 	mov	r2, #97	; 0x61
    b488:	eb00117e 	bl	fa88 <assertion_failed>
    b48c:	e10f5000 	mrs	r5, CPSR
    b490:	e3540002 	cmp	r4, #2
    b494:	0a000001 	beq	b4a0 <EnterCritical+0x40>
    b498:	e3150040 	tst	r5, #64	; 0x40
    b49c:	1a000015 	bne	b4f8 <EnterCritical+0x98>
    b4a0:	f10c0080 	cpsid	i
    b4a4:	e3540002 	cmp	r4, #2
    b4a8:	1a000000 	bne	b4b0 <EnterCritical+0x50>
    b4ac:	f10c0040 	cpsid	f
    b4b0:	e30c4778 	movw	r4, #51064	; 0xc778
    b4b4:	e3404001 	movt	r4, #1
    b4b8:	e5943000 	ldr	r3, [r4]
    b4bc:	e3530013 	cmp	r3, #19
    b4c0:	9a000005 	bls	b4dc <EnterCritical+0x7c>
    b4c4:	e3091f04 	movw	r1, #40708	; 0x9f04
    b4c8:	e3401001 	movt	r1, #1
    b4cc:	e3090f7c 	movw	r0, #40828	; 0x9f7c
    b4d0:	e3400001 	movt	r0, #1
    b4d4:	e3a0206f 	mov	r2, #111	; 0x6f
    b4d8:	eb00116a 	bl	fa88 <assertion_failed>
    b4dc:	e5943000 	ldr	r3, [r4]
    b4e0:	e2832001 	add	r2, r3, #1
    b4e4:	e5842000 	str	r2, [r4]
    b4e8:	e0844103 	add	r4, r4, r3, lsl #2
    b4ec:	e5845008 	str	r5, [r4, #8]
    b4f0:	f57ff05f 	dmb	sy
    b4f4:	e8bd8070 	pop	{r4, r5, r6, pc}
    b4f8:	e3091f04 	movw	r1, #40708	; 0x9f04
    b4fc:	e3401001 	movt	r1, #1
    b500:	e3090f4c 	movw	r0, #40780	; 0x9f4c
    b504:	e3400001 	movt	r0, #1
    b508:	e3a02067 	mov	r2, #103	; 0x67
    b50c:	eb00115d 	bl	fa88 <assertion_failed>
    b510:	eaffffe2 	b	b4a0 <EnterCritical+0x40>

0000b514 <LeaveCritical>:
    b514:	e92d4010 	push	{r4, lr}
    b518:	f57ff05f 	dmb	sy
    b51c:	e30c4778 	movw	r4, #51064	; 0xc778
    b520:	e3404001 	movt	r4, #1
    b524:	e5943000 	ldr	r3, [r4]
    b528:	e3530000 	cmp	r3, #0
    b52c:	1a000005 	bne	b548 <LeaveCritical+0x34>
    b530:	e3091f04 	movw	r1, #40708	; 0x9f04
    b534:	e3401001 	movt	r1, #1
    b538:	e3090fa4 	movw	r0, #40868	; 0x9fa4
    b53c:	e3400001 	movt	r0, #1
    b540:	e3a02079 	mov	r2, #121	; 0x79
    b544:	eb00114f 	bl	fa88 <assertion_failed>
    b548:	e5943000 	ldr	r3, [r4]
    b54c:	e2433001 	sub	r3, r3, #1
    b550:	e5843000 	str	r3, [r4]
    b554:	e0844103 	add	r4, r4, r3, lsl #2
    b558:	e5943008 	ldr	r3, [r4, #8]
    b55c:	e121f003 	msr	CPSR_c, r3
    b560:	e8bd8010 	pop	{r4, pc}

0000b564 <SyncDataAndInstructionCache>:
    b564:	e92d4010 	push	{r4, lr}
    b568:	eb002a51 	bl	15eb4 <CleanDataCache>
    b56c:	e3a03000 	mov	r3, #0
    b570:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    b574:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    b578:	f57ff04f 	dsb	sy
    b57c:	f57ff06f 	isb	sy
    b580:	e8bd8010 	pop	{r4, pc}

0000b584 <__aeabi_atexit>:
    b584:	e12fff1e 	bx	lr

0000b588 <halt>:
    b588:	f10c0080 	cpsid	i
    b58c:	f10c0040 	cpsid	f
    b590:	f57ff04f 	dsb	sy
    b594:	e320f003 	wfi
    b598:	eafffffc 	b	b590 <halt+0x8>

0000b59c <reboot>:
    b59c:	e3a03000 	mov	r3, #0
    b5a0:	e3433f10 	movt	r3, #16144	; 0x3f10
    b5a4:	e3a01001 	mov	r1, #1
    b5a8:	e3451a00 	movt	r1, #23040	; 0x5a00
    b5ac:	e3a02020 	mov	r2, #32
    b5b0:	e3452a00 	movt	r2, #23040	; 0x5a00
    b5b4:	e5831024 	str	r1, [r3, #36]	; 0x24
    b5b8:	e583201c 	str	r2, [r3, #28]
    b5bc:	eafffffe 	b	b5bc <reboot+0x20>

0000b5c0 <sysinit>:
    b5c0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b5c4:	e24dd01c 	sub	sp, sp, #28
    b5c8:	f1080040 	cpsie	f
    b5cc:	eb0029f3 	bl	15da0 <InvalidateDataCacheL1Only>
    b5d0:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    b5d4:	e3083064 	movw	r3, #32868	; 0x8064
    b5d8:	e3403000 	movt	r3, #0
    b5dc:	e582309c 	str	r3, [r2, #156]	; 0x9c
    b5e0:	e58230ac 	str	r3, [r2, #172]	; 0xac
    b5e4:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    b5e8:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    b5ec:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    b5f0:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    b5f4:	f57ff06f 	isb	sy
    b5f8:	eee82a10 	vmsr	fpexc, r2
    b5fc:	e3a03402 	mov	r3, #33554432	; 0x2000000
    b600:	eee13a10 	vmsr	fpscr, r3
    b604:	e30c3768 	movw	r3, #51048	; 0xc768
    b608:	e3403001 	movt	r3, #1
    b60c:	e30c0818 	movw	r0, #51224	; 0xc818
    b610:	e3400001 	movt	r0, #1
    b614:	e1530000 	cmp	r3, r0
    b618:	2a000050 	bcs	b760 <sysinit+0x1a0>
    b61c:	e2031007 	and	r1, r3, #7
    b620:	e2832001 	add	r2, r3, #1
    b624:	e2611000 	rsb	r1, r1, #0
    b628:	e0404002 	sub	r4, r0, r2
    b62c:	e201100f 	and	r1, r1, #15
    b630:	e040e003 	sub	lr, r0, r3
    b634:	e281c00f 	add	ip, r1, #15
    b638:	e35c0011 	cmp	ip, #17
    b63c:	33a0c011 	movcc	ip, #17
    b640:	e15c0004 	cmp	ip, r4
    b644:	8a000041 	bhi	b750 <sysinit+0x190>
    b648:	e3510000 	cmp	r1, #0
    b64c:	0a00005b 	beq	b7c0 <sysinit+0x200>
    b650:	e3a0c000 	mov	ip, #0
    b654:	e3510001 	cmp	r1, #1
    b658:	e5c3c000 	strb	ip, [r3]
    b65c:	0a00002d 	beq	b718 <sysinit+0x158>
    b660:	e3510002 	cmp	r1, #2
    b664:	e5c3c001 	strb	ip, [r3, #1]
    b668:	02832002 	addeq	r2, r3, #2
    b66c:	0a000029 	beq	b718 <sysinit+0x158>
    b670:	e3510003 	cmp	r1, #3
    b674:	e5c3c002 	strb	ip, [r3, #2]
    b678:	02832003 	addeq	r2, r3, #3
    b67c:	0a000025 	beq	b718 <sysinit+0x158>
    b680:	e3510004 	cmp	r1, #4
    b684:	e5c3c003 	strb	ip, [r3, #3]
    b688:	02832004 	addeq	r2, r3, #4
    b68c:	0a000021 	beq	b718 <sysinit+0x158>
    b690:	e3510005 	cmp	r1, #5
    b694:	e5c3c004 	strb	ip, [r3, #4]
    b698:	02832005 	addeq	r2, r3, #5
    b69c:	0a00001d 	beq	b718 <sysinit+0x158>
    b6a0:	e3510006 	cmp	r1, #6
    b6a4:	e5c3c005 	strb	ip, [r3, #5]
    b6a8:	02832006 	addeq	r2, r3, #6
    b6ac:	0a000019 	beq	b718 <sysinit+0x158>
    b6b0:	e5c3c006 	strb	ip, [r3, #6]
    b6b4:	e3510007 	cmp	r1, #7
    b6b8:	0a000042 	beq	b7c8 <sysinit+0x208>
    b6bc:	e3510008 	cmp	r1, #8
    b6c0:	e5c3c007 	strb	ip, [r3, #7]
    b6c4:	0a00003b 	beq	b7b8 <sysinit+0x1f8>
    b6c8:	e5c3c008 	strb	ip, [r3, #8]
    b6cc:	e3510009 	cmp	r1, #9
    b6d0:	0a00003e 	beq	b7d0 <sysinit+0x210>
    b6d4:	e5c3c009 	strb	ip, [r3, #9]
    b6d8:	e351000a 	cmp	r1, #10
    b6dc:	0a00003d 	beq	b7d8 <sysinit+0x218>
    b6e0:	e5c3c00a 	strb	ip, [r3, #10]
    b6e4:	e351000b 	cmp	r1, #11
    b6e8:	0a00003c 	beq	b7e0 <sysinit+0x220>
    b6ec:	e5c3c00b 	strb	ip, [r3, #11]
    b6f0:	e351000c 	cmp	r1, #12
    b6f4:	0a00003b 	beq	b7e8 <sysinit+0x228>
    b6f8:	e5c3c00c 	strb	ip, [r3, #12]
    b6fc:	e351000d 	cmp	r1, #13
    b700:	0a00003a 	beq	b7f0 <sysinit+0x230>
    b704:	e5c3c00d 	strb	ip, [r3, #13]
    b708:	e351000e 	cmp	r1, #14
    b70c:	0a000039 	beq	b7f8 <sysinit+0x238>
    b710:	e283200f 	add	r2, r3, #15
    b714:	e5c3c00e 	strb	ip, [r3, #14]
    b718:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
    b71c:	e04ee001 	sub	lr, lr, r1
    b720:	e0833001 	add	r3, r3, r1
    b724:	e1a0c22e 	lsr	ip, lr, #4
    b728:	e3a01000 	mov	r1, #0
    b72c:	e2811001 	add	r1, r1, #1
    b730:	f4430adf 	vst1.64	{d16-d17}, [r3 :64]
    b734:	e15c0001 	cmp	ip, r1
    b738:	e2833010 	add	r3, r3, #16
    b73c:	8afffffa 	bhi	b72c <sysinit+0x16c>
    b740:	e3ce100f 	bic	r1, lr, #15
    b744:	e0823001 	add	r3, r2, r1
    b748:	e15e0001 	cmp	lr, r1
    b74c:	0a000003 	beq	b760 <sysinit+0x1a0>
    b750:	e3a02000 	mov	r2, #0
    b754:	e4c32001 	strb	r2, [r3], #1
    b758:	e1530000 	cmp	r3, r0
    b75c:	3afffffc 	bcc	b754 <sysinit+0x194>
    b760:	e1a0000d 	mov	r0, sp
    b764:	e30c40b8 	movw	r4, #49336	; 0xc0b8
    b768:	e3404001 	movt	r4, #1
    b76c:	eb002844 	bl	15884 <CMachineInfo::CMachineInfo()>
    b770:	e30c30c8 	movw	r3, #49352	; 0xc0c8
    b774:	e3403001 	movt	r3, #1
    b778:	e1540003 	cmp	r4, r3
    b77c:	2a000008 	bcs	b7a4 <sysinit+0x1e4>
    b780:	e2835003 	add	r5, r3, #3
    b784:	e2843004 	add	r3, r4, #4
    b788:	e0455003 	sub	r5, r5, r3
    b78c:	e3c55003 	bic	r5, r5, #3
    b790:	e0855003 	add	r5, r5, r3
    b794:	e4943004 	ldr	r3, [r4], #4
    b798:	e12fff33 	blx	r3
    b79c:	e1540005 	cmp	r4, r5
    b7a0:	1afffffb 	bne	b794 <sysinit+0x1d4>
    b7a4:	ebfff231 	bl	8070 <main>
    b7a8:	e3500001 	cmp	r0, #1
    b7ac:	0a000000 	beq	b7b4 <sysinit+0x1f4>
    b7b0:	ebffff74 	bl	b588 <halt>
    b7b4:	ebffff78 	bl	b59c <reboot>
    b7b8:	e59f2040 	ldr	r2, [pc, #64]	; b800 <sysinit+0x240>
    b7bc:	eaffffd5 	b	b718 <sysinit+0x158>
    b7c0:	e1a02003 	mov	r2, r3
    b7c4:	eaffffd3 	b	b718 <sysinit+0x158>
    b7c8:	e59f2034 	ldr	r2, [pc, #52]	; b804 <sysinit+0x244>
    b7cc:	eaffffd1 	b	b718 <sysinit+0x158>
    b7d0:	e59f2030 	ldr	r2, [pc, #48]	; b808 <sysinit+0x248>
    b7d4:	eaffffcf 	b	b718 <sysinit+0x158>
    b7d8:	e59f202c 	ldr	r2, [pc, #44]	; b80c <sysinit+0x24c>
    b7dc:	eaffffcd 	b	b718 <sysinit+0x158>
    b7e0:	e59f2028 	ldr	r2, [pc, #40]	; b810 <sysinit+0x250>
    b7e4:	eaffffcb 	b	b718 <sysinit+0x158>
    b7e8:	e59f2024 	ldr	r2, [pc, #36]	; b814 <sysinit+0x254>
    b7ec:	eaffffc9 	b	b718 <sysinit+0x158>
    b7f0:	e59f2020 	ldr	r2, [pc, #32]	; b818 <sysinit+0x258>
    b7f4:	eaffffc7 	b	b718 <sysinit+0x158>
    b7f8:	e59f201c 	ldr	r2, [pc, #28]	; b81c <sysinit+0x25c>
    b7fc:	eaffffc5 	b	b718 <sysinit+0x158>
    b800:	0001c770 	.word	0x0001c770
    b804:	0001c76f 	.word	0x0001c76f
    b808:	0001c771 	.word	0x0001c771
    b80c:	0001c772 	.word	0x0001c772
    b810:	0001c773 	.word	0x0001c773
    b814:	0001c774 	.word	0x0001c774
    b818:	0001c775 	.word	0x0001c775
    b81c:	0001c776 	.word	0x0001c776

0000b820 <CTimer::CTimer(CInterruptSystem*)>:
    b820:	e92d4070 	push	{r4, r5, r6, lr}
    b824:	e1a04000 	mov	r4, r0
    b828:	e3a05000 	mov	r5, #0
    b82c:	e3a03001 	mov	r3, #1
    b830:	e2800018 	add	r0, r0, #24
    b834:	e5845004 	str	r5, [r4, #4]
    b838:	e30c67d4 	movw	r6, #51156	; 0xc7d4
    b83c:	e3406001 	movt	r6, #1
    b840:	e5841000 	str	r1, [r4]
    b844:	e5843010 	str	r3, [r4, #16]
    b848:	e5845008 	str	r5, [r4, #8]
    b84c:	e5845014 	str	r5, [r4, #20]
    b850:	e584500c 	str	r5, [r4, #12]
    b854:	eb00327b 	bl	18248 <CPtrList::CPtrList()>
    b858:	eddf0b10 	vldr	d16, [pc, #64]	; b8a0 <CTimer::CTimer(CInterruptSystem*)+0x80>
    b85c:	e284201c 	add	r2, r4, #28
    b860:	e5961000 	ldr	r1, [r6]
    b864:	e300315e 	movw	r3, #350	; 0x15e
    b868:	e1510005 	cmp	r1, r5
    b86c:	f442078f 	vst1.32	{d16}, [r2]
    b870:	e5845028 	str	r5, [r4, #40]	; 0x28
    b874:	e5843024 	str	r3, [r4, #36]	; 0x24
    b878:	0a000005 	beq	b894 <CTimer::CTimer(CInterruptSystem*)+0x74>
    b87c:	e3091ff8 	movw	r1, #40952	; 0x9ff8
    b880:	e3401001 	movt	r1, #1
    b884:	e3090958 	movw	r0, #39256	; 0x9958
    b888:	e3400001 	movt	r0, #1
    b88c:	e3a0203e 	mov	r2, #62	; 0x3e
    b890:	eb00107c 	bl	fa88 <assertion_failed>
    b894:	e5864000 	str	r4, [r6]
    b898:	e1a00004 	mov	r0, r4
    b89c:	e8bd8070 	pop	{r4, r5, r6, pc}
    b8a0:	00000001 	.word	0x00000001
    b8a4:	00055730 	.word	0x00055730

0000b8a8 <CTimer::~CTimer()>:
    b8a8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b8ac:	e1a09000 	mov	r9, r0
    b8b0:	e5900000 	ldr	r0, [r0]
    b8b4:	e3500000 	cmp	r0, #0
    b8b8:	0a00002b 	beq	b96c <CTimer::~CTimer()+0xc4>
    b8bc:	e3a01003 	mov	r1, #3
    b8c0:	e3097ff8 	movw	r7, #40952	; 0x9ff8
    b8c4:	e3407001 	movt	r7, #1
    b8c8:	e30aa01c 	movw	sl, #40988	; 0xa01c
    b8cc:	e340a001 	movt	sl, #1
    b8d0:	e3048d43 	movw	r8, #19779	; 0x4d43
    b8d4:	e3448b54 	movt	r8, #19284	; 0x4b54
    b8d8:	e2894018 	add	r4, r9, #24
    b8dc:	eb002128 	bl	13d84 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    b8e0:	ea000010 	b	b928 <CTimer::~CTimer()+0x80>
    b8e4:	eb003280 	bl	182ec <CPtrList::GetPtr(TPtrListElement*)>
    b8e8:	e2506000 	subs	r6, r0, #0
    b8ec:	0a000019 	beq	b958 <CTimer::~CTimer()+0xb0>
    b8f0:	e5963000 	ldr	r3, [r6]
    b8f4:	e30a0028 	movw	r0, #41000	; 0xa028
    b8f8:	e3400001 	movt	r0, #1
    b8fc:	e3a0204c 	mov	r2, #76	; 0x4c
    b900:	e1a01007 	mov	r1, r7
    b904:	e1530008 	cmp	r3, r8
    b908:	0a000000 	beq	b910 <CTimer::~CTimer()+0x68>
    b90c:	eb00105d 	bl	fa88 <assertion_failed>
    b910:	e1a01005 	mov	r1, r5
    b914:	e1a00004 	mov	r0, r4
    b918:	eb003314 	bl	18570 <CPtrList::Remove(TPtrListElement*)>
    b91c:	e1a00006 	mov	r0, r6
    b920:	e3a01014 	mov	r1, #20
    b924:	eb003391 	bl	18770 <operator delete(void*, unsigned int)>
    b928:	e1a00004 	mov	r0, r4
    b92c:	eb003255 	bl	18288 <CPtrList::GetFirst()>
    b930:	e2505000 	subs	r5, r0, #0
    b934:	e1a01005 	mov	r1, r5
    b938:	e1a00004 	mov	r0, r4
    b93c:	1affffe8 	bne	b8e4 <CTimer::~CTimer()+0x3c>
    b940:	e30c37d4 	movw	r3, #51156	; 0xc7d4
    b944:	e3403001 	movt	r3, #1
    b948:	e5835000 	str	r5, [r3]
    b94c:	eb003240 	bl	18254 <CPtrList::~CPtrList()>
    b950:	e1a00009 	mov	r0, r9
    b954:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b958:	e3a0204b 	mov	r2, #75	; 0x4b
    b95c:	e1a01007 	mov	r1, r7
    b960:	e1a0000a 	mov	r0, sl
    b964:	eb001047 	bl	fa88 <assertion_failed>
    b968:	eaffffe0 	b	b8f0 <CTimer::~CTimer()+0x48>
    b96c:	e3091ff8 	movw	r1, #40952	; 0x9ff8
    b970:	e3401001 	movt	r1, #1
    b974:	e30a0004 	movw	r0, #40964	; 0xa004
    b978:	e3400001 	movt	r0, #1
    b97c:	e3a02044 	mov	r2, #68	; 0x44
    b980:	eb001040 	bl	fa88 <assertion_failed>
    b984:	e5990000 	ldr	r0, [r9]
    b988:	eaffffcb 	b	b8bc <CTimer::~CTimer()+0x14>

0000b98c <CTimer::Initialize()>:
    b98c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    b990:	e1a04000 	mov	r4, r0
    b994:	e5900000 	ldr	r0, [r0]
    b998:	e24dd00c 	sub	sp, sp, #12
    b99c:	e3500000 	cmp	r0, #0
    b9a0:	0a000034 	beq	ba78 <CTimer::Initialize()+0xec>
    b9a4:	e1a03004 	mov	r3, r4
    b9a8:	e3a01003 	mov	r1, #3
    b9ac:	e30c2248 	movw	r2, #49736	; 0xc248
    b9b0:	e3402000 	movt	r2, #0
    b9b4:	eb0020b5 	bl	13c90 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    b9b8:	e3a03a03 	mov	r3, #12288	; 0x3000
    b9bc:	e3433f00 	movt	r3, #16128	; 0x3f00
    b9c0:	e3a02df2 	mov	r2, #15488	; 0x3c80
    b9c4:	e34f2e36 	movt	r2, #65078	; 0xfe36
    b9c8:	e3025710 	movw	r5, #10000	; 0x2710
    b9cc:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    b9d0:	e5832004 	str	r2, [r3, #4]
    b9d4:	e308651f 	movw	r6, #34079	; 0x851f
    b9d8:	e34561eb 	movt	r6, #20971	; 0x51eb
    b9dc:	e5932004 	ldr	r2, [r3, #4]
    b9e0:	e0822005 	add	r2, r2, r5
    b9e4:	e5832018 	str	r2, [r3, #24]
    b9e8:	e5943020 	ldr	r3, [r4, #32]
    b9ec:	e5947004 	ldr	r7, [r4, #4]
    b9f0:	e0000390 	mul	r0, r0, r3
    b9f4:	eb001f17 	bl	13658 <DelayLoop>
    b9f8:	e5943004 	ldr	r3, [r4, #4]
    b9fc:	e5942020 	ldr	r2, [r4, #32]
    ba00:	e3041dd3 	movw	r1, #19923	; 0x4dd3
    ba04:	e3411062 	movt	r1, #4194	; 0x1062
    ba08:	e0433007 	sub	r3, r3, r7
    ba0c:	e735f315 	udiv	r5, r5, r3
    ba10:	e0020592 	mul	r2, r2, r5
    ba14:	e0898695 	umull	r8, r9, r5, r6
    ba18:	e0823296 	umull	r3, r2, r6, r2
    ba1c:	e0c76695 	smull	r6, r7, r5, r6
    ba20:	e1a022a2 	lsr	r2, r2, #5
    ba24:	e5842020 	str	r2, [r4, #32]
    ba28:	e2822f7d 	add	r2, r2, #500	; 0x1f4
    ba2c:	e0c32192 	smull	r2, r3, r2, r1
    ba30:	e1a03343 	asr	r3, r3, #6
    ba34:	e5843024 	str	r3, [r4, #36]	; 0x24
    ba38:	eb00126e 	bl	103f8 <CLogger::Get()>
    ba3c:	e1a022a9 	lsr	r2, r9, #5
    ba40:	e3a01064 	mov	r1, #100	; 0x64
    ba44:	e1a032c7 	asr	r3, r7, #5
    ba48:	e58d3000 	str	r3, [sp]
    ba4c:	e30a3050 	movw	r3, #41040	; 0xa050
    ba50:	e3403001 	movt	r3, #1
    ba54:	e0655291 	mls	r5, r1, r2, r5
    ba58:	e3a02003 	mov	r2, #3
    ba5c:	e58d5004 	str	r5, [sp, #4]
    ba60:	e3091fc0 	movw	r1, #40896	; 0x9fc0
    ba64:	e3401001 	movt	r1, #1
    ba68:	eb0013ed 	bl	10a24 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ba6c:	e3a00001 	mov	r0, #1
    ba70:	e28dd00c 	add	sp, sp, #12
    ba74:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    ba78:	e3091ff8 	movw	r1, #40952	; 0x9ff8
    ba7c:	e3401001 	movt	r1, #1
    ba80:	e30a0004 	movw	r0, #40964	; 0xa004
    ba84:	e3400001 	movt	r0, #1
    ba88:	e3a02058 	mov	r2, #88	; 0x58
    ba8c:	eb000ffd 	bl	fa88 <assertion_failed>
    ba90:	e5940000 	ldr	r0, [r4]
    ba94:	eaffffc2 	b	b9a4 <CTimer::Initialize()+0x18>

0000ba98 <CTimer::SetTimeZone(int)>:
    ba98:	e2813e59 	add	r3, r1, #1424	; 0x590
    ba9c:	e3002b3e 	movw	r2, #2878	; 0xb3e
    baa0:	e283300f 	add	r3, r3, #15
    baa4:	e1530002 	cmp	r3, r2
    baa8:	95801014 	strls	r1, [r0, #20]
    baac:	93a00001 	movls	r0, #1
    bab0:	83a00000 	movhi	r0, #0
    bab4:	e12fff1e 	bx	lr

0000bab8 <CTimer::GetTimeZone() const>:
    bab8:	e5900014 	ldr	r0, [r0, #20]
    babc:	e12fff1e 	bx	lr

0000bac0 <CTimer::SetTime(unsigned int, bool)>:
    bac0:	e92d4070 	push	{r4, r5, r6, lr}
    bac4:	e3520000 	cmp	r2, #0
    bac8:	e1a04000 	mov	r4, r0
    bacc:	e1a05001 	mov	r5, r1
    bad0:	1a000005 	bne	baec <CTimer::SetTime(unsigned int, bool)+0x2c>
    bad4:	e5901014 	ldr	r1, [r0, #20]
    bad8:	e3a0303c 	mov	r3, #60	; 0x3c
    badc:	e0030193 	mul	r3, r3, r1
    bae0:	e3530000 	cmp	r3, #0
    bae4:	ba00000e 	blt	bb24 <CTimer::SetTime(unsigned int, bool)+0x64>
    bae8:	e0855003 	add	r5, r5, r3
    baec:	e5940010 	ldr	r0, [r4, #16]
    baf0:	e3500000 	cmp	r0, #0
    baf4:	1a000002 	bne	bb04 <CTimer::SetTime(unsigned int, bool)+0x44>
    baf8:	e3a00001 	mov	r0, #1
    bafc:	e584500c 	str	r5, [r4, #12]
    bb00:	e8bd8070 	pop	{r4, r5, r6, pc}
    bb04:	ebfffe55 	bl	b460 <EnterCritical>
    bb08:	e5943010 	ldr	r3, [r4, #16]
    bb0c:	e584500c 	str	r5, [r4, #12]
    bb10:	e3530000 	cmp	r3, #0
    bb14:	0a000007 	beq	bb38 <CTimer::SetTime(unsigned int, bool)+0x78>
    bb18:	ebfffe7d 	bl	b514 <LeaveCritical>
    bb1c:	e3a00001 	mov	r0, #1
    bb20:	e8bd8070 	pop	{r4, r5, r6, pc}
    bb24:	e2631000 	rsb	r1, r3, #0
    bb28:	e1510005 	cmp	r1, r5
    bb2c:	daffffed 	ble	bae8 <CTimer::SetTime(unsigned int, bool)+0x28>
    bb30:	e1a00002 	mov	r0, r2
    bb34:	e8bd8070 	pop	{r4, r5, r6, pc}
    bb38:	e3a00001 	mov	r0, #1
    bb3c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bb40 <CTimer::GetClockTicks()>:
    bb40:	e3a03a03 	mov	r3, #12288	; 0x3000
    bb44:	e3433f00 	movt	r3, #16128	; 0x3f00
    bb48:	e5930004 	ldr	r0, [r3, #4]
    bb4c:	e12fff1e 	bx	lr

0000bb50 <CTimer::GetTicks() const>:
    bb50:	e5900004 	ldr	r0, [r0, #4]
    bb54:	e12fff1e 	bx	lr

0000bb58 <CTimer::GetUptime() const>:
    bb58:	e5900008 	ldr	r0, [r0, #8]
    bb5c:	e12fff1e 	bx	lr

0000bb60 <CTimer::GetTime() const>:
    bb60:	e590000c 	ldr	r0, [r0, #12]
    bb64:	e12fff1e 	bx	lr

0000bb68 <CTimer::GetUniversalTime() const>:
    bb68:	e5902014 	ldr	r2, [r0, #20]
    bb6c:	e3a0303c 	mov	r3, #60	; 0x3c
    bb70:	e590000c 	ldr	r0, [r0, #12]
    bb74:	e0030293 	mul	r3, r3, r2
    bb78:	e1500003 	cmp	r0, r3
    bb7c:	a0400003 	subge	r0, r0, r3
    bb80:	b3a00000 	movlt	r0, #0
    bb84:	e12fff1e 	bx	lr

0000bb88 <CTimer::GetTimeString()>:
    bb88:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb8c:	e1a05000 	mov	r5, r0
    bb90:	e5900010 	ldr	r0, [r0, #16]
    bb94:	e24dd01c 	sub	sp, sp, #28
    bb98:	e3500000 	cmp	r0, #0
    bb9c:	1a0000a1 	bne	be28 <CTimer::GetTimeString()+0x2a0>
    bba0:	e595400c 	ldr	r4, [r5, #12]
    bba4:	e5958004 	ldr	r8, [r5, #4]
    bba8:	e1943008 	orrs	r3, r4, r8
    bbac:	0a0000a5 	beq	be48 <CTimer::GetTimeString()+0x2c0>
    bbb0:	e3082889 	movw	r2, #34953	; 0x8889
    bbb4:	e3482888 	movt	r2, #34952	; 0x8888
    bbb8:	e30b63c5 	movw	r6, #46021	; 0xb3c5
    bbbc:	e34961a2 	movt	r6, #37282	; 0x91a2
    bbc0:	e3045507 	movw	r5, #17671	; 0x4507
    bbc4:	e34c522e 	movt	r5, #49710	; 0xc22e
    bbc8:	e0813492 	umull	r3, r1, r2, r4
    bbcc:	e3a0003c 	mov	r0, #60	; 0x3c
    bbd0:	e08ba294 	umull	sl, fp, r4, r2
    bbd4:	e308c51f 	movw	ip, #34079	; 0x851f
    bbd8:	e345c1eb 	movt	ip, #20971	; 0x51eb
    bbdc:	e1a012a1 	lsr	r1, r1, #5
    bbe0:	e0863496 	umull	r3, r6, r6, r4
    bbe4:	e0853495 	umull	r3, r5, r5, r4
    bbe8:	e1a092ab 	lsr	r9, fp, #5
    bbec:	e3a0e064 	mov	lr, #100	; 0x64
    bbf0:	e300a16d 	movw	sl, #365	; 0x16d
    bbf4:	e0c32291 	smull	r2, r3, r1, r2
    bbf8:	e1a065a6 	lsr	r6, r6, #11
    bbfc:	e0694990 	mls	r9, r0, r9, r4
    bc00:	e1a05825 	lsr	r5, r5, #16
    bc04:	e0817003 	add	r7, r1, r3
    bc08:	e30047b2 	movw	r4, #1970	; 0x7b2
    bc0c:	e1a072c7 	asr	r7, r7, #5
    bc10:	e3a03e19 	mov	r3, #400	; 0x190
    bc14:	e0671790 	mls	r7, r0, r7, r1
    bc18:	ea000004 	b	bc30 <CTimer::GetTimeString()+0xa8>
    bc1c:	e155000a 	cmp	r5, sl
    bc20:	9a000014 	bls	bc78 <CTimer::GetTimeString()+0xf0>
    bc24:	e300216e 	movw	r2, #366	; 0x16e
    bc28:	e0455002 	sub	r5, r5, r2
    bc2c:	e2844001 	add	r4, r4, #1
    bc30:	e0810c94 	umull	r0, r1, r4, ip
    bc34:	e1a023a1 	lsr	r2, r1, #7
    bc38:	e1a012a1 	lsr	r1, r1, #5
    bc3c:	e0624293 	mls	r2, r3, r2, r4
    bc40:	e061419e 	mls	r1, lr, r1, r4
    bc44:	e16f2f12 	clz	r2, r2
    bc48:	e3510000 	cmp	r1, #0
    bc4c:	01a022a2 	lsreq	r2, r2, #5
    bc50:	0a000002 	beq	bc60 <CTimer::GetTimeString()+0xd8>
    bc54:	e3140003 	tst	r4, #3
    bc58:	03a02001 	moveq	r2, #1
    bc5c:	13a02000 	movne	r2, #0
    bc60:	e3520000 	cmp	r2, #0
    bc64:	1affffec 	bne	bc1c <CTimer::GetTimeString()+0x94>
    bc68:	e3550f5b 	cmp	r5, #364	; 0x16c
    bc6c:	9a00001d 	bls	bce8 <CTimer::GetTimeString()+0x160>
    bc70:	e300216d 	movw	r2, #365	; 0x16d
    bc74:	eaffffeb 	b	bc28 <CTimer::GetTimeString()+0xa0>
    bc78:	e355001e 	cmp	r5, #30
    bc7c:	8a00008e 	bhi	bebc <CTimer::GetTimeString()+0x334>
    bc80:	e3a03000 	mov	r3, #0
    bc84:	e308a51f 	movw	sl, #34079	; 0x851f
    bc88:	e345a1eb 	movt	sl, #20971	; 0x51eb
    bc8c:	e3a02064 	mov	r2, #100	; 0x64
    bc90:	e3a00010 	mov	r0, #16
    bc94:	e58d3014 	str	r3, [sp, #20]
    bc98:	e08baa98 	umull	sl, fp, r8, sl
    bc9c:	e1a0a2ab 	lsr	sl, fp, #5
    bca0:	e06a8a92 	mls	sl, r2, sl, r8
    bca4:	eb0032ad 	bl	18760 <operator new(unsigned int)>
    bca8:	e1a08000 	mov	r8, r0
    bcac:	eb0016ba 	bl	1179c <CString::CString()>
    bcb0:	e30027b7 	movw	r2, #1975	; 0x7b7
    bcb4:	e1540002 	cmp	r4, r2
    bcb8:	8a000044 	bhi	bdd0 <CTimer::GetTimeString()+0x248>
    bcbc:	e30a1084 	movw	r1, #41092	; 0xa084
    bcc0:	e3401001 	movt	r1, #1
    bcc4:	e58da004 	str	sl, [sp, #4]
    bcc8:	e1a03007 	mov	r3, r7
    bccc:	e58d9000 	str	r9, [sp]
    bcd0:	e1a02006 	mov	r2, r6
    bcd4:	e1a00008 	mov	r0, r8
    bcd8:	eb001e51 	bl	13624 <CString::Format(char const*, ...)>
    bcdc:	e1a00008 	mov	r0, r8
    bce0:	e28dd01c 	add	sp, sp, #28
    bce4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bce8:	e355001e 	cmp	r5, #30
    bcec:	8245501f 	subhi	r5, r5, #31
    bcf0:	83a0301c 	movhi	r3, #28
    bcf4:	9affffe1 	bls	bc80 <CTimer::GetTimeString()+0xf8>
    bcf8:	e1530005 	cmp	r3, r5
    bcfc:	8a000031 	bhi	bdc8 <CTimer::GetTimeString()+0x240>
    bd00:	e0455003 	sub	r5, r5, r3
    bd04:	e355001e 	cmp	r5, #30
    bd08:	93a03002 	movls	r3, #2
    bd0c:	9affffdc 	bls	bc84 <CTimer::GetTimeString()+0xfc>
    bd10:	e245301f 	sub	r3, r5, #31
    bd14:	e353001d 	cmp	r3, #29
    bd18:	9a00004c 	bls	be50 <CTimer::GetTimeString()+0x2c8>
    bd1c:	e245303d 	sub	r3, r5, #61	; 0x3d
    bd20:	e353001e 	cmp	r3, #30
    bd24:	9a00004c 	bls	be5c <CTimer::GetTimeString()+0x2d4>
    bd28:	e245305c 	sub	r3, r5, #92	; 0x5c
    bd2c:	e353001d 	cmp	r3, #29
    bd30:	9a00004c 	bls	be68 <CTimer::GetTimeString()+0x2e0>
    bd34:	e245307a 	sub	r3, r5, #122	; 0x7a
    bd38:	e353001e 	cmp	r3, #30
    bd3c:	9a00004c 	bls	be74 <CTimer::GetTimeString()+0x2ec>
    bd40:	e2453099 	sub	r3, r5, #153	; 0x99
    bd44:	e353001e 	cmp	r3, #30
    bd48:	9a00004f 	bls	be8c <CTimer::GetTimeString()+0x304>
    bd4c:	e24530b8 	sub	r3, r5, #184	; 0xb8
    bd50:	e353001d 	cmp	r3, #29
    bd54:	9a00004f 	bls	be98 <CTimer::GetTimeString()+0x310>
    bd58:	e24530d6 	sub	r3, r5, #214	; 0xd6
    bd5c:	e353001e 	cmp	r3, #30
    bd60:	9a000046 	bls	be80 <CTimer::GetTimeString()+0x2f8>
    bd64:	e24530f5 	sub	r3, r5, #245	; 0xf5
    bd68:	e353001d 	cmp	r3, #29
    bd6c:	9a00004c 	bls	bea4 <CTimer::GetTimeString()+0x31c>
    bd70:	e2453e11 	sub	r3, r5, #272	; 0x110
    bd74:	e2433003 	sub	r3, r3, #3
    bd78:	e353001e 	cmp	r3, #30
    bd7c:	9a00004b 	bls	beb0 <CTimer::GetTimeString()+0x328>
    bd80:	e2455e13 	sub	r5, r5, #304	; 0x130
    bd84:	e3a0300d 	mov	r3, #13
    bd88:	e2455002 	sub	r5, r5, #2
    bd8c:	e59f0138 	ldr	r0, [pc, #312]	; becc <CTimer::GetTimeString()+0x344>
    bd90:	ea000004 	b	bda8 <CTimer::GetTimeString()+0x220>
    bd94:	e7901103 	ldr	r1, [r0, r3, lsl #2]
    bd98:	e1550001 	cmp	r5, r1
    bd9c:	3affffb8 	bcc	bc84 <CTimer::GetTimeString()+0xfc>
    bda0:	e0455001 	sub	r5, r5, r1
    bda4:	e2833001 	add	r3, r3, #1
    bda8:	e3530001 	cmp	r3, #1
    bdac:	13a01000 	movne	r1, #0
    bdb0:	02021001 	andeq	r1, r2, #1
    bdb4:	e3510000 	cmp	r1, #0
    bdb8:	0afffff5 	beq	bd94 <CTimer::GetTimeString()+0x20c>
    bdbc:	e3a0101d 	mov	r1, #29
    bdc0:	e355001c 	cmp	r5, #28
    bdc4:	8afffff5 	bhi	bda0 <CTimer::GetTimeString()+0x218>
    bdc8:	e3a03001 	mov	r3, #1
    bdcc:	eaffffac 	b	bc84 <CTimer::GetTimeString()+0xfc>
    bdd0:	e30a1aab 	movw	r1, #43691	; 0xaaab
    bdd4:	e34a1aaa 	movt	r1, #43690	; 0xaaaa
    bdd8:	e58da00c 	str	sl, [sp, #12]
    bddc:	e3a0c018 	mov	ip, #24
    bde0:	e59d3014 	ldr	r3, [sp, #20]
    bde4:	e30c2668 	movw	r2, #50792	; 0xc668
    bde8:	e3402001 	movt	r2, #1
    bdec:	e08ba196 	umull	sl, fp, r6, r1
    bdf0:	e58d9008 	str	r9, [sp, #8]
    bdf4:	e1a00008 	mov	r0, r8
    bdf8:	e30a1068 	movw	r1, #41064	; 0xa068
    bdfc:	e3401001 	movt	r1, #1
    be00:	e1a0e22b 	lsr	lr, fp, #4
    be04:	e7922103 	ldr	r2, [r2, r3, lsl #2]
    be08:	e2853001 	add	r3, r5, #1
    be0c:	e58d7004 	str	r7, [sp, #4]
    be10:	e0666e9c 	mls	r6, ip, lr, r6
    be14:	e58d6000 	str	r6, [sp]
    be18:	eb001e01 	bl	13624 <CString::Format(char const*, ...)>
    be1c:	e1a00008 	mov	r0, r8
    be20:	e28dd01c 	add	sp, sp, #28
    be24:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    be28:	ebfffd8c 	bl	b460 <EnterCritical>
    be2c:	e5953010 	ldr	r3, [r5, #16]
    be30:	e595400c 	ldr	r4, [r5, #12]
    be34:	e3530000 	cmp	r3, #0
    be38:	e5958004 	ldr	r8, [r5, #4]
    be3c:	0affff59 	beq	bba8 <CTimer::GetTimeString()+0x20>
    be40:	ebfffdb3 	bl	b514 <LeaveCritical>
    be44:	eaffff57 	b	bba8 <CTimer::GetTimeString()+0x20>
    be48:	e1a08003 	mov	r8, r3
    be4c:	eaffffa2 	b	bcdc <CTimer::GetTimeString()+0x154>
    be50:	e1a05003 	mov	r5, r3
    be54:	e3a03003 	mov	r3, #3
    be58:	eaffff89 	b	bc84 <CTimer::GetTimeString()+0xfc>
    be5c:	e1a05003 	mov	r5, r3
    be60:	e3a03004 	mov	r3, #4
    be64:	eaffff86 	b	bc84 <CTimer::GetTimeString()+0xfc>
    be68:	e1a05003 	mov	r5, r3
    be6c:	e3a03005 	mov	r3, #5
    be70:	eaffff83 	b	bc84 <CTimer::GetTimeString()+0xfc>
    be74:	e1a05003 	mov	r5, r3
    be78:	e3a03006 	mov	r3, #6
    be7c:	eaffff80 	b	bc84 <CTimer::GetTimeString()+0xfc>
    be80:	e1a05003 	mov	r5, r3
    be84:	e3a03009 	mov	r3, #9
    be88:	eaffff7d 	b	bc84 <CTimer::GetTimeString()+0xfc>
    be8c:	e1a05003 	mov	r5, r3
    be90:	e3a03007 	mov	r3, #7
    be94:	eaffff7a 	b	bc84 <CTimer::GetTimeString()+0xfc>
    be98:	e1a05003 	mov	r5, r3
    be9c:	e3a03008 	mov	r3, #8
    bea0:	eaffff77 	b	bc84 <CTimer::GetTimeString()+0xfc>
    bea4:	e1a05003 	mov	r5, r3
    bea8:	e3a0300a 	mov	r3, #10
    beac:	eaffff74 	b	bc84 <CTimer::GetTimeString()+0xfc>
    beb0:	e1a05003 	mov	r5, r3
    beb4:	e3a0300b 	mov	r3, #11
    beb8:	eaffff71 	b	bc84 <CTimer::GetTimeString()+0xfc>
    bebc:	e245501f 	sub	r5, r5, #31
    bec0:	e3a02001 	mov	r2, #1
    bec4:	e3a0301d 	mov	r3, #29
    bec8:	eaffff8a 	b	bcf8 <CTimer::GetTimeString()+0x170>
    becc:	00019fc8 	.word	0x00019fc8

0000bed0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    bed0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bed4:	e1a0a000 	mov	sl, r0
    bed8:	e3a00014 	mov	r0, #20
    bedc:	e24dd00c 	sub	sp, sp, #12
    bee0:	e1a06001 	mov	r6, r1
    bee4:	e1a04002 	mov	r4, r2
    bee8:	e1a07003 	mov	r7, r3
    beec:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
    bef0:	eb00321a 	bl	18760 <operator new(unsigned int)>
    bef4:	e59a1004 	ldr	r1, [sl, #4]
    bef8:	e1a09000 	mov	r9, r0
    befc:	e3540000 	cmp	r4, #0
    bf00:	e0816006 	add	r6, r1, r6
    bf04:	0a000042 	beq	c014 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
    bf08:	e59a001c 	ldr	r0, [sl, #28]
    bf0c:	e3042d43 	movw	r2, #19779	; 0x4d43
    bf10:	e3442b54 	movt	r2, #19284	; 0x4b54
    bf14:	e5892000 	str	r2, [r9]
    bf18:	e5894004 	str	r4, [r9, #4]
    bf1c:	e3500000 	cmp	r0, #0
    bf20:	e5896008 	str	r6, [r9, #8]
    bf24:	e589700c 	str	r7, [r9, #12]
    bf28:	e5895010 	str	r5, [r9, #16]
    bf2c:	1a000036 	bne	c00c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
    bf30:	e28a5018 	add	r5, sl, #24
    bf34:	e1a00005 	mov	r0, r5
    bf38:	eb0030d2 	bl	18288 <CPtrList::GetFirst()>
    bf3c:	e2504000 	subs	r4, r0, #0
    bf40:	0a00002c 	beq	bff8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
    bf44:	e3097ff8 	movw	r7, #40952	; 0x9ff8
    bf48:	e3407001 	movt	r7, #1
    bf4c:	e30a3098 	movw	r3, #41112	; 0xa098
    bf50:	e3403001 	movt	r3, #1
    bf54:	e3048d43 	movw	r8, #19779	; 0x4d43
    bf58:	e3448b54 	movt	r8, #19284	; 0x4b54
    bf5c:	e58d3004 	str	r3, [sp, #4]
    bf60:	ea000011 	b	bfac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
    bf64:	e59bc000 	ldr	ip, [fp]
    bf68:	e30a00a8 	movw	r0, #41128	; 0xa0a8
    bf6c:	e3400001 	movt	r0, #1
    bf70:	e3002133 	movw	r2, #307	; 0x133
    bf74:	e1a01007 	mov	r1, r7
    bf78:	e15c0008 	cmp	ip, r8
    bf7c:	0a000000 	beq	bf84 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xb4>
    bf80:	eb000ec0 	bl	fa88 <assertion_failed>
    bf84:	e59b3008 	ldr	r3, [fp, #8]
    bf88:	e1a01004 	mov	r1, r4
    bf8c:	e1a00005 	mov	r0, r5
    bf90:	e0433006 	sub	r3, r3, r6
    bf94:	e3530000 	cmp	r3, #0
    bf98:	ca00000d 	bgt	bfd4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x104>
    bf9c:	eb0030bb 	bl	18290 <CPtrList::GetNext(TPtrListElement*)>
    bfa0:	e3500000 	cmp	r0, #0
    bfa4:	0a000013 	beq	bff8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
    bfa8:	e1a04000 	mov	r4, r0
    bfac:	e1a01004 	mov	r1, r4
    bfb0:	e1a00005 	mov	r0, r5
    bfb4:	eb0030cc 	bl	182ec <CPtrList::GetPtr(TPtrListElement*)>
    bfb8:	e250b000 	subs	fp, r0, #0
    bfbc:	1affffe8 	bne	bf64 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x94>
    bfc0:	e3002132 	movw	r2, #306	; 0x132
    bfc4:	e1a01007 	mov	r1, r7
    bfc8:	e59d0004 	ldr	r0, [sp, #4]
    bfcc:	eb000ead 	bl	fa88 <assertion_failed>
    bfd0:	eaffffe3 	b	bf64 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x94>
    bfd4:	e1a02009 	mov	r2, r9
    bfd8:	eb0030da 	bl	18348 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    bfdc:	e59a301c 	ldr	r3, [sl, #28]
    bfe0:	e3530000 	cmp	r3, #0
    bfe4:	0a000000 	beq	bfec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x11c>
    bfe8:	ebfffd49 	bl	b514 <LeaveCritical>
    bfec:	e1a00009 	mov	r0, r9
    bff0:	e28dd00c 	add	sp, sp, #12
    bff4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bff8:	e1a01004 	mov	r1, r4
    bffc:	e1a00005 	mov	r0, r5
    c000:	e1a02009 	mov	r2, r9
    c004:	eb003115 	bl	18460 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    c008:	eafffff3 	b	bfdc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
    c00c:	ebfffd13 	bl	b460 <EnterCritical>
    c010:	eaffffc6 	b	bf30 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x60>
    c014:	e3091ff8 	movw	r1, #40952	; 0x9ff8
    c018:	e3401001 	movt	r1, #1
    c01c:	e30b03cc 	movw	r0, #46028	; 0xb3cc
    c020:	e3400001 	movt	r0, #1
    c024:	e3002122 	movw	r2, #290	; 0x122
    c028:	eb000e96 	bl	fa88 <assertion_failed>
    c02c:	eaffffb5 	b	bf08 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x38>

0000c030 <CTimer::CancelKernelTimer(unsigned int)>:
    c030:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c034:	e1a05000 	mov	r5, r0
    c038:	e2514000 	subs	r4, r1, #0
    c03c:	0a000023 	beq	c0d0 <CTimer::CancelKernelTimer(unsigned int)+0xa0>
    c040:	e595001c 	ldr	r0, [r5, #28]
    c044:	e3500000 	cmp	r0, #0
    c048:	1a00001e 	bne	c0c8 <CTimer::CancelKernelTimer(unsigned int)+0x98>
    c04c:	e2856018 	add	r6, r5, #24
    c050:	e1a01004 	mov	r1, r4
    c054:	e1a00006 	mov	r0, r6
    c058:	eb0031a2 	bl	186e8 <CPtrList::Find(void*)>
    c05c:	e2507000 	subs	r7, r0, #0
    c060:	0a00000c 	beq	c098 <CTimer::CancelKernelTimer(unsigned int)+0x68>
    c064:	e5942000 	ldr	r2, [r4]
    c068:	e3043d43 	movw	r3, #19779	; 0x4d43
    c06c:	e3443b54 	movt	r3, #19284	; 0x4b54
    c070:	e1520003 	cmp	r2, r3
    c074:	1a00000c 	bne	c0ac <CTimer::CancelKernelTimer(unsigned int)+0x7c>
    c078:	e1a01007 	mov	r1, r7
    c07c:	e1a00006 	mov	r0, r6
    c080:	eb00313a 	bl	18570 <CPtrList::Remove(TPtrListElement*)>
    c084:	e3a03000 	mov	r3, #0
    c088:	e1a00004 	mov	r0, r4
    c08c:	e5843000 	str	r3, [r4]
    c090:	e3a01014 	mov	r1, #20
    c094:	eb0031b5 	bl	18770 <operator delete(void*, unsigned int)>
    c098:	e595301c 	ldr	r3, [r5, #28]
    c09c:	e3530000 	cmp	r3, #0
    c0a0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    c0a4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    c0a8:	eafffd19 	b	b514 <LeaveCritical>
    c0ac:	e3091ff8 	movw	r1, #40952	; 0x9ff8
    c0b0:	e3401001 	movt	r1, #1
    c0b4:	e30a0028 	movw	r0, #41000	; 0xa028
    c0b8:	e3400001 	movt	r0, #1
    c0bc:	e3002156 	movw	r2, #342	; 0x156
    c0c0:	eb000e70 	bl	fa88 <assertion_failed>
    c0c4:	eaffffeb 	b	c078 <CTimer::CancelKernelTimer(unsigned int)+0x48>
    c0c8:	ebfffce4 	bl	b460 <EnterCritical>
    c0cc:	eaffffde 	b	c04c <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    c0d0:	e3091ff8 	movw	r1, #40952	; 0x9ff8
    c0d4:	e3401001 	movt	r1, #1
    c0d8:	e30a001c 	movw	r0, #40988	; 0xa01c
    c0dc:	e3400001 	movt	r0, #1
    c0e0:	e300214f 	movw	r2, #335	; 0x14f
    c0e4:	eb000e67 	bl	fa88 <assertion_failed>
    c0e8:	eaffffd4 	b	c040 <CTimer::CancelKernelTimer(unsigned int)+0x10>

0000c0ec <CTimer::PollKernelTimers()>:
    c0ec:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c0f0:	e1a06000 	mov	r6, r0
    c0f4:	e590001c 	ldr	r0, [r0, #28]
    c0f8:	e3500000 	cmp	r0, #0
    c0fc:	1a00004f 	bne	c240 <CTimer::PollKernelTimers()+0x154>
    c100:	e2867018 	add	r7, r6, #24
    c104:	e1a00007 	mov	r0, r7
    c108:	eb00305e 	bl	18288 <CPtrList::GetFirst()>
    c10c:	e2505000 	subs	r5, r0, #0
    c110:	0a000040 	beq	c218 <CTimer::PollKernelTimers()+0x12c>
    c114:	e3099ff8 	movw	r9, #40952	; 0x9ff8
    c118:	e3409001 	movt	r9, #1
    c11c:	e30aa01c 	movw	sl, #40988	; 0xa01c
    c120:	e340a001 	movt	sl, #1
    c124:	e3048d43 	movw	r8, #19779	; 0x4d43
    c128:	e3448b54 	movt	r8, #19284	; 0x4b54
    c12c:	ea000010 	b	c174 <CTimer::PollKernelTimers()+0x88>
    c130:	e5945004 	ldr	r5, [r4, #4]
    c134:	e3550000 	cmp	r5, #0
    c138:	0a00002d 	beq	c1f4 <CTimer::PollKernelTimers()+0x108>
    c13c:	e5942010 	ldr	r2, [r4, #16]
    c140:	e1a00004 	mov	r0, r4
    c144:	e594100c 	ldr	r1, [r4, #12]
    c148:	e12fff35 	blx	r5
    c14c:	e3a03000 	mov	r3, #0
    c150:	e1a00004 	mov	r0, r4
    c154:	e5843000 	str	r3, [r4]
    c158:	e3a01014 	mov	r1, #20
    c15c:	eb003183 	bl	18770 <operator delete(void*, unsigned int)>
    c160:	e596001c 	ldr	r0, [r6, #28]
    c164:	e3500000 	cmp	r0, #0
    c168:	1a000027 	bne	c20c <CTimer::PollKernelTimers()+0x120>
    c16c:	e25b5000 	subs	r5, fp, #0
    c170:	0a000028 	beq	c218 <CTimer::PollKernelTimers()+0x12c>
    c174:	e1a01005 	mov	r1, r5
    c178:	e1a00007 	mov	r0, r7
    c17c:	eb00305a 	bl	182ec <CPtrList::GetPtr(TPtrListElement*)>
    c180:	e2504000 	subs	r4, r0, #0
    c184:	0a000028 	beq	c22c <CTimer::PollKernelTimers()+0x140>
    c188:	e5943000 	ldr	r3, [r4]
    c18c:	e1530008 	cmp	r3, r8
    c190:	0a000004 	beq	c1a8 <CTimer::PollKernelTimers()+0xbc>
    c194:	e30a0028 	movw	r0, #41000	; 0xa028
    c198:	e3400001 	movt	r0, #1
    c19c:	e3a02f5b 	mov	r2, #364	; 0x16c
    c1a0:	e1a01009 	mov	r1, r9
    c1a4:	eb000e37 	bl	fa88 <assertion_failed>
    c1a8:	e5962004 	ldr	r2, [r6, #4]
    c1ac:	e5943008 	ldr	r3, [r4, #8]
    c1b0:	e0433002 	sub	r3, r3, r2
    c1b4:	e3530000 	cmp	r3, #0
    c1b8:	ca000016 	bgt	c218 <CTimer::PollKernelTimers()+0x12c>
    c1bc:	e1a01005 	mov	r1, r5
    c1c0:	e1a00007 	mov	r0, r7
    c1c4:	eb003031 	bl	18290 <CPtrList::GetNext(TPtrListElement*)>
    c1c8:	e1a01005 	mov	r1, r5
    c1cc:	e1a0b000 	mov	fp, r0
    c1d0:	e1a00007 	mov	r0, r7
    c1d4:	eb0030e5 	bl	18570 <CPtrList::Remove(TPtrListElement*)>
    c1d8:	e596301c 	ldr	r3, [r6, #28]
    c1dc:	e3530000 	cmp	r3, #0
    c1e0:	0affffd2 	beq	c130 <CTimer::PollKernelTimers()+0x44>
    c1e4:	ebfffcca 	bl	b514 <LeaveCritical>
    c1e8:	e5945004 	ldr	r5, [r4, #4]
    c1ec:	e3550000 	cmp	r5, #0
    c1f0:	1affffd1 	bne	c13c <CTimer::PollKernelTimers()+0x50>
    c1f4:	e30b03cc 	movw	r0, #46028	; 0xb3cc
    c1f8:	e3400001 	movt	r0, #1
    c1fc:	e300217a 	movw	r2, #378	; 0x17a
    c200:	e1a01009 	mov	r1, r9
    c204:	eb000e1f 	bl	fa88 <assertion_failed>
    c208:	eaffffcb 	b	c13c <CTimer::PollKernelTimers()+0x50>
    c20c:	ebfffc93 	bl	b460 <EnterCritical>
    c210:	e25b5000 	subs	r5, fp, #0
    c214:	1affffd6 	bne	c174 <CTimer::PollKernelTimers()+0x88>
    c218:	e596301c 	ldr	r3, [r6, #28]
    c21c:	e3530000 	cmp	r3, #0
    c220:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c224:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c228:	eafffcb9 	b	b514 <LeaveCritical>
    c22c:	e300216b 	movw	r2, #363	; 0x16b
    c230:	e1a01009 	mov	r1, r9
    c234:	e1a0000a 	mov	r0, sl
    c238:	eb000e12 	bl	fa88 <assertion_failed>
    c23c:	eaffffd1 	b	c188 <CTimer::PollKernelTimers()+0x9c>
    c240:	ebfffc86 	bl	b460 <EnterCritical>
    c244:	eaffffad 	b	c100 <CTimer::PollKernelTimers()+0x14>

0000c248 <CTimer::InterruptHandler(void*)>:
    c248:	e92d4010 	push	{r4, lr}
    c24c:	e2504000 	subs	r4, r0, #0
    c250:	0a00003b 	beq	c344 <CTimer::InterruptHandler(void*)+0xfc>
    c254:	e3a03a03 	mov	r3, #12288	; 0x3000
    c258:	e3433f00 	movt	r3, #16128	; 0x3f00
    c25c:	e3021710 	movw	r1, #10000	; 0x2710
    c260:	e5932018 	ldr	r2, [r3, #24]
    c264:	e0822001 	add	r2, r2, r1
    c268:	e5832018 	str	r2, [r3, #24]
    c26c:	e5930004 	ldr	r0, [r3, #4]
    c270:	e1520000 	cmp	r2, r0
    c274:	35932004 	ldrcc	r2, [r3, #4]
    c278:	30821001 	addcc	r1, r2, r1
    c27c:	35831018 	strcc	r1, [r3, #24]
    c280:	e3a03a03 	mov	r3, #12288	; 0x3000
    c284:	e3433f00 	movt	r3, #16128	; 0x3f00
    c288:	e3a02008 	mov	r2, #8
    c28c:	e5832000 	str	r2, [r3]
    c290:	e5940010 	ldr	r0, [r4, #16]
    c294:	e3500000 	cmp	r0, #0
    c298:	1a00001b 	bne	c30c <CTimer::InterruptHandler(void*)+0xc4>
    c29c:	e5943004 	ldr	r3, [r4, #4]
    c2a0:	e308051f 	movw	r0, #34079	; 0x851f
    c2a4:	e34501eb 	movt	r0, #20971	; 0x51eb
    c2a8:	e2833001 	add	r3, r3, #1
    c2ac:	e3a0c064 	mov	ip, #100	; 0x64
    c2b0:	e5843004 	str	r3, [r4, #4]
    c2b4:	e0810093 	umull	r0, r1, r3, r0
    c2b8:	e1a022a1 	lsr	r2, r1, #5
    c2bc:	e062329c 	mls	r2, ip, r2, r3
    c2c0:	e3520000 	cmp	r2, #0
    c2c4:	1a000007 	bne	c2e8 <CTimer::InterruptHandler(void*)+0xa0>
    c2c8:	e5943008 	ldr	r3, [r4, #8]
    c2cc:	e2833001 	add	r3, r3, #1
    c2d0:	e5843008 	str	r3, [r4, #8]
    c2d4:	e594300c 	ldr	r3, [r4, #12]
    c2d8:	e2833001 	add	r3, r3, #1
    c2dc:	e584300c 	str	r3, [r4, #12]
    c2e0:	e3520000 	cmp	r2, #0
    c2e4:	1a000006 	bne	c304 <CTimer::InterruptHandler(void*)+0xbc>
    c2e8:	e1a00004 	mov	r0, r4
    c2ec:	ebffff7e 	bl	c0ec <CTimer::PollKernelTimers()>
    c2f0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c2f4:	e3530000 	cmp	r3, #0
    c2f8:	08bd8010 	popeq	{r4, pc}
    c2fc:	e8bd4010 	pop	{r4, lr}
    c300:	e12fff13 	bx	r3
    c304:	ebfffc82 	bl	b514 <LeaveCritical>
    c308:	eafffff6 	b	c2e8 <CTimer::InterruptHandler(void*)+0xa0>
    c30c:	ebfffc53 	bl	b460 <EnterCritical>
    c310:	e5943004 	ldr	r3, [r4, #4]
    c314:	e308051f 	movw	r0, #34079	; 0x851f
    c318:	e34501eb 	movt	r0, #20971	; 0x51eb
    c31c:	e2833001 	add	r3, r3, #1
    c320:	e3a0c064 	mov	ip, #100	; 0x64
    c324:	e5843004 	str	r3, [r4, #4]
    c328:	e5942010 	ldr	r2, [r4, #16]
    c32c:	e0810093 	umull	r0, r1, r3, r0
    c330:	e1a012a1 	lsr	r1, r1, #5
    c334:	e063319c 	mls	r3, ip, r1, r3
    c338:	e3530000 	cmp	r3, #0
    c33c:	1affffe7 	bne	c2e0 <CTimer::InterruptHandler(void*)+0x98>
    c340:	eaffffe0 	b	c2c8 <CTimer::InterruptHandler(void*)+0x80>
    c344:	e3091ff8 	movw	r1, #40952	; 0x9ff8
    c348:	e3401001 	movt	r1, #1
    c34c:	e3090ad4 	movw	r0, #39636	; 0x9ad4
    c350:	e3400001 	movt	r0, #1
    c354:	e30021b3 	movw	r2, #435	; 0x1b3
    c358:	eb000dca 	bl	fa88 <assertion_failed>
    c35c:	eaffffbc 	b	c254 <CTimer::InterruptHandler(void*)+0xc>

0000c360 <CTimer::InterruptHandler()>:
    c360:	e3a03a03 	mov	r3, #12288	; 0x3000
    c364:	e3433f00 	movt	r3, #16128	; 0x3f00
    c368:	e92d4010 	push	{r4, lr}
    c36c:	e3021710 	movw	r1, #10000	; 0x2710
    c370:	e1a04000 	mov	r4, r0
    c374:	e5932018 	ldr	r2, [r3, #24]
    c378:	e0822001 	add	r2, r2, r1
    c37c:	e5832018 	str	r2, [r3, #24]
    c380:	e5930004 	ldr	r0, [r3, #4]
    c384:	e1520000 	cmp	r2, r0
    c388:	35932004 	ldrcc	r2, [r3, #4]
    c38c:	30821001 	addcc	r1, r2, r1
    c390:	35831018 	strcc	r1, [r3, #24]
    c394:	e3a03a03 	mov	r3, #12288	; 0x3000
    c398:	e3433f00 	movt	r3, #16128	; 0x3f00
    c39c:	e3a02008 	mov	r2, #8
    c3a0:	e5832000 	str	r2, [r3]
    c3a4:	e5940010 	ldr	r0, [r4, #16]
    c3a8:	e3500000 	cmp	r0, #0
    c3ac:	1a00001b 	bne	c420 <CTimer::InterruptHandler()+0xc0>
    c3b0:	e5943004 	ldr	r3, [r4, #4]
    c3b4:	e308051f 	movw	r0, #34079	; 0x851f
    c3b8:	e34501eb 	movt	r0, #20971	; 0x51eb
    c3bc:	e2833001 	add	r3, r3, #1
    c3c0:	e3a0c064 	mov	ip, #100	; 0x64
    c3c4:	e5843004 	str	r3, [r4, #4]
    c3c8:	e0810093 	umull	r0, r1, r3, r0
    c3cc:	e1a022a1 	lsr	r2, r1, #5
    c3d0:	e062329c 	mls	r2, ip, r2, r3
    c3d4:	e3520000 	cmp	r2, #0
    c3d8:	1a000007 	bne	c3fc <CTimer::InterruptHandler()+0x9c>
    c3dc:	e5943008 	ldr	r3, [r4, #8]
    c3e0:	e2833001 	add	r3, r3, #1
    c3e4:	e5843008 	str	r3, [r4, #8]
    c3e8:	e594300c 	ldr	r3, [r4, #12]
    c3ec:	e2833001 	add	r3, r3, #1
    c3f0:	e584300c 	str	r3, [r4, #12]
    c3f4:	e3520000 	cmp	r2, #0
    c3f8:	1a000006 	bne	c418 <CTimer::InterruptHandler()+0xb8>
    c3fc:	e1a00004 	mov	r0, r4
    c400:	ebffff39 	bl	c0ec <CTimer::PollKernelTimers()>
    c404:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c408:	e3530000 	cmp	r3, #0
    c40c:	08bd8010 	popeq	{r4, pc}
    c410:	e8bd4010 	pop	{r4, lr}
    c414:	e12fff13 	bx	r3
    c418:	ebfffc3d 	bl	b514 <LeaveCritical>
    c41c:	eafffff6 	b	c3fc <CTimer::InterruptHandler()+0x9c>
    c420:	ebfffc0e 	bl	b460 <EnterCritical>
    c424:	e5943004 	ldr	r3, [r4, #4]
    c428:	e308051f 	movw	r0, #34079	; 0x851f
    c42c:	e34501eb 	movt	r0, #20971	; 0x51eb
    c430:	e2833001 	add	r3, r3, #1
    c434:	e3a0c064 	mov	ip, #100	; 0x64
    c438:	e5843004 	str	r3, [r4, #4]
    c43c:	e5942010 	ldr	r2, [r4, #16]
    c440:	e0810093 	umull	r0, r1, r3, r0
    c444:	e1a012a1 	lsr	r1, r1, #5
    c448:	e063319c 	mls	r3, ip, r1, r3
    c44c:	e3530000 	cmp	r3, #0
    c450:	1affffe7 	bne	c3f4 <CTimer::InterruptHandler()+0x94>
    c454:	eaffffe0 	b	c3dc <CTimer::InterruptHandler()+0x7c>

0000c458 <CTimer::TuneMsDelay()>:
    c458:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c45c:	e1a06000 	mov	r6, r0
    c460:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    c464:	e24dd00c 	sub	sp, sp, #12
    c468:	e3024710 	movw	r4, #10000	; 0x2710
    c46c:	e5963020 	ldr	r3, [r6, #32]
    c470:	e308551f 	movw	r5, #34079	; 0x851f
    c474:	e34551eb 	movt	r5, #20971	; 0x51eb
    c478:	e5967004 	ldr	r7, [r6, #4]
    c47c:	e0000390 	mul	r0, r0, r3
    c480:	eb001c74 	bl	13658 <DelayLoop>
    c484:	e5963004 	ldr	r3, [r6, #4]
    c488:	e5962020 	ldr	r2, [r6, #32]
    c48c:	e3041dd3 	movw	r1, #19923	; 0x4dd3
    c490:	e3411062 	movt	r1, #4194	; 0x1062
    c494:	e0433007 	sub	r3, r3, r7
    c498:	e734f314 	udiv	r4, r4, r3
    c49c:	e0020492 	mul	r2, r2, r4
    c4a0:	e0823295 	umull	r3, r2, r5, r2
    c4a4:	e1a022a2 	lsr	r2, r2, #5
    c4a8:	e5862020 	str	r2, [r6, #32]
    c4ac:	e2822f7d 	add	r2, r2, #500	; 0x1f4
    c4b0:	e0c32192 	smull	r2, r3, r2, r1
    c4b4:	e1a03343 	asr	r3, r3, #6
    c4b8:	e5863024 	str	r3, [r6, #36]	; 0x24
    c4bc:	e0876594 	umull	r6, r7, r4, r5
    c4c0:	eb000fcc 	bl	103f8 <CLogger::Get()>
    c4c4:	e3a01064 	mov	r1, #100	; 0x64
    c4c8:	e0c32594 	smull	r2, r3, r4, r5
    c4cc:	e3a02003 	mov	r2, #3
    c4d0:	e1a0c2a7 	lsr	ip, r7, #5
    c4d4:	e1a032c3 	asr	r3, r3, #5
    c4d8:	e58d3000 	str	r3, [sp]
    c4dc:	e30a3050 	movw	r3, #41040	; 0xa050
    c4e0:	e3403001 	movt	r3, #1
    c4e4:	e0644c91 	mls	r4, r1, ip, r4
    c4e8:	e3091fc0 	movw	r1, #40896	; 0x9fc0
    c4ec:	e3401001 	movt	r1, #1
    c4f0:	e58d4004 	str	r4, [sp, #4]
    c4f4:	eb00114a 	bl	10a24 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c4f8:	e28dd00c 	add	sp, sp, #12
    c4fc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000c500 <CTimer::RegisterPeriodicHandler(void (*)())>:
    c500:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    c504:	e92d4070 	push	{r4, r5, r6, lr}
    c508:	e1a05000 	mov	r5, r0
    c50c:	e1a04001 	mov	r4, r1
    c510:	e3530000 	cmp	r3, #0
    c514:	0a000005 	beq	c530 <CTimer::RegisterPeriodicHandler(void (*)())+0x30>
    c518:	e3091ff8 	movw	r1, #40952	; 0x9ff8
    c51c:	e3401001 	movt	r1, #1
    c520:	e30a00d0 	movw	r0, #41168	; 0xa0d0
    c524:	e3400001 	movt	r0, #1
    c528:	e30021c9 	movw	r2, #457	; 0x1c9
    c52c:	eb000d55 	bl	fa88 <assertion_failed>
    c530:	e3540000 	cmp	r4, #0
    c534:	e5854028 	str	r4, [r5, #40]	; 0x28
    c538:	18bd8070 	popne	{r4, r5, r6, pc}
    c53c:	e3091ff8 	movw	r1, #40952	; 0x9ff8
    c540:	e3401001 	movt	r1, #1
    c544:	e30a00e8 	movw	r0, #41192	; 0xa0e8
    c548:	e3400001 	movt	r0, #1
    c54c:	e30021cb 	movw	r2, #459	; 0x1cb
    c550:	e8bd4070 	pop	{r4, r5, r6, lr}
    c554:	ea000d4b 	b	fa88 <assertion_failed>

0000c558 <CTimer::SimpleMsDelay(unsigned int)>:
    c558:	e2503000 	subs	r3, r0, #0
    c55c:	012fff1e 	bxeq	lr
    c560:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    c564:	e0000390 	mul	r0, r0, r3
    c568:	e3500000 	cmp	r0, #0
    c56c:	012fff1e 	bxeq	lr
    c570:	e3a03a03 	mov	r3, #12288	; 0x3000
    c574:	e3433f00 	movt	r3, #16128	; 0x3f00
    c578:	e2800001 	add	r0, r0, #1
    c57c:	e1a01003 	mov	r1, r3
    c580:	e5932004 	ldr	r2, [r3, #4]
    c584:	e5913004 	ldr	r3, [r1, #4]
    c588:	e0433002 	sub	r3, r3, r2
    c58c:	e1500003 	cmp	r0, r3
    c590:	8afffffb 	bhi	c584 <CTimer::SimpleMsDelay(unsigned int)+0x2c>
    c594:	e12fff1e 	bx	lr

0000c598 <CTimer::SimpleusDelay(unsigned int)>:
    c598:	e3500000 	cmp	r0, #0
    c59c:	012fff1e 	bxeq	lr
    c5a0:	e3a03a03 	mov	r3, #12288	; 0x3000
    c5a4:	e3433f00 	movt	r3, #16128	; 0x3f00
    c5a8:	e2800001 	add	r0, r0, #1
    c5ac:	e1a01003 	mov	r1, r3
    c5b0:	e5932004 	ldr	r2, [r3, #4]
    c5b4:	e5913004 	ldr	r3, [r1, #4]
    c5b8:	e0433002 	sub	r3, r3, r2
    c5bc:	e1500003 	cmp	r0, r3
    c5c0:	8afffffb 	bhi	c5b4 <CTimer::SimpleusDelay(unsigned int)+0x1c>
    c5c4:	e12fff1e 	bx	lr

0000c5c8 <CTimer::IsLeapYear(unsigned int)>:
    c5c8:	e308251f 	movw	r2, #34079	; 0x851f
    c5cc:	e34521eb 	movt	r2, #20971	; 0x51eb
    c5d0:	e3a01064 	mov	r1, #100	; 0x64
    c5d4:	e083c092 	umull	ip, r3, r2, r0
    c5d8:	e1a032a3 	lsr	r3, r3, #5
    c5dc:	e0630391 	mls	r3, r1, r3, r0
    c5e0:	e3530000 	cmp	r3, #0
    c5e4:	0a000003 	beq	c5f8 <CTimer::IsLeapYear(unsigned int)+0x30>
    c5e8:	e3100003 	tst	r0, #3
    c5ec:	03a00001 	moveq	r0, #1
    c5f0:	13a00000 	movne	r0, #0
    c5f4:	e12fff1e 	bx	lr
    c5f8:	e92d0030 	push	{r4, r5}
    c5fc:	e0854290 	umull	r4, r5, r0, r2
    c600:	e3a02e19 	mov	r2, #400	; 0x190
    c604:	e1a033a5 	lsr	r3, r5, #7
    c608:	e8bd0030 	pop	{r4, r5}
    c60c:	e0600392 	mls	r0, r2, r3, r0
    c610:	e16f0f10 	clz	r0, r0
    c614:	e1a002a0 	lsr	r0, r0, #5
    c618:	e12fff1e 	bx	lr

0000c61c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    c61c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    c620:	e3500001 	cmp	r0, #1
    c624:	0a000004 	beq	c63c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x20>
    c628:	e3093fc0 	movw	r3, #40896	; 0x9fc0
    c62c:	e3403001 	movt	r3, #1
    c630:	e0833100 	add	r3, r3, r0, lsl #2
    c634:	e5930008 	ldr	r0, [r3, #8]
    c638:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    c63c:	e308251f 	movw	r2, #34079	; 0x851f
    c640:	e34521eb 	movt	r2, #20971	; 0x51eb
    c644:	e3a0e064 	mov	lr, #100	; 0x64
    c648:	e0832291 	umull	r2, r3, r1, r2
    c64c:	e1a0c2a3 	lsr	ip, r3, #5
    c650:	e06c1c9e 	mls	ip, lr, ip, r1
    c654:	e35c0000 	cmp	ip, #0
    c658:	0a000006 	beq	c678 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x5c>
    c65c:	e3110003 	tst	r1, #3
    c660:	03a01001 	moveq	r1, #1
    c664:	13a01000 	movne	r1, #0
    c668:	e3510000 	cmp	r1, #0
    c66c:	0affffed 	beq	c628 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0xc>
    c670:	e3a0001d 	mov	r0, #29
    c674:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    c678:	e1a033a3 	lsr	r3, r3, #7
    c67c:	e3a02e19 	mov	r2, #400	; 0x190
    c680:	e0611392 	mls	r1, r2, r3, r1
    c684:	e16f1f11 	clz	r1, r1
    c688:	e1a012a1 	lsr	r1, r1, #5
    c68c:	eafffff5 	b	c668 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>

0000c690 <CTimer::Get()>:
    c690:	e92d4010 	push	{r4, lr}
    c694:	e30c47d4 	movw	r4, #51156	; 0xc7d4
    c698:	e3404001 	movt	r4, #1
    c69c:	e5940000 	ldr	r0, [r4]
    c6a0:	e3500000 	cmp	r0, #0
    c6a4:	18bd8010 	popne	{r4, pc}
    c6a8:	e3002207 	movw	r2, #519	; 0x207
    c6ac:	e3091ff8 	movw	r1, #40952	; 0x9ff8
    c6b0:	e3401001 	movt	r1, #1
    c6b4:	e3090a84 	movw	r0, #39556	; 0x9a84
    c6b8:	e3400001 	movt	r0, #1
    c6bc:	eb000cf1 	bl	fa88 <assertion_failed>
    c6c0:	e5940000 	ldr	r0, [r4]
    c6c4:	e8bd8010 	pop	{r4, pc}

0000c6c8 <memset>:
    c6c8:	e3520000 	cmp	r2, #0
    c6cc:	012fff1e 	bxeq	lr
    c6d0:	e2003007 	and	r3, r0, #7
    c6d4:	e92d4030 	push	{r4, r5, lr}
    c6d8:	e2633000 	rsb	r3, r3, #0
    c6dc:	e203300f 	and	r3, r3, #15
    c6e0:	e242e001 	sub	lr, r2, #1
    c6e4:	e283c00f 	add	ip, r3, #15
    c6e8:	e6af1071 	sxtb	r1, r1
    c6ec:	e35c0011 	cmp	ip, #17
    c6f0:	33a0c011 	movcc	ip, #17
    c6f4:	e15e000c 	cmp	lr, ip
    c6f8:	3a00005e 	bcc	c878 <memset+0x1b0>
    c6fc:	e3530000 	cmp	r3, #0
    c700:	0a00005e 	beq	c880 <memset+0x1b8>
    c704:	e5c01000 	strb	r1, [r0]
    c708:	e3530001 	cmp	r3, #1
    c70c:	e280c001 	add	ip, r0, #1
    c710:	e242e002 	sub	lr, r2, #2
    c714:	0a000042 	beq	c824 <memset+0x15c>
    c718:	e5c01001 	strb	r1, [r0, #1]
    c71c:	e3530002 	cmp	r3, #2
    c720:	e280c002 	add	ip, r0, #2
    c724:	e242e003 	sub	lr, r2, #3
    c728:	0a00003d 	beq	c824 <memset+0x15c>
    c72c:	e5c01002 	strb	r1, [r0, #2]
    c730:	e3530003 	cmp	r3, #3
    c734:	e280c003 	add	ip, r0, #3
    c738:	e242e004 	sub	lr, r2, #4
    c73c:	0a000038 	beq	c824 <memset+0x15c>
    c740:	e5c01003 	strb	r1, [r0, #3]
    c744:	e3530004 	cmp	r3, #4
    c748:	e280c004 	add	ip, r0, #4
    c74c:	e242e005 	sub	lr, r2, #5
    c750:	0a000033 	beq	c824 <memset+0x15c>
    c754:	e5c01004 	strb	r1, [r0, #4]
    c758:	e3530005 	cmp	r3, #5
    c75c:	e280c005 	add	ip, r0, #5
    c760:	e242e006 	sub	lr, r2, #6
    c764:	0a00002e 	beq	c824 <memset+0x15c>
    c768:	e5c01005 	strb	r1, [r0, #5]
    c76c:	e3530006 	cmp	r3, #6
    c770:	e280c006 	add	ip, r0, #6
    c774:	e242e007 	sub	lr, r2, #7
    c778:	0a000029 	beq	c824 <memset+0x15c>
    c77c:	e5c01006 	strb	r1, [r0, #6]
    c780:	e3530007 	cmp	r3, #7
    c784:	e280c007 	add	ip, r0, #7
    c788:	e242e008 	sub	lr, r2, #8
    c78c:	0a000024 	beq	c824 <memset+0x15c>
    c790:	e5c01007 	strb	r1, [r0, #7]
    c794:	e3530008 	cmp	r3, #8
    c798:	e280c008 	add	ip, r0, #8
    c79c:	e242e009 	sub	lr, r2, #9
    c7a0:	0a00001f 	beq	c824 <memset+0x15c>
    c7a4:	e5c01008 	strb	r1, [r0, #8]
    c7a8:	e3530009 	cmp	r3, #9
    c7ac:	e280c009 	add	ip, r0, #9
    c7b0:	e242e00a 	sub	lr, r2, #10
    c7b4:	0a00001a 	beq	c824 <memset+0x15c>
    c7b8:	e5c01009 	strb	r1, [r0, #9]
    c7bc:	e353000a 	cmp	r3, #10
    c7c0:	e280c00a 	add	ip, r0, #10
    c7c4:	e242e00b 	sub	lr, r2, #11
    c7c8:	0a000015 	beq	c824 <memset+0x15c>
    c7cc:	e5c0100a 	strb	r1, [r0, #10]
    c7d0:	e353000b 	cmp	r3, #11
    c7d4:	e280c00b 	add	ip, r0, #11
    c7d8:	e242e00c 	sub	lr, r2, #12
    c7dc:	0a000010 	beq	c824 <memset+0x15c>
    c7e0:	e5c0100b 	strb	r1, [r0, #11]
    c7e4:	e353000c 	cmp	r3, #12
    c7e8:	e280c00c 	add	ip, r0, #12
    c7ec:	e242e00d 	sub	lr, r2, #13
    c7f0:	0a00000b 	beq	c824 <memset+0x15c>
    c7f4:	e5c0100c 	strb	r1, [r0, #12]
    c7f8:	e353000d 	cmp	r3, #13
    c7fc:	e280c00d 	add	ip, r0, #13
    c800:	e242e00e 	sub	lr, r2, #14
    c804:	0a000006 	beq	c824 <memset+0x15c>
    c808:	e5c0100d 	strb	r1, [r0, #13]
    c80c:	e353000f 	cmp	r3, #15
    c810:	e280c00e 	add	ip, r0, #14
    c814:	e242e00f 	sub	lr, r2, #15
    c818:	0280c00f 	addeq	ip, r0, #15
    c81c:	0242e010 	subeq	lr, r2, #16
    c820:	05c0100e 	strbeq	r1, [r0, #14]
    c824:	e0422003 	sub	r2, r2, r3
    c828:	eee01b90 	vdup.8	q8, r1
    c82c:	e0803003 	add	r3, r0, r3
    c830:	e1a05222 	lsr	r5, r2, #4
    c834:	e3a04000 	mov	r4, #0
    c838:	e2844001 	add	r4, r4, #1
    c83c:	f4430adf 	vst1.64	{d16-d17}, [r3 :64]
    c840:	e1550004 	cmp	r5, r4
    c844:	e2833010 	add	r3, r3, #16
    c848:	8afffffa 	bhi	c838 <memset+0x170>
    c84c:	e3c2400f 	bic	r4, r2, #15
    c850:	e1520004 	cmp	r2, r4
    c854:	e08c3004 	add	r3, ip, r4
    c858:	e04ee004 	sub	lr, lr, r4
    c85c:	08bd8030 	popeq	{r4, r5, pc}
    c860:	e28ee001 	add	lr, lr, #1
    c864:	e083e00e 	add	lr, r3, lr
    c868:	e4c31001 	strb	r1, [r3], #1
    c86c:	e153000e 	cmp	r3, lr
    c870:	1afffffc 	bne	c868 <memset+0x1a0>
    c874:	e8bd8030 	pop	{r4, r5, pc}
    c878:	e1a03000 	mov	r3, r0
    c87c:	eafffff7 	b	c860 <memset+0x198>
    c880:	e1a0c000 	mov	ip, r0
    c884:	eaffffe6 	b	c824 <memset+0x15c>

0000c888 <memcmp>:
    c888:	e3520000 	cmp	r2, #0
    c88c:	e242c001 	sub	ip, r2, #1
    c890:	0a00000d 	beq	c8cc <memcmp+0x44>
    c894:	e5d02000 	ldrb	r2, [r0]
    c898:	e5d13000 	ldrb	r3, [r1]
    c89c:	e1520003 	cmp	r2, r3
    c8a0:	8a00000b 	bhi	c8d4 <memcmp+0x4c>
    c8a4:	3a00000c 	bcc	c8dc <memcmp+0x54>
    c8a8:	e081c00c 	add	ip, r1, ip
    c8ac:	ea000004 	b	c8c4 <memcmp+0x3c>
    c8b0:	e5f02001 	ldrb	r2, [r0, #1]!
    c8b4:	e5f13001 	ldrb	r3, [r1, #1]!
    c8b8:	e1520003 	cmp	r2, r3
    c8bc:	8a000004 	bhi	c8d4 <memcmp+0x4c>
    c8c0:	3a000005 	bcc	c8dc <memcmp+0x54>
    c8c4:	e151000c 	cmp	r1, ip
    c8c8:	1afffff8 	bne	c8b0 <memcmp+0x28>
    c8cc:	e3a00000 	mov	r0, #0
    c8d0:	e12fff1e 	bx	lr
    c8d4:	e3a00001 	mov	r0, #1
    c8d8:	e12fff1e 	bx	lr
    c8dc:	e3e00000 	mvn	r0, #0
    c8e0:	e12fff1e 	bx	lr

0000c8e4 <strlen>:
    c8e4:	e1d010d0 	ldrsb	r1, [r0]
    c8e8:	e2803001 	add	r3, r0, #1
    c8ec:	e3510000 	cmp	r1, #0
    c8f0:	0a000003 	beq	c904 <strlen+0x20>
    c8f4:	e0431000 	sub	r1, r3, r0
    c8f8:	e0d320d1 	ldrsb	r2, [r3], #1
    c8fc:	e3520000 	cmp	r2, #0
    c900:	1afffffb 	bne	c8f4 <strlen+0x10>
    c904:	e1a00001 	mov	r0, r1
    c908:	e12fff1e 	bx	lr

0000c90c <strcmp>:
    c90c:	e1d030d0 	ldrsb	r3, [r0]
    c910:	e1d120d0 	ldrsb	r2, [r1]
    c914:	e3530000 	cmp	r3, #0
    c918:	0a00000e 	beq	c958 <strcmp+0x4c>
    c91c:	e3520000 	cmp	r2, #0
    c920:	0a00000c 	beq	c958 <strcmp+0x4c>
    c924:	e1520003 	cmp	r2, r3
    c928:	ba00000f 	blt	c96c <strcmp+0x60>
    c92c:	da000005 	ble	c948 <strcmp+0x3c>
    c930:	ea00000f 	b	c974 <strcmp+0x68>
    c934:	e3520000 	cmp	r2, #0
    c938:	0a000006 	beq	c958 <strcmp+0x4c>
    c93c:	e1530002 	cmp	r3, r2
    c940:	ca000009 	bgt	c96c <strcmp+0x60>
    c944:	ba00000a 	blt	c974 <strcmp+0x68>
    c948:	e1f030d1 	ldrsb	r3, [r0, #1]!
    c94c:	e1f120d1 	ldrsb	r2, [r1, #1]!
    c950:	e3530000 	cmp	r3, #0
    c954:	1afffff6 	bne	c934 <strcmp+0x28>
    c958:	e1530002 	cmp	r3, r2
    c95c:	ca000002 	bgt	c96c <strcmp+0x60>
    c960:	b3e00000 	mvnlt	r0, #0
    c964:	a3a00000 	movge	r0, #0
    c968:	e12fff1e 	bx	lr
    c96c:	e3a00001 	mov	r0, #1
    c970:	e12fff1e 	bx	lr
    c974:	e3e00000 	mvn	r0, #0
    c978:	e12fff1e 	bx	lr

0000c97c <strcasecmp>:
    c97c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    c980:	e2400001 	sub	r0, r0, #1
    c984:	e2411001 	sub	r1, r1, #1
    c988:	ea000006 	b	c9a8 <strcasecmp+0x2c>
    c98c:	e35e0019 	cmp	lr, #25
    c990:	9242c020 	subls	ip, r2, #32
    c994:	e35c0000 	cmp	ip, #0
    c998:	0a00000b 	beq	c9cc <strcasecmp+0x50>
    c99c:	e153000c 	cmp	r3, ip
    c9a0:	ca000010 	bgt	c9e8 <strcasecmp+0x6c>
    c9a4:	ba000011 	blt	c9f0 <strcasecmp+0x74>
    c9a8:	e1f030d1 	ldrsb	r3, [r0, #1]!
    c9ac:	e2432061 	sub	r2, r3, #97	; 0x61
    c9b0:	e3520019 	cmp	r2, #25
    c9b4:	e1f120d1 	ldrsb	r2, [r1, #1]!
    c9b8:	92433020 	subls	r3, r3, #32
    c9bc:	e3530000 	cmp	r3, #0
    c9c0:	e1a0c002 	mov	ip, r2
    c9c4:	e242e061 	sub	lr, r2, #97	; 0x61
    c9c8:	1affffef 	bne	c98c <strcasecmp+0x10>
    c9cc:	e35e0019 	cmp	lr, #25
    c9d0:	92422020 	subls	r2, r2, #32
    c9d4:	e1520003 	cmp	r2, r3
    c9d8:	ba000002 	blt	c9e8 <strcasecmp+0x6c>
    c9dc:	c3e00000 	mvngt	r0, #0
    c9e0:	d3a00000 	movle	r0, #0
    c9e4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    c9e8:	e3a00001 	mov	r0, #1
    c9ec:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    c9f0:	e3e00000 	mvn	r0, #0
    c9f4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000c9f8 <strncmp>:
    c9f8:	e3520000 	cmp	r2, #0
    c9fc:	0a000016 	beq	ca5c <strncmp+0x64>
    ca00:	e1d030d0 	ldrsb	r3, [r0]
    ca04:	e1d1c0d0 	ldrsb	ip, [r1]
    ca08:	e3530000 	cmp	r3, #0
    ca0c:	0a000015 	beq	ca68 <strncmp+0x70>
    ca10:	e35c0000 	cmp	ip, #0
    ca14:	0a000013 	beq	ca68 <strncmp+0x70>
    ca18:	e153000c 	cmp	r3, ip
    ca1c:	ca000016 	bgt	ca7c <strncmp+0x84>
    ca20:	ba000017 	blt	ca84 <strncmp+0x8c>
    ca24:	e2422001 	sub	r2, r2, #1
    ca28:	e0812002 	add	r2, r1, r2
    ca2c:	ea000008 	b	ca54 <strncmp+0x5c>
    ca30:	e1f030d1 	ldrsb	r3, [r0, #1]!
    ca34:	e3530000 	cmp	r3, #0
    ca38:	0a000009 	beq	ca64 <strncmp+0x6c>
    ca3c:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
    ca40:	e35c0000 	cmp	ip, #0
    ca44:	0a000007 	beq	ca68 <strncmp+0x70>
    ca48:	e153000c 	cmp	r3, ip
    ca4c:	ca00000a 	bgt	ca7c <strncmp+0x84>
    ca50:	ba00000b 	blt	ca84 <strncmp+0x8c>
    ca54:	e1520001 	cmp	r2, r1
    ca58:	1afffff4 	bne	ca30 <strncmp+0x38>
    ca5c:	e3a00000 	mov	r0, #0
    ca60:	e12fff1e 	bx	lr
    ca64:	e1d1c0d1 	ldrsb	ip, [r1, #1]
    ca68:	e153000c 	cmp	r3, ip
    ca6c:	ca000002 	bgt	ca7c <strncmp+0x84>
    ca70:	b3e00000 	mvnlt	r0, #0
    ca74:	a3a00000 	movge	r0, #0
    ca78:	e12fff1e 	bx	lr
    ca7c:	e3a00001 	mov	r0, #1
    ca80:	e12fff1e 	bx	lr
    ca84:	e3e00000 	mvn	r0, #0
    ca88:	e12fff1e 	bx	lr

0000ca8c <strcpy>:
    ca8c:	e1d130d0 	ldrsb	r3, [r1]
    ca90:	e1a02000 	mov	r2, r0
    ca94:	e3530000 	cmp	r3, #0
    ca98:	0a000003 	beq	caac <strcpy+0x20>
    ca9c:	e4c23001 	strb	r3, [r2], #1
    caa0:	e1f130d1 	ldrsb	r3, [r1, #1]!
    caa4:	e3530000 	cmp	r3, #0
    caa8:	1afffffb 	bne	ca9c <strcpy+0x10>
    caac:	e3a03000 	mov	r3, #0
    cab0:	e5c23000 	strb	r3, [r2]
    cab4:	e12fff1e 	bx	lr

0000cab8 <strncpy>:
    cab8:	e3520000 	cmp	r2, #0
    cabc:	012fff1e 	bxeq	lr
    cac0:	e1d1c0d0 	ldrsb	ip, [r1]
    cac4:	e35c0000 	cmp	ip, #0
    cac8:	0a00000a 	beq	caf8 <strncpy+0x40>
    cacc:	e0802002 	add	r2, r0, r2
    cad0:	e1a03000 	mov	r3, r0
    cad4:	e4c3c001 	strb	ip, [r3], #1
    cad8:	e1530002 	cmp	r3, r2
    cadc:	012fff1e 	bxeq	lr
    cae0:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
    cae4:	e35c0000 	cmp	ip, #0
    cae8:	1afffff9 	bne	cad4 <strncpy+0x1c>
    caec:	e3a02000 	mov	r2, #0
    caf0:	e5c32000 	strb	r2, [r3]
    caf4:	e12fff1e 	bx	lr
    caf8:	e1a03000 	mov	r3, r0
    cafc:	eafffffa 	b	caec <strncpy+0x34>

0000cb00 <strcat>:
    cb00:	e1d030d0 	ldrsb	r3, [r0]
    cb04:	e3530000 	cmp	r3, #0
    cb08:	e1a03000 	mov	r3, r0
    cb0c:	0a000002 	beq	cb1c <strcat+0x1c>
    cb10:	e1f320d1 	ldrsb	r2, [r3, #1]!
    cb14:	e3520000 	cmp	r2, #0
    cb18:	1afffffc 	bne	cb10 <strcat+0x10>
    cb1c:	e1d120d0 	ldrsb	r2, [r1]
    cb20:	e3520000 	cmp	r2, #0
    cb24:	0a000003 	beq	cb38 <strcat+0x38>
    cb28:	e4c32001 	strb	r2, [r3], #1
    cb2c:	e1f120d1 	ldrsb	r2, [r1, #1]!
    cb30:	e3520000 	cmp	r2, #0
    cb34:	1afffffb 	bne	cb28 <strcat+0x28>
    cb38:	e3a02000 	mov	r2, #0
    cb3c:	e5c32000 	strb	r2, [r3]
    cb40:	e12fff1e 	bx	lr

0000cb44 <strchr>:
    cb44:	e1d020d0 	ldrsb	r2, [r0]
    cb48:	e3520000 	cmp	r2, #0
    cb4c:	0a000009 	beq	cb78 <strchr+0x34>
    cb50:	e1510002 	cmp	r1, r2
    cb54:	1a000002 	bne	cb64 <strchr+0x20>
    cb58:	e12fff1e 	bx	lr
    cb5c:	e1530001 	cmp	r3, r1
    cb60:	012fff1e 	bxeq	lr
    cb64:	e1f030d1 	ldrsb	r3, [r0, #1]!
    cb68:	e3530000 	cmp	r3, #0
    cb6c:	1afffffa 	bne	cb5c <strchr+0x18>
    cb70:	e1a00003 	mov	r0, r3
    cb74:	e12fff1e 	bx	lr
    cb78:	e1a00002 	mov	r0, r2
    cb7c:	e12fff1e 	bx	lr

0000cb80 <strtok_r>:
    cb80:	e92d4030 	push	{r4, r5, lr}
    cb84:	e2505000 	subs	r5, r0, #0
    cb88:	0a000028 	beq	cc30 <strtok_r+0xb0>
    cb8c:	e1d530d0 	ldrsb	r3, [r5]
    cb90:	e3530000 	cmp	r3, #0
    cb94:	0a00002a 	beq	cc44 <strtok_r+0xc4>
    cb98:	e1d140d0 	ldrsb	r4, [r1]
    cb9c:	e1a00005 	mov	r0, r5
    cba0:	e3540000 	cmp	r4, #0
    cba4:	e0d5c0d1 	ldrsb	ip, [r5], #1
    cba8:	0a000008 	beq	cbd0 <strtok_r+0x50>
    cbac:	e15c0004 	cmp	ip, r4
    cbb0:	0afffff9 	beq	cb9c <strtok_r+0x1c>
    cbb4:	e1a0e001 	mov	lr, r1
    cbb8:	ea000001 	b	cbc4 <strtok_r+0x44>
    cbbc:	e15c0003 	cmp	ip, r3
    cbc0:	0afffff5 	beq	cb9c <strtok_r+0x1c>
    cbc4:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    cbc8:	e3530000 	cmp	r3, #0
    cbcc:	1afffffa 	bne	cbbc <strtok_r+0x3c>
    cbd0:	e35c0000 	cmp	ip, #0
    cbd4:	0a00001a 	beq	cc44 <strtok_r+0xc4>
    cbd8:	e1a05000 	mov	r5, r0
    cbdc:	e3540000 	cmp	r4, #0
    cbe0:	0a000008 	beq	cc08 <strtok_r+0x88>
    cbe4:	e15c0004 	cmp	ip, r4
    cbe8:	0a00000b 	beq	cc1c <strtok_r+0x9c>
    cbec:	e1a0e001 	mov	lr, r1
    cbf0:	ea000001 	b	cbfc <strtok_r+0x7c>
    cbf4:	e153000c 	cmp	r3, ip
    cbf8:	0a000007 	beq	cc1c <strtok_r+0x9c>
    cbfc:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    cc00:	e3530000 	cmp	r3, #0
    cc04:	1afffffa 	bne	cbf4 <strtok_r+0x74>
    cc08:	e1f5c0d1 	ldrsb	ip, [r5, #1]!
    cc0c:	e35c0000 	cmp	ip, #0
    cc10:	1afffff1 	bne	cbdc <strtok_r+0x5c>
    cc14:	e5825000 	str	r5, [r2]
    cc18:	e8bd8030 	pop	{r4, r5, pc}
    cc1c:	e3a03000 	mov	r3, #0
    cc20:	e2855001 	add	r5, r5, #1
    cc24:	e5453001 	strb	r3, [r5, #-1]
    cc28:	e5825000 	str	r5, [r2]
    cc2c:	e8bd8030 	pop	{r4, r5, pc}
    cc30:	e5925000 	ldr	r5, [r2]
    cc34:	e3550000 	cmp	r5, #0
    cc38:	1affffd3 	bne	cb8c <strtok_r+0xc>
    cc3c:	e1a00005 	mov	r0, r5
    cc40:	e8bd8030 	pop	{r4, r5, pc}
    cc44:	e3a05000 	mov	r5, #0
    cc48:	e5825000 	str	r5, [r2]
    cc4c:	e1a00005 	mov	r0, r5
    cc50:	e8bd8030 	pop	{r4, r5, pc}

0000cc54 <strtoul>:
    cc54:	e3510000 	cmp	r1, #0
    cc58:	e2423002 	sub	r3, r2, #2
    cc5c:	e92d4070 	push	{r4, r5, r6, lr}
    cc60:	e3c2e010 	bic	lr, r2, #16
    cc64:	15810000 	strne	r0, [r1]
    cc68:	e3520000 	cmp	r2, #0
    cc6c:	13530022 	cmpne	r3, #34	; 0x22
    cc70:	83a05001 	movhi	r5, #1
    cc74:	93a05000 	movls	r5, #0
    cc78:	8a000031 	bhi	cd44 <strtoul+0xf0>
    cc7c:	e1d030d0 	ldrsb	r3, [r0]
    cc80:	e1a04000 	mov	r4, r0
    cc84:	e2800001 	add	r0, r0, #1
    cc88:	e243c009 	sub	ip, r3, #9
    cc8c:	e3530020 	cmp	r3, #32
    cc90:	e6efc07c 	uxtb	ip, ip
    cc94:	0afffff8 	beq	cc7c <strtoul+0x28>
    cc98:	e35c0004 	cmp	ip, #4
    cc9c:	9afffff6 	bls	cc7c <strtoul+0x28>
    cca0:	e353002b 	cmp	r3, #43	; 0x2b
    cca4:	0a000028 	beq	cd4c <strtoul+0xf8>
    cca8:	e353002d 	cmp	r3, #45	; 0x2d
    ccac:	03a05001 	moveq	r5, #1
    ccb0:	01d430d1 	ldrsbeq	r3, [r4, #1]
    ccb4:	01a04000 	moveq	r4, r0
    ccb8:	e3530030 	cmp	r3, #48	; 0x30
    ccbc:	0a000026 	beq	cd5c <strtoul+0x108>
    ccc0:	e3520000 	cmp	r2, #0
    ccc4:	03a0200a 	moveq	r2, #10
    ccc8:	e353002f 	cmp	r3, #47	; 0x2f
    cccc:	e1a0c003 	mov	ip, r3
    ccd0:	da000037 	ble	cdb4 <strtoul+0x160>
    ccd4:	e3a06001 	mov	r6, #1
    ccd8:	e3a0e000 	mov	lr, #0
    ccdc:	ea000008 	b	cd04 <strtoul+0xb0>
    cce0:	e020c29e 	mla	r0, lr, r2, ip
    cce4:	e3a06000 	mov	r6, #0
    cce8:	e150000e 	cmp	r0, lr
    ccec:	3a000025 	bcc	cd88 <strtoul+0x134>
    ccf0:	e1f4c0d1 	ldrsb	ip, [r4, #1]!
    ccf4:	e1a0e000 	mov	lr, r0
    ccf8:	e35c002f 	cmp	ip, #47	; 0x2f
    ccfc:	e1a0300c 	mov	r3, ip
    cd00:	da00000a 	ble	cd30 <strtoul+0xdc>
    cd04:	e2433061 	sub	r3, r3, #97	; 0x61
    cd08:	e3530019 	cmp	r3, #25
    cd0c:	924cc020 	subls	ip, ip, #32
    cd10:	e35c0040 	cmp	ip, #64	; 0x40
    cd14:	c24cc007 	subgt	ip, ip, #7
    cd18:	e24cc030 	sub	ip, ip, #48	; 0x30
    cd1c:	e15c0002 	cmp	ip, r2
    cd20:	baffffee 	blt	cce0 <strtoul+0x8c>
    cd24:	e2266001 	eor	r6, r6, #1
    cd28:	e1a0000e 	mov	r0, lr
    cd2c:	e0055006 	and	r5, r5, r6
    cd30:	e3510000 	cmp	r1, #0
    cd34:	15814000 	strne	r4, [r1]
    cd38:	e3550000 	cmp	r5, #0
    cd3c:	12600000 	rsbne	r0, r0, #0
    cd40:	e8bd8070 	pop	{r4, r5, r6, pc}
    cd44:	e3a00000 	mov	r0, #0
    cd48:	e8bd8070 	pop	{r4, r5, r6, pc}
    cd4c:	e1d430d1 	ldrsb	r3, [r4, #1]
    cd50:	e1a04000 	mov	r4, r0
    cd54:	e3530030 	cmp	r3, #48	; 0x30
    cd58:	1affffd8 	bne	ccc0 <strtoul+0x6c>
    cd5c:	e1d430d1 	ldrsb	r3, [r4, #1]
    cd60:	e284c001 	add	ip, r4, #1
    cd64:	e3c30020 	bic	r0, r3, #32
    cd68:	e3500058 	cmp	r0, #88	; 0x58
    cd6c:	1a00000a 	bne	cd9c <strtoul+0x148>
    cd70:	e35e0000 	cmp	lr, #0
    cd74:	1afffff2 	bne	cd44 <strtoul+0xf0>
    cd78:	e1d430d2 	ldrsb	r3, [r4, #2]
    cd7c:	e3a02010 	mov	r2, #16
    cd80:	e2844002 	add	r4, r4, #2
    cd84:	eaffffcf 	b	ccc8 <strtoul+0x74>
    cd88:	e1510006 	cmp	r1, r6
    cd8c:	0a000006 	beq	cdac <strtoul+0x158>
    cd90:	e5814000 	str	r4, [r1]
    cd94:	e3e00000 	mvn	r0, #0
    cd98:	e8bd8070 	pop	{r4, r5, r6, pc}
    cd9c:	e3520000 	cmp	r2, #0
    cda0:	e1a0400c 	mov	r4, ip
    cda4:	03a02008 	moveq	r2, #8
    cda8:	eaffffc6 	b	ccc8 <strtoul+0x74>
    cdac:	e3e00000 	mvn	r0, #0
    cdb0:	e8bd8070 	pop	{r4, r5, r6, pc}
    cdb4:	e3510000 	cmp	r1, #0
    cdb8:	0affffe1 	beq	cd44 <strtoul+0xf0>
    cdbc:	e3a00000 	mov	r0, #0
    cdc0:	e5814000 	str	r4, [r1]
    cdc4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000cdc8 <char2int>:
    cdc8:	e12fff1e 	bx	lr

0000cdcc <memcpy>:
    cdcc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    cdd0:	e352007f 	cmp	r2, #127	; 0x7f
    cdd4:	9a00000b 	bls	ce08 <memcpy+0x3c>
    cdd8:	e3110003 	tst	r1, #3
    cddc:	1a000009 	bne	ce08 <memcpy+0x3c>
    cde0:	e3100003 	tst	r0, #3
    cde4:	1a000007 	bne	ce08 <memcpy+0x3c>
    cde8:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    cdec:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    cdf0:	e2422020 	sub	r2, r2, #32
    cdf4:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    cdf8:	f5d1f040 	pld	[r1, #64]	; 0x40
    cdfc:	e352001f 	cmp	r2, #31
    ce00:	8afffff9 	bhi	cdec <memcpy+0x20>
    ce04:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    ce08:	e3520000 	cmp	r2, #0
    ce0c:	0a000003 	beq	ce20 <memcpy+0x54>
    ce10:	e4d13001 	ldrb	r3, [r1], #1
    ce14:	e2522001 	subs	r2, r2, #1
    ce18:	e4c03001 	strb	r3, [r0], #1
    ce1c:	1afffffb 	bne	ce10 <memcpy+0x44>
    ce20:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    ce24:	e12fff1e 	bx	lr

0000ce28 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    ce28:	e3a01000 	mov	r1, #0
    ce2c:	e3a0c00a 	mov	ip, #10
    ce30:	ea00000a 	b	ce60 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x38>
    ce34:	e3520009 	cmp	r2, #9
    ce38:	8a00000f 	bhi	ce7c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
    ce3c:	e023319c 	mla	r3, ip, r1, r3
    ce40:	e3730001 	cmn	r3, #1
    ce44:	13a02000 	movne	r2, #0
    ce48:	03a02001 	moveq	r2, #1
    ce4c:	e1510003 	cmp	r1, r3
    ce50:	83822001 	orrhi	r2, r2, #1
    ce54:	e1a01003 	mov	r1, r3
    ce58:	e3520000 	cmp	r2, #0
    ce5c:	1a000006 	bne	ce7c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
    ce60:	e0d020d1 	ldrsb	r2, [r0], #1
    ce64:	e2423030 	sub	r3, r2, #48	; 0x30
    ce68:	e3520000 	cmp	r2, #0
    ce6c:	e6ef2073 	uxtb	r2, r3
    ce70:	1affffef 	bne	ce34 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0xc>
    ce74:	e1a00001 	mov	r0, r1
    ce78:	e12fff1e 	bx	lr
    ce7c:	e3e01000 	mvn	r1, #0
    ce80:	e1a00001 	mov	r0, r1
    ce84:	e12fff1e 	bx	lr

0000ce88 <CKernelOptions::CKernelOptions()>:
    ce88:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
    ce8c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce90:	e280ce81 	add	ip, r0, #2064	; 0x810
    ce94:	e1a05000 	mov	r5, r0
    ce98:	e28c6008 	add	r6, ip, #8
    ce9c:	e24dd01c 	sub	sp, sp, #28
    cea0:	e3a0a000 	mov	sl, #0
    cea4:	e3a02004 	mov	r2, #4
    cea8:	e3a0303c 	mov	r3, #60	; 0x3c
    ceac:	f44c078f 	vst1.32	{d16}, [ip]
    ceb0:	e1a00006 	mov	r0, r6
    ceb4:	e585282c 	str	r2, [r5, #2092]	; 0x82c
    ceb8:	e30a1130 	movw	r1, #41264	; 0xa130
    cebc:	e3401001 	movt	r1, #1
    cec0:	e5853854 	str	r3, [r5, #2132]	; 0x854
    cec4:	e2858e83 	add	r8, r5, #2096	; 0x830
    cec8:	e585a834 	str	sl, [r5, #2100]	; 0x834
    cecc:	e585a84c 	str	sl, [r5, #2124]	; 0x84c
    ced0:	e5c5a850 	strb	sl, [r5, #2128]	; 0x850
    ced4:	ebfffeec 	bl	ca8c <strcpy>
    ced8:	e1a00008 	mov	r0, r8
    cedc:	e30a1138 	movw	r1, #41272	; 0xa138
    cee0:	e3401001 	movt	r1, #1
    cee4:	ebfffee8 	bl	ca8c <strcpy>
    cee8:	e30c37d8 	movw	r3, #51160	; 0xc7d8
    ceec:	e3403001 	movt	r3, #1
    cef0:	e5c5a838 	strb	sl, [r5, #2104]	; 0x838
    cef4:	e28d0014 	add	r0, sp, #20
    cef8:	e5835000 	str	r5, [r3]
    cefc:	ebfff2e2 	bl	9a8c <CBcmPropertyTags::CBcmPropertyTags()>
    cf00:	e58da000 	str	sl, [sp]
    cf04:	e1a02005 	mov	r2, r5
    cf08:	e28d0014 	add	r0, sp, #20
    cf0c:	e3a01001 	mov	r1, #1
    cf10:	e3401005 	movt	r1, #5
    cf14:	e300380c 	movw	r3, #2060	; 0x80c
    cf18:	ebfff2e6 	bl	9ab8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    cf1c:	e150000a 	cmp	r0, sl
    cf20:	0a000015 	beq	cf7c <CKernelOptions::CKernelOptions()+0xf4>
    cf24:	e5953008 	ldr	r3, [r5, #8]
    cf28:	e3530b02 	cmp	r3, #2048	; 0x800
    cf2c:	2a000012 	bcs	cf7c <CKernelOptions::CKernelOptions()+0xf4>
    cf30:	e0853003 	add	r3, r5, r3
    cf34:	e285400c 	add	r4, r5, #12
    cf38:	e30a71a4 	movw	r7, #41380	; 0xa1a4
    cf3c:	e3407001 	movt	r7, #1
    cf40:	e30a913c 	movw	r9, #41276	; 0xa13c
    cf44:	e3409001 	movt	r9, #1
    cf48:	e5c3a00c 	strb	sl, [r3, #12]
    cf4c:	e30a3144 	movw	r3, #41284	; 0xa144
    cf50:	e3403001 	movt	r3, #1
    cf54:	e58d300c 	str	r3, [sp, #12]
    cf58:	e585480c 	str	r4, [r5, #2060]	; 0x80c
    cf5c:	ea000003 	b	cf70 <CKernelOptions::CKernelOptions()+0xe8>
    cf60:	e3530020 	cmp	r3, #32
    cf64:	1a000009 	bne	cf90 <CKernelOptions::CKernelOptions()+0x108>
    cf68:	e2844001 	add	r4, r4, #1
    cf6c:	e585480c 	str	r4, [r5, #2060]	; 0x80c
    cf70:	e1d430d0 	ldrsb	r3, [r4]
    cf74:	e3530000 	cmp	r3, #0
    cf78:	1afffff8 	bne	cf60 <CKernelOptions::CKernelOptions()+0xd8>
    cf7c:	e28d0014 	add	r0, sp, #20
    cf80:	ebfff2c7 	bl	9aa4 <CBcmPropertyTags::~CBcmPropertyTags()>
    cf84:	e1a00005 	mov	r0, r5
    cf88:	e28dd01c 	add	sp, sp, #28
    cf8c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf90:	e1a03004 	mov	r3, r4
    cf94:	ea000002 	b	cfa4 <CKernelOptions::CKernelOptions()+0x11c>
    cf98:	e3510020 	cmp	r1, #32
    cf9c:	0a000018 	beq	d004 <CKernelOptions::CKernelOptions()+0x17c>
    cfa0:	e1a03002 	mov	r3, r2
    cfa4:	e2832001 	add	r2, r3, #1
    cfa8:	e585280c 	str	r2, [r5, #2060]	; 0x80c
    cfac:	e1d310d1 	ldrsb	r1, [r3, #1]
    cfb0:	e3510000 	cmp	r1, #0
    cfb4:	1afffff7 	bne	cf98 <CKernelOptions::CKernelOptions()+0x110>
    cfb8:	e1d430d0 	ldrsb	r3, [r4]
    cfbc:	e3530000 	cmp	r3, #0
    cfc0:	0a000008 	beq	cfe8 <CKernelOptions::CKernelOptions()+0x160>
    cfc4:	e1a0b004 	mov	fp, r4
    cfc8:	e353003d 	cmp	r3, #61	; 0x3d
    cfcc:	1a000002 	bne	cfdc <CKernelOptions::CKernelOptions()+0x154>
    cfd0:	ea000010 	b	d018 <CKernelOptions::CKernelOptions()+0x190>
    cfd4:	e353003d 	cmp	r3, #61	; 0x3d
    cfd8:	0a00000e 	beq	d018 <CKernelOptions::CKernelOptions()+0x190>
    cfdc:	e1fb30d1 	ldrsb	r3, [fp, #1]!
    cfe0:	e3530000 	cmp	r3, #0
    cfe4:	1afffffa 	bne	cfd4 <CKernelOptions::CKernelOptions()+0x14c>
    cfe8:	e1a01007 	mov	r1, r7
    cfec:	e1a00004 	mov	r0, r4
    cff0:	ebfffe45 	bl	c90c <strcmp>
    cff4:	e3500000 	cmp	r0, #0
    cff8:	1a00002b 	bne	d0ac <CKernelOptions::CKernelOptions()+0x224>
    cffc:	e595480c 	ldr	r4, [r5, #2060]	; 0x80c
    d000:	eaffffda 	b	cf70 <CKernelOptions::CKernelOptions()+0xe8>
    d004:	e2833002 	add	r3, r3, #2
    d008:	e585380c 	str	r3, [r5, #2060]	; 0x80c
    d00c:	e3a03000 	mov	r3, #0
    d010:	e5c23000 	strb	r3, [r2]
    d014:	eaffffe7 	b	cfb8 <CKernelOptions::CKernelOptions()+0x130>
    d018:	e3a03000 	mov	r3, #0
    d01c:	e1a01007 	mov	r1, r7
    d020:	e5cb3000 	strb	r3, [fp]
    d024:	e1a00004 	mov	r0, r4
    d028:	ebfffe37 	bl	c90c <strcmp>
    d02c:	e28ba001 	add	sl, fp, #1
    d030:	e3500000 	cmp	r0, #0
    d034:	1a000048 	bne	d15c <CKernelOptions::CKernelOptions()+0x2d4>
    d038:	e35a0000 	cmp	sl, #0
    d03c:	0affffee 	beq	cffc <CKernelOptions::CKernelOptions()+0x174>
    d040:	e1db30d1 	ldrsb	r3, [fp, #1]
    d044:	e3530000 	cmp	r3, #0
    d048:	0affffeb 	beq	cffc <CKernelOptions::CKernelOptions()+0x174>
    d04c:	e28bb002 	add	fp, fp, #2
    d050:	e3a0c00a 	mov	ip, #10
    d054:	e021309c 	mla	r1, ip, r0, r3
    d058:	e2433030 	sub	r3, r3, #48	; 0x30
    d05c:	e6ef3073 	uxtb	r3, r3
    d060:	e2412030 	sub	r2, r1, #48	; 0x30
    d064:	e3530009 	cmp	r3, #9
    d068:	8affffe3 	bhi	cffc <CKernelOptions::CKernelOptions()+0x174>
    d06c:	e3720001 	cmn	r2, #1
    d070:	13a03000 	movne	r3, #0
    d074:	03a03001 	moveq	r3, #1
    d078:	e1520000 	cmp	r2, r0
    d07c:	33833001 	orrcc	r3, r3, #1
    d080:	e1a00002 	mov	r0, r2
    d084:	e3530000 	cmp	r3, #0
    d088:	1affffdb 	bne	cffc <CKernelOptions::CKernelOptions()+0x174>
    d08c:	e0db30d1 	ldrsb	r3, [fp], #1
    d090:	e3530000 	cmp	r3, #0
    d094:	1affffee 	bne	d054 <CKernelOptions::CKernelOptions()+0x1cc>
    d098:	e2411e2b 	sub	r1, r1, #688	; 0x2b0
    d09c:	e300353c 	movw	r3, #1340	; 0x53c
    d0a0:	e1510003 	cmp	r1, r3
    d0a4:	95852810 	strls	r2, [r5, #2064]	; 0x810
    d0a8:	eaffffd3 	b	cffc <CKernelOptions::CKernelOptions()+0x174>
    d0ac:	e1a01009 	mov	r1, r9
    d0b0:	e1a00004 	mov	r0, r4
    d0b4:	ebfffe14 	bl	c90c <strcmp>
    d0b8:	e3500000 	cmp	r0, #0
    d0bc:	13a0a000 	movne	sl, #0
    d0c0:	0affffcd 	beq	cffc <CKernelOptions::CKernelOptions()+0x174>
    d0c4:	e59d100c 	ldr	r1, [sp, #12]
    d0c8:	e1a00004 	mov	r0, r4
    d0cc:	ebfffe0e 	bl	c90c <strcmp>
    d0d0:	e250b000 	subs	fp, r0, #0
    d0d4:	0a000041 	beq	d1e0 <CKernelOptions::CKernelOptions()+0x358>
    d0d8:	e30a114c 	movw	r1, #41292	; 0xa14c
    d0dc:	e3401001 	movt	r1, #1
    d0e0:	e1a00004 	mov	r0, r4
    d0e4:	ebfffe08 	bl	c90c <strcmp>
    d0e8:	e3500000 	cmp	r0, #0
    d0ec:	1a000041 	bne	d1f8 <CKernelOptions::CKernelOptions()+0x370>
    d0f0:	e35a0000 	cmp	sl, #0
    d0f4:	0affffc0 	beq	cffc <CKernelOptions::CKernelOptions()+0x174>
    d0f8:	e1da20d0 	ldrsb	r2, [sl]
    d0fc:	e3520000 	cmp	r2, #0
    d100:	0affffbd 	beq	cffc <CKernelOptions::CKernelOptions()+0x174>
    d104:	e28a3001 	add	r3, sl, #1
    d108:	e3a0c00a 	mov	ip, #10
    d10c:	e021209c 	mla	r1, ip, r0, r2
    d110:	e2422030 	sub	r2, r2, #48	; 0x30
    d114:	e6ef2072 	uxtb	r2, r2
    d118:	e2411030 	sub	r1, r1, #48	; 0x30
    d11c:	e3520009 	cmp	r2, #9
    d120:	8affffb5 	bhi	cffc <CKernelOptions::CKernelOptions()+0x174>
    d124:	e3710001 	cmn	r1, #1
    d128:	13a02000 	movne	r2, #0
    d12c:	03a02001 	moveq	r2, #1
    d130:	e1510000 	cmp	r1, r0
    d134:	33822001 	orrcc	r2, r2, #1
    d138:	e1a00001 	mov	r0, r1
    d13c:	e3520000 	cmp	r2, #0
    d140:	1affffad 	bne	cffc <CKernelOptions::CKernelOptions()+0x174>
    d144:	e0d320d1 	ldrsb	r2, [r3], #1
    d148:	e3520000 	cmp	r2, #0
    d14c:	1affffee 	bne	d10c <CKernelOptions::CKernelOptions()+0x284>
    d150:	e3510004 	cmp	r1, #4
    d154:	9585182c 	strls	r1, [r5, #2092]	; 0x82c
    d158:	eaffffa7 	b	cffc <CKernelOptions::CKernelOptions()+0x174>
    d15c:	e1a01009 	mov	r1, r9
    d160:	e1a00004 	mov	r0, r4
    d164:	ebfffde8 	bl	c90c <strcmp>
    d168:	e3500000 	cmp	r0, #0
    d16c:	1affffd4 	bne	d0c4 <CKernelOptions::CKernelOptions()+0x23c>
    d170:	e35a0000 	cmp	sl, #0
    d174:	0affffa0 	beq	cffc <CKernelOptions::CKernelOptions()+0x174>
    d178:	e1db30d1 	ldrsb	r3, [fp, #1]
    d17c:	e3530000 	cmp	r3, #0
    d180:	0affff9d 	beq	cffc <CKernelOptions::CKernelOptions()+0x174>
    d184:	e28bb002 	add	fp, fp, #2
    d188:	e3a0c00a 	mov	ip, #10
    d18c:	e021309c 	mla	r1, ip, r0, r3
    d190:	e2433030 	sub	r3, r3, #48	; 0x30
    d194:	e6ef3073 	uxtb	r3, r3
    d198:	e2412030 	sub	r2, r1, #48	; 0x30
    d19c:	e3530009 	cmp	r3, #9
    d1a0:	8affff95 	bhi	cffc <CKernelOptions::CKernelOptions()+0x174>
    d1a4:	e3720001 	cmn	r2, #1
    d1a8:	13a03000 	movne	r3, #0
    d1ac:	03a03001 	moveq	r3, #1
    d1b0:	e1520000 	cmp	r2, r0
    d1b4:	33833001 	orrcc	r3, r3, #1
    d1b8:	e1a00002 	mov	r0, r2
    d1bc:	e3530000 	cmp	r3, #0
    d1c0:	1affff8d 	bne	cffc <CKernelOptions::CKernelOptions()+0x174>
    d1c4:	e0db30d1 	ldrsb	r3, [fp], #1
    d1c8:	e3530000 	cmp	r3, #0
    d1cc:	1affffee 	bne	d18c <CKernelOptions::CKernelOptions()+0x304>
    d1d0:	e2411e21 	sub	r1, r1, #528	; 0x210
    d1d4:	e3510f96 	cmp	r1, #600	; 0x258
    d1d8:	95852814 	strls	r2, [r5, #2068]	; 0x814
    d1dc:	eaffff86 	b	cffc <CKernelOptions::CKernelOptions()+0x174>
    d1e0:	e1a0100a 	mov	r1, sl
    d1e4:	e3a02013 	mov	r2, #19
    d1e8:	e1a00006 	mov	r0, r6
    d1ec:	ebfffe31 	bl	cab8 <strncpy>
    d1f0:	e5c5b82b 	strb	fp, [r5, #2091]	; 0x82b
    d1f4:	eaffff80 	b	cffc <CKernelOptions::CKernelOptions()+0x174>
    d1f8:	e30a1158 	movw	r1, #41304	; 0xa158
    d1fc:	e3401001 	movt	r1, #1
    d200:	e1a00004 	mov	r0, r4
    d204:	ebfffdc0 	bl	c90c <strcmp>
    d208:	e250b000 	subs	fp, r0, #0
    d20c:	1a000005 	bne	d228 <CKernelOptions::CKernelOptions()+0x3a0>
    d210:	e1a0100a 	mov	r1, sl
    d214:	e3a02002 	mov	r2, #2
    d218:	e1a00008 	mov	r0, r8
    d21c:	ebfffe25 	bl	cab8 <strncpy>
    d220:	e5c5b832 	strb	fp, [r5, #2098]	; 0x832
    d224:	eaffff74 	b	cffc <CKernelOptions::CKernelOptions()+0x174>
    d228:	e30a1160 	movw	r1, #41312	; 0xa160
    d22c:	e3401001 	movt	r1, #1
    d230:	e1a00004 	mov	r0, r4
    d234:	ebfffdb4 	bl	c90c <strcmp>
    d238:	e2501000 	subs	r1, r0, #0
    d23c:	1a00001c 	bne	d2b4 <CKernelOptions::CKernelOptions()+0x42c>
    d240:	e35a0000 	cmp	sl, #0
    d244:	0affff6c 	beq	cffc <CKernelOptions::CKernelOptions()+0x174>
    d248:	e1da20d0 	ldrsb	r2, [sl]
    d24c:	e3520000 	cmp	r2, #0
    d250:	0affff69 	beq	cffc <CKernelOptions::CKernelOptions()+0x174>
    d254:	e28a3001 	add	r3, sl, #1
    d258:	e3a0e00a 	mov	lr, #10
    d25c:	e020219e 	mla	r0, lr, r1, r2
    d260:	e2422030 	sub	r2, r2, #48	; 0x30
    d264:	e6ef2072 	uxtb	r2, r2
    d268:	e240c030 	sub	ip, r0, #48	; 0x30
    d26c:	e3520009 	cmp	r2, #9
    d270:	8affff61 	bhi	cffc <CKernelOptions::CKernelOptions()+0x174>
    d274:	e37c0001 	cmn	ip, #1
    d278:	13a02000 	movne	r2, #0
    d27c:	03a02001 	moveq	r2, #1
    d280:	e15c0001 	cmp	ip, r1
    d284:	33822001 	orrcc	r2, r2, #1
    d288:	e1a0100c 	mov	r1, ip
    d28c:	e3520000 	cmp	r2, #0
    d290:	1affff59 	bne	cffc <CKernelOptions::CKernelOptions()+0x174>
    d294:	e0d320d1 	ldrsb	r2, [r3], #1
    d298:	e3520000 	cmp	r2, #0
    d29c:	1affffee 	bne	d25c <CKernelOptions::CKernelOptions()+0x3d4>
    d2a0:	e24000f8 	sub	r0, r0, #248	; 0xf8
    d2a4:	e3013e78 	movw	r3, #7800	; 0x1e78
    d2a8:	e1500003 	cmp	r0, r3
    d2ac:	9585c834 	strls	ip, [r5, #2100]	; 0x834
    d2b0:	eaffff51 	b	cffc <CKernelOptions::CKernelOptions()+0x174>
    d2b4:	e30a1170 	movw	r1, #41328	; 0xa170
    d2b8:	e3401001 	movt	r1, #1
    d2bc:	e1a00004 	mov	r0, r4
    d2c0:	ebfffd91 	bl	c90c <strcmp>
    d2c4:	e250b000 	subs	fp, r0, #0
    d2c8:	1a000006 	bne	d2e8 <CKernelOptions::CKernelOptions()+0x460>
    d2cc:	e2850e83 	add	r0, r5, #2096	; 0x830
    d2d0:	e1a0100a 	mov	r1, sl
    d2d4:	e2800008 	add	r0, r0, #8
    d2d8:	e3a02013 	mov	r2, #19
    d2dc:	ebfffdf5 	bl	cab8 <strncpy>
    d2e0:	e5c5b84b 	strb	fp, [r5, #2123]	; 0x84b
    d2e4:	eaffff44 	b	cffc <CKernelOptions::CKernelOptions()+0x174>
    d2e8:	e30a117c 	movw	r1, #41340	; 0xa17c
    d2ec:	e3401001 	movt	r1, #1
    d2f0:	e1a00004 	mov	r0, r4
    d2f4:	ebfffd84 	bl	c90c <strcmp>
    d2f8:	e3500000 	cmp	r0, #0
    d2fc:	1a000009 	bne	d328 <CKernelOptions::CKernelOptions()+0x4a0>
    d300:	e35a0000 	cmp	sl, #0
    d304:	0affff3c 	beq	cffc <CKernelOptions::CKernelOptions()+0x174>
    d308:	e1da20d0 	ldrsb	r2, [sl]
    d30c:	e3520000 	cmp	r2, #0
    d310:	0affff39 	beq	cffc <CKernelOptions::CKernelOptions()+0x174>
    d314:	e1a0000a 	mov	r0, sl
    d318:	ebfffec2 	bl	ce28 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    d31c:	e3500002 	cmp	r0, #2
    d320:	9585084c 	strls	r0, [r5, #2124]	; 0x84c
    d324:	eaffff34 	b	cffc <CKernelOptions::CKernelOptions()+0x174>
    d328:	e30a1188 	movw	r1, #41352	; 0xa188
    d32c:	e3401001 	movt	r1, #1
    d330:	e1a00004 	mov	r0, r4
    d334:	ebfffd74 	bl	c90c <strcmp>
    d338:	e3500000 	cmp	r0, #0
    d33c:	1a000007 	bne	d360 <CKernelOptions::CKernelOptions()+0x4d8>
    d340:	e1a0000a 	mov	r0, sl
    d344:	e30a1190 	movw	r1, #41360	; 0xa190
    d348:	e3401001 	movt	r1, #1
    d34c:	ebfffd6e 	bl	c90c <strcmp>
    d350:	e3500000 	cmp	r0, #0
    d354:	03a03001 	moveq	r3, #1
    d358:	05c53850 	strbeq	r3, [r5, #2128]	; 0x850
    d35c:	eaffff26 	b	cffc <CKernelOptions::CKernelOptions()+0x174>
    d360:	e1a00004 	mov	r0, r4
    d364:	e30a1198 	movw	r1, #41368	; 0xa198
    d368:	e3401001 	movt	r1, #1
    d36c:	ebfffd66 	bl	c90c <strcmp>
    d370:	e16f2f1a 	clz	r2, sl
    d374:	e3500000 	cmp	r0, #0
    d378:	e1a022a2 	lsr	r2, r2, #5
    d37c:	13a02001 	movne	r2, #1
    d380:	e3520000 	cmp	r2, #0
    d384:	1affff1c 	bne	cffc <CKernelOptions::CKernelOptions()+0x174>
    d388:	e1da20d0 	ldrsb	r2, [sl]
    d38c:	e3520000 	cmp	r2, #0
    d390:	0affff19 	beq	cffc <CKernelOptions::CKernelOptions()+0x174>
    d394:	e1a0000a 	mov	r0, sl
    d398:	ebfffea2 	bl	ce28 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    d39c:	e2403028 	sub	r3, r0, #40	; 0x28
    d3a0:	e3530026 	cmp	r3, #38	; 0x26
    d3a4:	95850854 	strls	r0, [r5, #2132]	; 0x854
    d3a8:	eaffff13 	b	cffc <CKernelOptions::CKernelOptions()+0x174>

0000d3ac <CKernelOptions::~CKernelOptions()>:
    d3ac:	e30c37d8 	movw	r3, #51160	; 0xc7d8
    d3b0:	e3403001 	movt	r3, #1
    d3b4:	e3a02000 	mov	r2, #0
    d3b8:	e5832000 	str	r2, [r3]
    d3bc:	e12fff1e 	bx	lr

0000d3c0 <CKernelOptions::GetWidth() const>:
    d3c0:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    d3c4:	e12fff1e 	bx	lr

0000d3c8 <CKernelOptions::GetHeight() const>:
    d3c8:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    d3cc:	e12fff1e 	bx	lr

0000d3d0 <CKernelOptions::GetLogDevice() const>:
    d3d0:	e2800e81 	add	r0, r0, #2064	; 0x810
    d3d4:	e2800008 	add	r0, r0, #8
    d3d8:	e12fff1e 	bx	lr

0000d3dc <CKernelOptions::GetLogLevel() const>:
    d3dc:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    d3e0:	e12fff1e 	bx	lr

0000d3e4 <CKernelOptions::GetKeyMap() const>:
    d3e4:	e2800e83 	add	r0, r0, #2096	; 0x830
    d3e8:	e12fff1e 	bx	lr

0000d3ec <CKernelOptions::GetUSBPowerDelay() const>:
    d3ec:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    d3f0:	e12fff1e 	bx	lr

0000d3f4 <CKernelOptions::GetSoundDevice() const>:
    d3f4:	e2800e83 	add	r0, r0, #2096	; 0x830
    d3f8:	e2800008 	add	r0, r0, #8
    d3fc:	e12fff1e 	bx	lr

0000d400 <CKernelOptions::GetSoundOption() const>:
    d400:	e590084c 	ldr	r0, [r0, #2124]	; 0x84c
    d404:	e12fff1e 	bx	lr

0000d408 <CKernelOptions::GetCPUSpeed() const>:
    d408:	e5d00850 	ldrb	r0, [r0, #2128]	; 0x850
    d40c:	e12fff1e 	bx	lr

0000d410 <CKernelOptions::GetSoCMaxTemp() const>:
    d410:	e5900854 	ldr	r0, [r0, #2132]	; 0x854
    d414:	e12fff1e 	bx	lr

0000d418 <CKernelOptions::Get()>:
    d418:	e30c37d8 	movw	r3, #51160	; 0xc7d8
    d41c:	e3403001 	movt	r3, #1
    d420:	e5930000 	ldr	r0, [r3]
    d424:	e12fff1e 	bx	lr

0000d428 <CKernelOptions::GetToken()>:
    d428:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    d42c:	e1d320d0 	ldrsb	r2, [r3]
    d430:	e3520000 	cmp	r2, #0
    d434:	1a000005 	bne	d450 <CKernelOptions::GetToken()+0x28>
    d438:	ea000016 	b	d498 <CKernelOptions::GetToken()+0x70>
    d43c:	e2833001 	add	r3, r3, #1
    d440:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    d444:	e1d320d0 	ldrsb	r2, [r3]
    d448:	e3520000 	cmp	r2, #0
    d44c:	0a000011 	beq	d498 <CKernelOptions::GetToken()+0x70>
    d450:	e3520020 	cmp	r2, #32
    d454:	0afffff8 	beq	d43c <CKernelOptions::GetToken()+0x14>
    d458:	e1a02003 	mov	r2, r3
    d45c:	ea000000 	b	d464 <CKernelOptions::GetToken()+0x3c>
    d460:	e1a02001 	mov	r2, r1
    d464:	e2821001 	add	r1, r2, #1
    d468:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    d46c:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    d470:	e35c0000 	cmp	ip, #0
    d474:	0a000008 	beq	d49c <CKernelOptions::GetToken()+0x74>
    d478:	e35c0020 	cmp	ip, #32
    d47c:	1afffff7 	bne	d460 <CKernelOptions::GetToken()+0x38>
    d480:	e2822002 	add	r2, r2, #2
    d484:	e3a0c000 	mov	ip, #0
    d488:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    d48c:	e1a00003 	mov	r0, r3
    d490:	e5c1c000 	strb	ip, [r1]
    d494:	e12fff1e 	bx	lr
    d498:	e3a03000 	mov	r3, #0
    d49c:	e1a00003 	mov	r0, r3
    d4a0:	e12fff1e 	bx	lr

0000d4a4 <CKernelOptions::GetOptionValue(char*)>:
    d4a4:	e1d030d0 	ldrsb	r3, [r0]
    d4a8:	e3530000 	cmp	r3, #0
    d4ac:	1a000003 	bne	d4c0 <CKernelOptions::GetOptionValue(char*)+0x1c>
    d4b0:	ea000007 	b	d4d4 <CKernelOptions::GetOptionValue(char*)+0x30>
    d4b4:	e1f030d1 	ldrsb	r3, [r0, #1]!
    d4b8:	e3530000 	cmp	r3, #0
    d4bc:	0a000004 	beq	d4d4 <CKernelOptions::GetOptionValue(char*)+0x30>
    d4c0:	e353003d 	cmp	r3, #61	; 0x3d
    d4c4:	1afffffa 	bne	d4b4 <CKernelOptions::GetOptionValue(char*)+0x10>
    d4c8:	e2803001 	add	r3, r0, #1
    d4cc:	e3a02000 	mov	r2, #0
    d4d0:	e5c02000 	strb	r2, [r0]
    d4d4:	e1a00003 	mov	r0, r3
    d4d8:	e12fff1e 	bx	lr

0000d4dc <CKernelOptions::GetDecimal(char*)>:
    d4dc:	e3500000 	cmp	r0, #0
    d4e0:	0a000017 	beq	d544 <CKernelOptions::GetDecimal(char*)+0x68>
    d4e4:	e1d030d0 	ldrsb	r3, [r0]
    d4e8:	e3530000 	cmp	r3, #0
    d4ec:	12801001 	addne	r1, r0, #1
    d4f0:	13a02000 	movne	r2, #0
    d4f4:	13a0c00a 	movne	ip, #10
    d4f8:	1a00000b 	bne	d52c <CKernelOptions::GetDecimal(char*)+0x50>
    d4fc:	ea000010 	b	d544 <CKernelOptions::GetDecimal(char*)+0x68>
    d500:	e3700001 	cmn	r0, #1
    d504:	13a03000 	movne	r3, #0
    d508:	03a03001 	moveq	r3, #1
    d50c:	e1500002 	cmp	r0, r2
    d510:	33833001 	orrcc	r3, r3, #1
    d514:	e1a02000 	mov	r2, r0
    d518:	e3530000 	cmp	r3, #0
    d51c:	1a000008 	bne	d544 <CKernelOptions::GetDecimal(char*)+0x68>
    d520:	e0d130d1 	ldrsb	r3, [r1], #1
    d524:	e3530000 	cmp	r3, #0
    d528:	012fff1e 	bxeq	lr
    d52c:	e020329c 	mla	r0, ip, r2, r3
    d530:	e2433030 	sub	r3, r3, #48	; 0x30
    d534:	e6ef3073 	uxtb	r3, r3
    d538:	e2400030 	sub	r0, r0, #48	; 0x30
    d53c:	e3530009 	cmp	r3, #9
    d540:	9affffee 	bls	d500 <CKernelOptions::GetDecimal(char*)+0x24>
    d544:	e3e00000 	mvn	r0, #0
    d548:	e12fff1e 	bx	lr

0000d54c <CPageTable::CPageTable()>:
    d54c:	e92d4010 	push	{r4, lr}
    d550:	e1a04000 	mov	r4, r0
    d554:	e3a01000 	mov	r1, #0
    d558:	e3a029ba 	mov	r2, #3047424	; 0x2e8000
    d55c:	e5c01000 	strb	r1, [r0]
    d560:	e1a0c001 	mov	ip, r1
    d564:	e1a03002 	mov	r3, r2
    d568:	e3a0e002 	mov	lr, #2
    d56c:	e3a00001 	mov	r0, #1
    d570:	e5842004 	str	r2, [r4, #4]
    d574:	e5d32000 	ldrb	r2, [r3]
    d578:	e35c0b01 	cmp	ip, #1024	; 0x400
    d57c:	e5d31002 	ldrb	r1, [r3, #2]
    d580:	e2833004 	add	r3, r3, #4
    d584:	e7c1201e 	bfi	r2, lr, #0, #2
    d588:	e3811001 	orr	r1, r1, #1
    d58c:	e6ef2072 	uxtb	r2, r2
    d590:	e20110f9 	and	r1, r1, #249	; 0xf9
    d594:	e3822004 	orr	r2, r2, #4
    d598:	e20220f7 	and	r2, r2, #247	; 0xf7
    d59c:	e7c3119f 	bfc	r1, #3, #1
    d5a0:	e5431002 	strb	r1, [r3, #-2]
    d5a4:	e7c4221f 	bfc	r2, #4, #1
    d5a8:	e5432004 	strb	r2, [r3, #-4]
    d5ac:	e15310b2 	ldrh	r1, [r3, #-2]
    d5b0:	e15320b4 	ldrh	r2, [r3, #-4]
    d5b4:	e7cf121c 	bfi	r1, ip, #4, #12
    d5b8:	e28cc001 	add	ip, ip, #1
    d5bc:	e7c8229f 	bfc	r2, #5, #4
    d5c0:	e14320b4 	strh	r2, [r3, #-4]
    d5c4:	e14310b2 	strh	r1, [r3, #-2]
    d5c8:	e7e72452 	ubfx	r2, r2, #8, #8
    d5cc:	e20220fd 	and	r2, r2, #253	; 0xfd
    d5d0:	e7c32110 	bfi	r2, r0, #2, #2
    d5d4:	e202208f 	and	r2, r2, #143	; 0x8f
    d5d8:	e7c7239f 	bfc	r2, #7, #1
    d5dc:	e5432003 	strb	r2, [r3, #-3]
    d5e0:	25532004 	ldrbcs	r2, [r3, #-4]
    d5e4:	23822010 	orrcs	r2, r2, #16
    d5e8:	25432004 	strbcs	r2, [r3, #-4]
    d5ec:	e35c0a01 	cmp	ip, #4096	; 0x1000
    d5f0:	1affffdf 	bne	d574 <CPageTable::CPageTable()+0x28>
    d5f4:	eb00222e 	bl	15eb4 <CleanDataCache>
    d5f8:	e1a00004 	mov	r0, r4
    d5fc:	e8bd8010 	pop	{r4, pc}

0000d600 <CPageTable::CPageTable(unsigned int)>:
    d600:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d604:	e1a04000 	mov	r4, r0
    d608:	e3a03001 	mov	r3, #1
    d60c:	e5c03000 	strb	r3, [r0]
    d610:	e1a05001 	mov	r5, r1
    d614:	eb002e15 	bl	18e70 <palloc>
    d618:	e3500000 	cmp	r0, #0
    d61c:	e5840004 	str	r0, [r4, #4]
    d620:	0a00003e 	beq	d720 <CPageTable::CPageTable(unsigned int)+0x120>
    d624:	e7eb3050 	ubfx	r3, r0, #0, #12
    d628:	e3530000 	cmp	r3, #0
    d62c:	1a000033 	bne	d700 <CPageTable::CPageTable(unsigned int)+0x100>
    d630:	e3a02000 	mov	r2, #0
    d634:	e309c81c 	movw	ip, #38940	; 0x981c
    d638:	e340c001 	movt	ip, #1
    d63c:	e1a07002 	mov	r7, r2
    d640:	e3a06002 	mov	r6, #2
    d644:	e3a0e001 	mov	lr, #1
    d648:	ea000009 	b	d674 <CPageTable::CPageTable(unsigned int)+0x74>
    d64c:	e6ef1073 	uxtb	r1, r3
    d650:	e5d03002 	ldrb	r3, [r0, #2]
    d654:	e7c31197 	bfi	r1, r7, #3, #1
    d658:	e3833001 	orr	r3, r3, #1
    d65c:	e5c01000 	strb	r1, [r0]
    d660:	e5c03002 	strb	r3, [r0, #2]
    d664:	e2822601 	add	r2, r2, #1048576	; 0x100000
    d668:	e2800004 	add	r0, r0, #4
    d66c:	e3520101 	cmp	r2, #1073741824	; 0x40000000
    d670:	0a00001f 	beq	d6f4 <CPageTable::CPageTable(unsigned int)+0xf4>
    d674:	e5d03001 	ldrb	r3, [r0, #1]
    d678:	e7e31a52 	ubfx	r1, r2, #20, #4
    d67c:	e1a01201 	lsl	r1, r1, #4
    d680:	e386800c 	orr	r8, r6, #12
    d684:	e20330fc 	and	r3, r3, #252	; 0xfc
    d688:	e5c01002 	strb	r1, [r0, #2]
    d68c:	e152000c 	cmp	r2, ip
    d690:	e1a01c22 	lsr	r1, r2, #24
    d694:	e7c3311e 	bfi	r3, lr, #2, #2
    d698:	e5c08000 	strb	r8, [r0]
    d69c:	e203308f 	and	r3, r3, #143	; 0x8f
    d6a0:	e5c01003 	strb	r1, [r0, #3]
    d6a4:	e7c7339f 	bfc	r3, #7, #1
    d6a8:	e5c03001 	strb	r3, [r0, #1]
    d6ac:	3affffec 	bcc	d664 <CPageTable::CPageTable(unsigned int)+0x64>
    d6b0:	e6ef3078 	uxtb	r3, r8
    d6b4:	e1550002 	cmp	r5, r2
    d6b8:	e3833010 	orr	r3, r3, #16
    d6bc:	e5c03000 	strb	r3, [r0]
    d6c0:	9affffe1 	bls	d64c <CPageTable::CPageTable(unsigned int)+0x4c>
    d6c4:	e3520501 	cmp	r2, #4194304	; 0x400000
    d6c8:	1affffe5 	bne	d664 <CPageTable::CPageTable(unsigned int)+0x64>
    d6cc:	e5d03000 	ldrb	r3, [r0]
    d6d0:	e3a02605 	mov	r2, #5242880	; 0x500000
    d6d4:	e5d01002 	ldrb	r1, [r0, #2]
    d6d8:	e2800004 	add	r0, r0, #4
    d6dc:	e20330fb 	and	r3, r3, #251	; 0xfb
    d6e0:	e3811001 	orr	r1, r1, #1
    d6e4:	e5401002 	strb	r1, [r0, #-2]
    d6e8:	e7c33197 	bfi	r3, r7, #3, #1
    d6ec:	e5403004 	strb	r3, [r0, #-4]
    d6f0:	eaffffdf 	b	d674 <CPageTable::CPageTable(unsigned int)+0x74>
    d6f4:	eb0021ee 	bl	15eb4 <CleanDataCache>
    d6f8:	e1a00004 	mov	r0, r4
    d6fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d700:	e30a11ac 	movw	r1, #41388	; 0xa1ac
    d704:	e3401001 	movt	r1, #1
    d708:	e30a01cc 	movw	r0, #41420	; 0xa1cc
    d70c:	e3400001 	movt	r0, #1
    d710:	e3a02051 	mov	r2, #81	; 0x51
    d714:	eb0008db 	bl	fa88 <assertion_failed>
    d718:	e5940004 	ldr	r0, [r4, #4]
    d71c:	eaffffc3 	b	d630 <CPageTable::CPageTable(unsigned int)+0x30>
    d720:	e30a11ac 	movw	r1, #41388	; 0xa1ac
    d724:	e3401001 	movt	r1, #1
    d728:	e30a01bc 	movw	r0, #41404	; 0xa1bc
    d72c:	e3400001 	movt	r0, #1
    d730:	e3a02050 	mov	r2, #80	; 0x50
    d734:	eb0008d3 	bl	fa88 <assertion_failed>
    d738:	e5940004 	ldr	r0, [r4, #4]
    d73c:	eaffffb8 	b	d624 <CPageTable::CPageTable(unsigned int)+0x24>

0000d740 <CPageTable::~CPageTable()>:
    d740:	e5d03000 	ldrb	r3, [r0]
    d744:	e92d4010 	push	{r4, lr}
    d748:	e1a04000 	mov	r4, r0
    d74c:	e3530000 	cmp	r3, #0
    d750:	0a000001 	beq	d75c <CPageTable::~CPageTable()+0x1c>
    d754:	e5900004 	ldr	r0, [r0, #4]
    d758:	eb002dfe 	bl	18f58 <pfree>
    d75c:	e1a00004 	mov	r0, r4
    d760:	e8bd8010 	pop	{r4, pc}

0000d764 <CPageTable::GetBaseAddress() const>:
    d764:	e5900004 	ldr	r0, [r0, #4]
    d768:	e3800059 	orr	r0, r0, #89	; 0x59
    d76c:	e12fff1e 	bx	lr

0000d770 <CScreenDevice::~CScreenDevice()>:
    d770:	e5d0300c 	ldrb	r3, [r0, #12]
    d774:	e59f2068 	ldr	r2, [pc, #104]	; d7e4 <CScreenDevice::~CScreenDevice()+0x74>
    d778:	e92d4070 	push	{r4, r5, r6, lr}
    d77c:	e3530000 	cmp	r3, #0
    d780:	e1a04000 	mov	r4, r0
    d784:	e5802000 	str	r2, [r0]
    d788:	0a000003 	beq	d79c <CScreenDevice::~CScreenDevice()+0x2c>
    d78c:	e5900018 	ldr	r0, [r0, #24]
    d790:	e3500000 	cmp	r0, #0
    d794:	0a000000 	beq	d79c <CScreenDevice::~CScreenDevice()+0x2c>
    d798:	eb002bf3 	bl	1876c <operator delete[](void*)>
    d79c:	e5945010 	ldr	r5, [r4, #16]
    d7a0:	e3a03000 	mov	r3, #0
    d7a4:	e5843018 	str	r3, [r4, #24]
    d7a8:	e1550003 	cmp	r5, r3
    d7ac:	0a000004 	beq	d7c4 <CScreenDevice::~CScreenDevice()+0x54>
    d7b0:	e1a00005 	mov	r0, r5
    d7b4:	eb002ecf 	bl	192f8 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    d7b8:	e1a00005 	mov	r0, r5
    d7bc:	e3a01024 	mov	r1, #36	; 0x24
    d7c0:	eb002bea 	bl	18770 <operator delete(void*, unsigned int)>
    d7c4:	e3a03000 	mov	r3, #0
    d7c8:	e2840014 	add	r0, r4, #20
    d7cc:	e5843010 	str	r3, [r4, #16]
    d7d0:	eb0008d3 	bl	fb24 <CCharGenerator::~CCharGenerator()>
    d7d4:	e1a00004 	mov	r0, r4
    d7d8:	eb002f90 	bl	19620 <CDevice::~CDevice()>
    d7dc:	e1a00004 	mov	r0, r4
    d7e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    d7e4:	0001a1f4 	.word	0x0001a1f4

0000d7e8 <CScreenDevice::InvertCursor() [clone .part.6]>:
    d7e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d7ec:	e2806014 	add	r6, r0, #20
    d7f0:	e1a05000 	mov	r5, r0
    d7f4:	e1a00006 	mov	r0, r6
    d7f8:	e3a08000 	mov	r8, #0
    d7fc:	eb0008cd 	bl	fb38 <CCharGenerator::GetUnderline() const>
    d800:	e1a07000 	mov	r7, r0
    d804:	e1a00006 	mov	r0, r6
    d808:	eb0008c8 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    d80c:	e1500007 	cmp	r0, r7
    d810:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    d814:	e3a04000 	mov	r4, #0
    d818:	ea000013 	b	d86c <CScreenDevice::InvertCursor() [clone .part.6]+0x84>
    d81c:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    d820:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    d824:	e0843003 	add	r3, r4, r3
    d828:	e1530002 	cmp	r3, r2
    d82c:	2a00000d 	bcs	d868 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    d830:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    d834:	e5951028 	ldr	r1, [r5, #40]	; 0x28
    d838:	e0872002 	add	r2, r7, r2
    d83c:	e1520001 	cmp	r2, r1
    d840:	2a000008 	bcs	d868 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    d844:	e5950020 	ldr	r0, [r5, #32]
    d848:	e5951018 	ldr	r1, [r5, #24]
    d84c:	e0233290 	mla	r3, r0, r2, r3
    d850:	e1a03083 	lsl	r3, r3, #1
    d854:	e19120b3 	ldrh	r2, [r1, r3]
    d858:	e3520000 	cmp	r2, #0
    d85c:	118180b3 	strhne	r8, [r1, r3]
    d860:	01d524b6 	ldrheq	r2, [r5, #70]	; 0x46
    d864:	018120b3 	strheq	r2, [r1, r3]
    d868:	e2844001 	add	r4, r4, #1
    d86c:	e1a00006 	mov	r0, r6
    d870:	eb0008ac 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    d874:	e1500004 	cmp	r0, r4
    d878:	8affffe7 	bhi	d81c <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
    d87c:	e2877001 	add	r7, r7, #1
    d880:	eaffffdf 	b	d804 <CScreenDevice::InvertCursor() [clone .part.6]+0x1c>

0000d884 <CScreenDevice::~CScreenDevice()>:
    d884:	e5d0300c 	ldrb	r3, [r0, #12]
    d888:	e59f2074 	ldr	r2, [pc, #116]	; d904 <CScreenDevice::~CScreenDevice()+0x80>
    d88c:	e92d4070 	push	{r4, r5, r6, lr}
    d890:	e3530000 	cmp	r3, #0
    d894:	e1a04000 	mov	r4, r0
    d898:	e5802000 	str	r2, [r0]
    d89c:	0a000003 	beq	d8b0 <CScreenDevice::~CScreenDevice()+0x2c>
    d8a0:	e5900018 	ldr	r0, [r0, #24]
    d8a4:	e3500000 	cmp	r0, #0
    d8a8:	0a000000 	beq	d8b0 <CScreenDevice::~CScreenDevice()+0x2c>
    d8ac:	eb002bae 	bl	1876c <operator delete[](void*)>
    d8b0:	e5945010 	ldr	r5, [r4, #16]
    d8b4:	e3a03000 	mov	r3, #0
    d8b8:	e5843018 	str	r3, [r4, #24]
    d8bc:	e1550003 	cmp	r5, r3
    d8c0:	0a000004 	beq	d8d8 <CScreenDevice::~CScreenDevice()+0x54>
    d8c4:	e1a00005 	mov	r0, r5
    d8c8:	eb002e8a 	bl	192f8 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    d8cc:	e1a00005 	mov	r0, r5
    d8d0:	e3a01024 	mov	r1, #36	; 0x24
    d8d4:	eb002ba5 	bl	18770 <operator delete(void*, unsigned int)>
    d8d8:	e3a03000 	mov	r3, #0
    d8dc:	e2840014 	add	r0, r4, #20
    d8e0:	e5843010 	str	r3, [r4, #16]
    d8e4:	eb00088e 	bl	fb24 <CCharGenerator::~CCharGenerator()>
    d8e8:	e1a00004 	mov	r0, r4
    d8ec:	eb002f4b 	bl	19620 <CDevice::~CDevice()>
    d8f0:	e1a00004 	mov	r0, r4
    d8f4:	e3a0105c 	mov	r1, #92	; 0x5c
    d8f8:	eb002b9c 	bl	18770 <operator delete(void*, unsigned int)>
    d8fc:	e1a00004 	mov	r0, r4
    d900:	e8bd8070 	pop	{r4, r5, r6, pc}
    d904:	0001a1f4 	.word	0x0001a1f4

0000d908 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>:
    d908:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d90c:	e1a04000 	mov	r4, r0
    d910:	e1a05001 	mov	r5, r1
    d914:	e1a07002 	mov	r7, r2
    d918:	e1a06003 	mov	r6, r3
    d91c:	eb002f4b 	bl	19650 <CDevice::CDevice()>
    d920:	e59fc058 	ldr	ip, [pc, #88]	; d980 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)+0x78>
    d924:	e5845004 	str	r5, [r4, #4]
    d928:	e2840014 	add	r0, r4, #20
    d92c:	e3a05000 	mov	r5, #0
    d930:	e584c000 	str	ip, [r4]
    d934:	e5847008 	str	r7, [r4, #8]
    d938:	e5c4600c 	strb	r6, [r4, #12]
    d93c:	e5845010 	str	r5, [r4, #16]
    d940:	eb000874 	bl	fb18 <CCharGenerator::CCharGenerator()>
    d944:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
    d948:	e284c030 	add	ip, r4, #48	; 0x30
    d94c:	e284103c 	add	r1, r4, #60	; 0x3c
    d950:	e5845018 	str	r5, [r4, #24]
    d954:	e3a03001 	mov	r3, #1
    d958:	e3e02020 	mvn	r2, #32
    d95c:	e1a00004 	mov	r0, r4
    d960:	f44c078f 	vst1.32	{d16}, [ip]
    d964:	f441078f 	vst1.32	{d16}, [r1]
    d968:	e5c45048 	strb	r5, [r4, #72]	; 0x48
    d96c:	e5c45054 	strb	r5, [r4, #84]	; 0x54
    d970:	e1c424b6 	strh	r2, [r4, #70]	; 0x46
    d974:	e5c43044 	strb	r3, [r4, #68]	; 0x44
    d978:	e5843058 	str	r3, [r4, #88]	; 0x58
    d97c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d980:	0001a1f4 	.word	0x0001a1f4

0000d984 <CScreenDevice::GetWidth() const>:
    d984:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    d988:	e12fff1e 	bx	lr

0000d98c <CScreenDevice::GetHeight() const>:
    d98c:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    d990:	e12fff1e 	bx	lr

0000d994 <CScreenDevice::GetColumns() const>:
    d994:	e1a03000 	mov	r3, r0
    d998:	e92d4010 	push	{r4, lr}
    d99c:	e2800014 	add	r0, r0, #20
    d9a0:	e5934024 	ldr	r4, [r3, #36]	; 0x24
    d9a4:	eb00085f 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    d9a8:	e730f014 	udiv	r0, r4, r0
    d9ac:	e8bd8010 	pop	{r4, pc}

0000d9b0 <CScreenDevice::GetRows() const>:
    d9b0:	e1a03000 	mov	r3, r0
    d9b4:	e92d4010 	push	{r4, lr}
    d9b8:	e2800014 	add	r0, r0, #20
    d9bc:	e593402c 	ldr	r4, [r3, #44]	; 0x2c
    d9c0:	eb00085a 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    d9c4:	e730f014 	udiv	r0, r4, r0
    d9c8:	e8bd8010 	pop	{r4, pc}

0000d9cc <CScreenDevice::GetStatus()>:
    d9cc:	e92d4010 	push	{r4, lr}
    d9d0:	e281c02c 	add	ip, r1, #44	; 0x2c
    d9d4:	e281e01c 	add	lr, r1, #28
    d9d8:	eddf6b1a 	vldr	d22, [pc, #104]	; da48 <CScreenDevice::GetStatus()+0x7c>
    d9dc:	eddf7b1b 	vldr	d23, [pc, #108]	; da50 <CScreenDevice::GetStatus()+0x84>
    d9e0:	e1a02000 	mov	r2, r0
    d9e4:	f46e0a8f 	vld1.32	{d16-d17}, [lr]
    d9e8:	f46c2a8f 	vld1.32	{d18-d19}, [ip]
    d9ec:	e591c018 	ldr	ip, [r1, #24]
    d9f0:	e482c004 	str	ip, [r2], #4
    d9f4:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
    d9f8:	f3f04ba6 	vtbl.8	d20, {d16-d19}, d22
    d9fc:	f3f05ba7 	vtbl.8	d21, {d16-d19}, d23
    da00:	e580c014 	str	ip, [r0, #20]
    da04:	e591c040 	ldr	ip, [r1, #64]	; 0x40
    da08:	e5d1e044 	ldrb	lr, [r1, #68]	; 0x44
    da0c:	e580c018 	str	ip, [r0, #24]
    da10:	e1d1c4b6 	ldrh	ip, [r1, #70]	; 0x46
    da14:	f4424a8f 	vst1.32	{d20-d21}, [r2]
    da18:	e5d14048 	ldrb	r4, [r1, #72]	; 0x48
    da1c:	e5c0e01c 	strb	lr, [r0, #28]
    da20:	e1c0c1be 	strh	ip, [r0, #30]
    da24:	e591e04c 	ldr	lr, [r1, #76]	; 0x4c
    da28:	e591c050 	ldr	ip, [r1, #80]	; 0x50
    da2c:	e5d12054 	ldrb	r2, [r1, #84]	; 0x54
    da30:	e5c04020 	strb	r4, [r0, #32]
    da34:	e580e024 	str	lr, [r0, #36]	; 0x24
    da38:	e580c028 	str	ip, [r0, #40]	; 0x28
    da3c:	e5c0202c 	strb	r2, [r0, #44]	; 0x2c
    da40:	e8bd8010 	pop	{r4, pc}
    da44:	e320f000 	nop	{0}
    da48:	03020100 	.word	0x03020100
    da4c:	17161514 	.word	0x17161514
    da50:	1b1a1918 	.word	0x1b1a1918
    da54:	1f1e1d1c 	.word	0x1f1e1d1c

0000da58 <CScreenDevice::SetStatus(TScreenStatus)>:
    da58:	e24dd010 	sub	sp, sp, #16
    da5c:	e92d4010 	push	{r4, lr}
    da60:	e28dc00c 	add	ip, sp, #12
    da64:	e88c000e 	stm	ip, {r1, r2, r3}
    da68:	e590201c 	ldr	r2, [r0, #28]
    da6c:	e59d3010 	ldr	r3, [sp, #16]
    da70:	e1520003 	cmp	r2, r3
    da74:	0a000003 	beq	da88 <CScreenDevice::SetStatus(TScreenStatus)+0x30>
    da78:	e3a00000 	mov	r0, #0
    da7c:	e8bd4010 	pop	{r4, lr}
    da80:	e28dd010 	add	sp, sp, #16
    da84:	e12fff1e 	bx	lr
    da88:	e5901020 	ldr	r1, [r0, #32]
    da8c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    da90:	e1510003 	cmp	r1, r3
    da94:	1afffff7 	bne	da78 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    da98:	e1a04000 	mov	r4, r0
    da9c:	e5900058 	ldr	r0, [r0, #88]	; 0x58
    daa0:	e3500000 	cmp	r0, #0
    daa4:	1a00001d 	bne	db20 <CScreenDevice::SetStatus(TScreenStatus)+0xc8>
    daa8:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
    daac:	e3530000 	cmp	r3, #0
    dab0:	1afffff0 	bne	da78 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    dab4:	e5dd3038 	ldrb	r3, [sp, #56]	; 0x38
    dab8:	e3530000 	cmp	r3, #0
    dabc:	1affffed 	bne	da78 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    dac0:	e59d100c 	ldr	r1, [sp, #12]
    dac4:	e5940018 	ldr	r0, [r4, #24]
    dac8:	ebfffcbf 	bl	cdcc <memcpy>
    dacc:	e28d1014 	add	r1, sp, #20
    dad0:	e2843030 	add	r3, r4, #48	; 0x30
    dad4:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
    dad8:	e5ddc028 	ldrb	ip, [sp, #40]	; 0x28
    dadc:	f4610a8f 	vld1.32	{d16-d17}, [r1]
    dae0:	e1dd02ba 	ldrh	r0, [sp, #42]	; 0x2a
    dae4:	e5dd102c 	ldrb	r1, [sp, #44]	; 0x2c
    dae8:	f4430a8f 	vst1.32	{d16-d17}, [r3]
    daec:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    daf0:	e5842040 	str	r2, [r4, #64]	; 0x40
    daf4:	e3530000 	cmp	r3, #0
    daf8:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    dafc:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
    db00:	e5c4c044 	strb	ip, [r4, #68]	; 0x44
    db04:	e1c404b6 	strh	r0, [r4, #70]	; 0x46
    db08:	e5c41048 	strb	r1, [r4, #72]	; 0x48
    db0c:	e1c424fc 	strd	r2, [r4, #76]	; 0x4c
    db10:	1a00000f 	bne	db54 <CScreenDevice::SetStatus(TScreenStatus)+0xfc>
    db14:	f57ff05f 	dmb	sy
    db18:	e3a00001 	mov	r0, #1
    db1c:	eaffffd6 	b	da7c <CScreenDevice::SetStatus(TScreenStatus)+0x24>
    db20:	ebfff64e 	bl	b460 <EnterCritical>
    db24:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
    db28:	e3530000 	cmp	r3, #0
    db2c:	1a000003 	bne	db40 <CScreenDevice::SetStatus(TScreenStatus)+0xe8>
    db30:	e5dd3038 	ldrb	r3, [sp, #56]	; 0x38
    db34:	e3530000 	cmp	r3, #0
    db38:	0594201c 	ldreq	r2, [r4, #28]
    db3c:	0affffdf 	beq	dac0 <CScreenDevice::SetStatus(TScreenStatus)+0x68>
    db40:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    db44:	e3530000 	cmp	r3, #0
    db48:	0affffca 	beq	da78 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    db4c:	ebfff670 	bl	b514 <LeaveCritical>
    db50:	eaffffc8 	b	da78 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    db54:	ebfff66e 	bl	b514 <LeaveCritical>
    db58:	eaffffed 	b	db14 <CScreenDevice::SetStatus(TScreenStatus)+0xbc>

0000db5c <CScreenDevice::CarriageReturn()>:
    db5c:	e3a03000 	mov	r3, #0
    db60:	e580303c 	str	r3, [r0, #60]	; 0x3c
    db64:	e12fff1e 	bx	lr

0000db68 <CScreenDevice::ClearLineEnd()>:
    db68:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    db6c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    db70:	e590603c 	ldr	r6, [r0, #60]	; 0x3c
    db74:	e1560003 	cmp	r6, r3
    db78:	28bd87f0 	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
    db7c:	e1a0a000 	mov	sl, r0
    db80:	e2805014 	add	r5, r0, #20
    db84:	e3a09000 	mov	r9, #0
    db88:	e3a08000 	mov	r8, #0
    db8c:	e1a00005 	mov	r0, r5
    db90:	e59a7040 	ldr	r7, [sl, #64]	; 0x40
    db94:	eb0007e5 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    db98:	e1500008 	cmp	r0, r8
    db9c:	9a000018 	bls	dc04 <CScreenDevice::ClearLineEnd()+0x9c>
    dba0:	e3a04000 	mov	r4, #0
    dba4:	e1a00005 	mov	r0, r5
    dba8:	eb0007de 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    dbac:	e0843006 	add	r3, r4, r6
    dbb0:	e1500004 	cmp	r0, r4
    dbb4:	9a00000c 	bls	dbec <CScreenDevice::ClearLineEnd()+0x84>
    dbb8:	e59a2024 	ldr	r2, [sl, #36]	; 0x24
    dbbc:	e2844001 	add	r4, r4, #1
    dbc0:	e1530002 	cmp	r3, r2
    dbc4:	2afffff6 	bcs	dba4 <CScreenDevice::ClearLineEnd()+0x3c>
    dbc8:	e59a2028 	ldr	r2, [sl, #40]	; 0x28
    dbcc:	e1570002 	cmp	r7, r2
    dbd0:	2afffff3 	bcs	dba4 <CScreenDevice::ClearLineEnd()+0x3c>
    dbd4:	e59a2020 	ldr	r2, [sl, #32]
    dbd8:	e59a1018 	ldr	r1, [sl, #24]
    dbdc:	e0233792 	mla	r3, r2, r7, r3
    dbe0:	e1a03083 	lsl	r3, r3, #1
    dbe4:	e18190b3 	strh	r9, [r1, r3]
    dbe8:	eaffffed 	b	dba4 <CScreenDevice::ClearLineEnd()+0x3c>
    dbec:	e2888001 	add	r8, r8, #1
    dbf0:	e1a00005 	mov	r0, r5
    dbf4:	eb0007cd 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    dbf8:	e2877001 	add	r7, r7, #1
    dbfc:	e1500008 	cmp	r0, r8
    dc00:	8affffe6 	bhi	dba0 <CScreenDevice::ClearLineEnd()+0x38>
    dc04:	e1a00005 	mov	r0, r5
    dc08:	eb0007c6 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    dc0c:	e59a3024 	ldr	r3, [sl, #36]	; 0x24
    dc10:	e0866000 	add	r6, r6, r0
    dc14:	e1530006 	cmp	r3, r6
    dc18:	8affffda 	bhi	db88 <CScreenDevice::ClearLineEnd()+0x20>
    dc1c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0000dc20 <CScreenDevice::ClearDisplayEnd()>:
    dc20:	e92d4070 	push	{r4, r5, r6, lr}
    dc24:	e1a04000 	mov	r4, r0
    dc28:	ebffffce 	bl	db68 <CScreenDevice::ClearLineEnd()>
    dc2c:	e2840014 	add	r0, r4, #20
    dc30:	e5945040 	ldr	r5, [r4, #64]	; 0x40
    dc34:	eb0007bd 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    dc38:	e5943020 	ldr	r3, [r4, #32]
    dc3c:	e0850000 	add	r0, r5, r0
    dc40:	e594201c 	ldr	r2, [r4, #28]
    dc44:	e5941018 	ldr	r1, [r4, #24]
    dc48:	e0000093 	mul	r0, r3, r0
    dc4c:	e07020a2 	rsbs	r2, r0, r2, lsr #1
    dc50:	08bd8070 	popeq	{r4, r5, r6, pc}
    dc54:	e0810080 	add	r0, r1, r0, lsl #1
    dc58:	e1a02082 	lsl	r2, r2, #1
    dc5c:	e3a01000 	mov	r1, #0
    dc60:	e8bd4070 	pop	{r4, r5, r6, lr}
    dc64:	eafffa97 	b	c6c8 <memset>

0000dc68 <CScreenDevice::Initialize()>:
    dc68:	e92d4070 	push	{r4, r5, r6, lr}
    dc6c:	e1a04000 	mov	r4, r0
    dc70:	e5d0600c 	ldrb	r6, [r0, #12]
    dc74:	e24dd008 	sub	sp, sp, #8
    dc78:	e3560000 	cmp	r6, #0
    dc7c:	0a00002b 	beq	dd30 <CScreenDevice::Initialize()+0xc8>
    dc80:	e5903004 	ldr	r3, [r0, #4]
    dc84:	e5900008 	ldr	r0, [r0, #8]
    dc88:	e5840028 	str	r0, [r4, #40]	; 0x28
    dc8c:	e5843024 	str	r3, [r4, #36]	; 0x24
    dc90:	e5843020 	str	r3, [r4, #32]
    dc94:	e0000390 	mul	r0, r0, r3
    dc98:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
    dc9c:	e1a00080 	lsl	r0, r0, #1
    dca0:	e584001c 	str	r0, [r4, #28]
    dca4:	23e00000 	mvncs	r0, #0
    dca8:	eb002aad 	bl	18764 <operator new[](unsigned int)>
    dcac:	e5945028 	ldr	r5, [r4, #40]	; 0x28
    dcb0:	e5840018 	str	r0, [r4, #24]
    dcb4:	e2846014 	add	r6, r4, #20
    dcb8:	e1a00006 	mov	r0, r6
    dcbc:	eb00079b 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    dcc0:	e735f015 	udiv	r5, r5, r0
    dcc4:	e1a00006 	mov	r0, r6
    dcc8:	eb000798 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    dccc:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    dcd0:	e5843040 	str	r3, [r4, #64]	; 0x40
    dcd4:	e3a03000 	mov	r3, #0
    dcd8:	e584303c 	str	r3, [r4, #60]	; 0x3c
    dcdc:	e0050590 	mul	r5, r0, r5
    dce0:	e1a00004 	mov	r0, r4
    dce4:	e584502c 	str	r5, [r4, #44]	; 0x2c
    dce8:	e5845038 	str	r5, [r4, #56]	; 0x38
    dcec:	ebffffcb 	bl	dc20 <CScreenDevice::ClearDisplayEnd()>
    dcf0:	e5d43044 	ldrb	r3, [r4, #68]	; 0x44
    dcf4:	e3530000 	cmp	r3, #0
    dcf8:	1a000009 	bne	dd24 <CScreenDevice::Initialize()+0xbc>
    dcfc:	eb0008c1 	bl	10008 <CDeviceNameService::Get()>
    dd00:	e30a1130 	movw	r1, #41264	; 0xa130
    dd04:	e3401001 	movt	r1, #1
    dd08:	e1a02004 	mov	r2, r4
    dd0c:	e3a03000 	mov	r3, #0
    dd10:	e3a06001 	mov	r6, #1
    dd14:	eb000847 	bl	fe38 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    dd18:	e1a00006 	mov	r0, r6
    dd1c:	e28dd008 	add	sp, sp, #8
    dd20:	e8bd8070 	pop	{r4, r5, r6, pc}
    dd24:	e1a00004 	mov	r0, r4
    dd28:	ebfffeae 	bl	d7e8 <CScreenDevice::InvertCursor() [clone .part.6]>
    dd2c:	eafffff2 	b	dcfc <CScreenDevice::Initialize()+0x94>
    dd30:	e3a00024 	mov	r0, #36	; 0x24
    dd34:	eb002a89 	bl	18760 <operator new(unsigned int)>
    dd38:	e5942008 	ldr	r2, [r4, #8]
    dd3c:	e5941004 	ldr	r1, [r4, #4]
    dd40:	e1a05000 	mov	r5, r0
    dd44:	e3a03010 	mov	r3, #16
    dd48:	e58d6004 	str	r6, [sp, #4]
    dd4c:	e58d6000 	str	r6, [sp]
    dd50:	eb002d10 	bl	19198 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    dd54:	e5845010 	str	r5, [r4, #16]
    dd58:	e1a00005 	mov	r0, r5
    dd5c:	eb002d81 	bl	19368 <CBcmFrameBuffer::Initialize()>
    dd60:	e3500000 	cmp	r0, #0
    dd64:	0affffeb 	beq	dd18 <CScreenDevice::Initialize()+0xb0>
    dd68:	e5940010 	ldr	r0, [r4, #16]
    dd6c:	eb002dcf 	bl	194b0 <CBcmFrameBuffer::GetDepth() const>
    dd70:	e3500010 	cmp	r0, #16
    dd74:	1affffe7 	bne	dd18 <CScreenDevice::Initialize()+0xb0>
    dd78:	e5940010 	ldr	r0, [r4, #16]
    dd7c:	eb002dcd 	bl	194b8 <CBcmFrameBuffer::GetBuffer() const>
    dd80:	e5840018 	str	r0, [r4, #24]
    dd84:	e5940010 	ldr	r0, [r4, #16]
    dd88:	eb002dcc 	bl	194c0 <CBcmFrameBuffer::GetSize() const>
    dd8c:	e584001c 	str	r0, [r4, #28]
    dd90:	e5940010 	ldr	r0, [r4, #16]
    dd94:	eb002dc3 	bl	194a8 <CBcmFrameBuffer::GetPitch() const>
    dd98:	e5840020 	str	r0, [r4, #32]
    dd9c:	e5940010 	ldr	r0, [r4, #16]
    dda0:	eb002db8 	bl	19488 <CBcmFrameBuffer::GetWidth() const>
    dda4:	e5840024 	str	r0, [r4, #36]	; 0x24
    dda8:	e5940010 	ldr	r0, [r4, #16]
    ddac:	eb002db7 	bl	19490 <CBcmFrameBuffer::GetHeight() const>
    ddb0:	e5943020 	ldr	r3, [r4, #32]
    ddb4:	e1a05000 	mov	r5, r0
    ddb8:	e5840028 	str	r0, [r4, #40]	; 0x28
    ddbc:	e3130003 	tst	r3, #3
    ddc0:	01a030a3 	lsreq	r3, r3, #1
    ddc4:	05843020 	streq	r3, [r4, #32]
    ddc8:	0affffb9 	beq	dcb4 <CScreenDevice::Initialize()+0x4c>
    ddcc:	eaffffd1 	b	dd18 <CScreenDevice::Initialize()+0xb0>

0000ddd0 <CScreenDevice::CursorHome()>:
    ddd0:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    ddd4:	e3a02000 	mov	r2, #0
    ddd8:	e1c023fc 	strd	r2, [r0, #60]	; 0x3c
    dddc:	e12fff1e 	bx	lr

0000dde0 <CScreenDevice::CursorLeft()>:
    dde0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    dde4:	e92d4070 	push	{r4, r5, r6, lr}
    dde8:	e1a04000 	mov	r4, r0
    ddec:	e3530000 	cmp	r3, #0
    ddf0:	1a00000f 	bne	de34 <CScreenDevice::CursorLeft()+0x54>
    ddf4:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    ddf8:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    ddfc:	e1520003 	cmp	r2, r3
    de00:	98bd8070 	popls	{r4, r5, r6, pc}
    de04:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    de08:	e2806014 	add	r6, r0, #20
    de0c:	e1a00006 	mov	r0, r6
    de10:	eb000744 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    de14:	e0455000 	sub	r5, r5, r0
    de18:	e1a00006 	mov	r0, r6
    de1c:	e584503c 	str	r5, [r4, #60]	; 0x3c
    de20:	eb000742 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    de24:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    de28:	e0430000 	sub	r0, r3, r0
    de2c:	e5840040 	str	r0, [r4, #64]	; 0x40
    de30:	e8bd8070 	pop	{r4, r5, r6, pc}
    de34:	e2800014 	add	r0, r0, #20
    de38:	eb00073a 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    de3c:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    de40:	e0430000 	sub	r0, r3, r0
    de44:	e584003c 	str	r0, [r4, #60]	; 0x3c
    de48:	e8bd8070 	pop	{r4, r5, r6, pc}

0000de4c <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    de4c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    de50:	e1a04002 	mov	r4, r2
    de54:	e2444001 	sub	r4, r4, #1
    de58:	e1a05000 	mov	r5, r0
    de5c:	e2806014 	add	r6, r0, #20
    de60:	e1a00006 	mov	r0, r6
    de64:	e1a07001 	mov	r7, r1
    de68:	eb00072e 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    de6c:	e0040490 	mul	r4, r0, r4
    de70:	e1a00006 	mov	r0, r6
    de74:	eb00072d 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    de78:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    de7c:	e1530004 	cmp	r3, r4
    de80:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    de84:	e2477001 	sub	r7, r7, #1
    de88:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    de8c:	e0000790 	mul	r0, r0, r7
    de90:	e1530000 	cmp	r3, r0
    de94:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
    de98:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    de9c:	e1530000 	cmp	r3, r0
    dea0:	8585403c 	strhi	r4, [r5, #60]	; 0x3c
    dea4:	85850040 	strhi	r0, [r5, #64]	; 0x40
    dea8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000deac <CScreenDevice::CursorUp()>:
    deac:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    deb0:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    deb4:	e1520003 	cmp	r2, r3
    deb8:	912fff1e 	bxls	lr
    debc:	e92d4010 	push	{r4, lr}
    dec0:	e1a04000 	mov	r4, r0
    dec4:	e2800014 	add	r0, r0, #20
    dec8:	eb000718 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    decc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    ded0:	e0430000 	sub	r0, r3, r0
    ded4:	e5840040 	str	r0, [r4, #64]	; 0x40
    ded8:	e8bd8010 	pop	{r4, pc}

0000dedc <CScreenDevice::DeleteChars(unsigned int)>:
    dedc:	e12fff1e 	bx	lr

0000dee0 <CScreenDevice::DeleteLines(unsigned int)>:
    dee0:	e12fff1e 	bx	lr

0000dee4 <CScreenDevice::EraseChars(unsigned int)>:
    dee4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dee8:	e251a000 	subs	sl, r1, #0
    deec:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    def0:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    def4:	e1a0b000 	mov	fp, r0
    def8:	e2805014 	add	r5, r0, #20
    defc:	e1a00005 	mov	r0, r5
    df00:	eb000708 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    df04:	e59b3024 	ldr	r3, [fp, #36]	; 0x24
    df08:	e02a4a90 	mla	sl, r0, sl, r4
    df0c:	e59b603c 	ldr	r6, [fp, #60]	; 0x3c
    df10:	e15a0003 	cmp	sl, r3
    df14:	21a0a003 	movcs	sl, r3
    df18:	e156000a 	cmp	r6, sl
    df1c:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df20:	e3a09000 	mov	r9, #0
    df24:	e3a08000 	mov	r8, #0
    df28:	e1a00005 	mov	r0, r5
    df2c:	e59b7040 	ldr	r7, [fp, #64]	; 0x40
    df30:	eb0006fe 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    df34:	e1500008 	cmp	r0, r8
    df38:	9a000018 	bls	dfa0 <CScreenDevice::EraseChars(unsigned int)+0xbc>
    df3c:	e3a04000 	mov	r4, #0
    df40:	e1a00005 	mov	r0, r5
    df44:	eb0006f7 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    df48:	e0843006 	add	r3, r4, r6
    df4c:	e1500004 	cmp	r0, r4
    df50:	9a00000c 	bls	df88 <CScreenDevice::EraseChars(unsigned int)+0xa4>
    df54:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
    df58:	e2844001 	add	r4, r4, #1
    df5c:	e1530002 	cmp	r3, r2
    df60:	2afffff6 	bcs	df40 <CScreenDevice::EraseChars(unsigned int)+0x5c>
    df64:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
    df68:	e1570002 	cmp	r7, r2
    df6c:	2afffff3 	bcs	df40 <CScreenDevice::EraseChars(unsigned int)+0x5c>
    df70:	e59b2020 	ldr	r2, [fp, #32]
    df74:	e59b1018 	ldr	r1, [fp, #24]
    df78:	e0233792 	mla	r3, r2, r7, r3
    df7c:	e1a03083 	lsl	r3, r3, #1
    df80:	e18190b3 	strh	r9, [r1, r3]
    df84:	eaffffed 	b	df40 <CScreenDevice::EraseChars(unsigned int)+0x5c>
    df88:	e2888001 	add	r8, r8, #1
    df8c:	e1a00005 	mov	r0, r5
    df90:	eb0006e6 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    df94:	e2877001 	add	r7, r7, #1
    df98:	e1500008 	cmp	r0, r8
    df9c:	8affffe6 	bhi	df3c <CScreenDevice::EraseChars(unsigned int)+0x58>
    dfa0:	e1a00005 	mov	r0, r5
    dfa4:	eb0006df 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    dfa8:	e0866000 	add	r6, r6, r0
    dfac:	e156000a 	cmp	r6, sl
    dfb0:	3affffdb 	bcc	df24 <CScreenDevice::EraseChars(unsigned int)+0x40>
    dfb4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000dfb8 <CScreenDevice::InsertLines(unsigned int)>:
    dfb8:	e12fff1e 	bx	lr

0000dfbc <CScreenDevice::InsertMode(bool)>:
    dfbc:	e5c01048 	strb	r1, [r0, #72]	; 0x48
    dfc0:	e12fff1e 	bx	lr

0000dfc4 <CScreenDevice::ReverseScroll()>:
    dfc4:	e12fff1e 	bx	lr

0000dfc8 <CScreenDevice::SetCursorMode(bool)>:
    dfc8:	e5c01044 	strb	r1, [r0, #68]	; 0x44
    dfcc:	e12fff1e 	bx	lr

0000dfd0 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    dfd0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    dfd4:	e1a04001 	mov	r4, r1
    dfd8:	e2444001 	sub	r4, r4, #1
    dfdc:	e1a05000 	mov	r5, r0
    dfe0:	e2807014 	add	r7, r0, #20
    dfe4:	e1a06002 	mov	r6, r2
    dfe8:	e1a00007 	mov	r0, r7
    dfec:	eb0006cf 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    dff0:	e0040490 	mul	r4, r0, r4
    dff4:	e1a00007 	mov	r0, r7
    dff8:	eb0006cc 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    dffc:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
    e000:	e0000096 	mul	r0, r6, r0
    e004:	e1520004 	cmp	r2, r4
    e008:	93a03000 	movls	r3, #0
    e00c:	83a03001 	movhi	r3, #1
    e010:	e3500000 	cmp	r0, #0
    e014:	03a03000 	moveq	r3, #0
    e018:	e1520000 	cmp	r2, r0
    e01c:	33a03000 	movcc	r3, #0
    e020:	22033001 	andcs	r3, r3, #1
    e024:	e1540000 	cmp	r4, r0
    e028:	23a03000 	movcs	r3, #0
    e02c:	32033001 	andcc	r3, r3, #1
    e030:	e3530000 	cmp	r3, #0
    e034:	e3a03000 	mov	r3, #0
    e038:	15854034 	strne	r4, [r5, #52]	; 0x34
    e03c:	15850038 	strne	r0, [r5, #56]	; 0x38
    e040:	05954034 	ldreq	r4, [r5, #52]	; 0x34
    e044:	e5854040 	str	r4, [r5, #64]	; 0x40
    e048:	e585303c 	str	r3, [r5, #60]	; 0x3c
    e04c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000e050 <CScreenDevice::SetStandoutMode(unsigned int)>:
    e050:	e351001b 	cmp	r1, #27
    e054:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    e058:	ea00001d 	b	e0d4 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    e05c:	0000e0e4 	.word	0x0000e0e4
    e060:	0000e0d8 	.word	0x0000e0d8
    e064:	0000e0cc 	.word	0x0000e0cc
    e068:	0000e0d4 	.word	0x0000e0d4
    e06c:	0000e0d4 	.word	0x0000e0d4
    e070:	0000e0d4 	.word	0x0000e0d4
    e074:	0000e0d4 	.word	0x0000e0d4
    e078:	0000e0d4 	.word	0x0000e0d4
    e07c:	0000e0d4 	.word	0x0000e0d4
    e080:	0000e0d4 	.word	0x0000e0d4
    e084:	0000e0d4 	.word	0x0000e0d4
    e088:	0000e0d4 	.word	0x0000e0d4
    e08c:	0000e0d4 	.word	0x0000e0d4
    e090:	0000e0d4 	.word	0x0000e0d4
    e094:	0000e0d4 	.word	0x0000e0d4
    e098:	0000e0d4 	.word	0x0000e0d4
    e09c:	0000e0d4 	.word	0x0000e0d4
    e0a0:	0000e0d4 	.word	0x0000e0d4
    e0a4:	0000e0d4 	.word	0x0000e0d4
    e0a8:	0000e0d4 	.word	0x0000e0d4
    e0ac:	0000e0d4 	.word	0x0000e0d4
    e0b0:	0000e0d4 	.word	0x0000e0d4
    e0b4:	0000e0d4 	.word	0x0000e0d4
    e0b8:	0000e0d4 	.word	0x0000e0d4
    e0bc:	0000e0d4 	.word	0x0000e0d4
    e0c0:	0000e0d4 	.word	0x0000e0d4
    e0c4:	0000e0d4 	.word	0x0000e0d4
    e0c8:	0000e0e4 	.word	0x0000e0e4
    e0cc:	e3a0301f 	mov	r3, #31
    e0d0:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    e0d4:	e12fff1e 	bx	lr
    e0d8:	e3a03b3e 	mov	r3, #63488	; 0xf800
    e0dc:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    e0e0:	e12fff1e 	bx	lr
    e0e4:	e3e03020 	mvn	r3, #32
    e0e8:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    e0ec:	e12fff1e 	bx	lr

0000e0f0 <CScreenDevice::Scroll()>:
    e0f0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e0f4:	e1a07000 	mov	r7, r0
    e0f8:	e2800014 	add	r0, r0, #20
    e0fc:	eb00068b 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    e100:	e1a06000 	mov	r6, r0
    e104:	e5972034 	ldr	r2, [r7, #52]	; 0x34
    e108:	e5975020 	ldr	r5, [r7, #32]
    e10c:	e5974038 	ldr	r4, [r7, #56]	; 0x38
    e110:	e5971018 	ldr	r1, [r7, #24]
    e114:	e0444002 	sub	r4, r4, r2
    e118:	e1a03085 	lsl	r3, r5, #1
    e11c:	e0444000 	sub	r4, r4, r0
    e120:	e0050295 	mul	r5, r5, r2
    e124:	e0040493 	mul	r4, r3, r4
    e128:	e0815085 	add	r5, r1, r5, lsl #1
    e12c:	e3540000 	cmp	r4, #0
    e130:	1a000007 	bne	e154 <CScreenDevice::Scroll()+0x64>
    e134:	e0030693 	mul	r3, r3, r6
    e138:	e1b03123 	lsrs	r3, r3, #2
    e13c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    e140:	e1a00005 	mov	r0, r5
    e144:	e1a02103 	lsl	r2, r3, #2
    e148:	e3a01000 	mov	r1, #0
    e14c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    e150:	eafff95c 	b	c6c8 <memset>
    e154:	e0828000 	add	r8, r2, r0
    e158:	e3c4900f 	bic	r9, r4, #15
    e15c:	e1a02009 	mov	r2, r9
    e160:	e1a00005 	mov	r0, r5
    e164:	e0281893 	mla	r8, r3, r8, r1
    e168:	e1a01008 	mov	r1, r8
    e16c:	ebfffb16 	bl	cdcc <memcpy>
    e170:	e204200e 	and	r2, r4, #14
    e174:	e0850009 	add	r0, r5, r9
    e178:	e0881009 	add	r1, r8, r9
    e17c:	ebfffb12 	bl	cdcc <memcpy>
    e180:	e5972020 	ldr	r2, [r7, #32]
    e184:	e3c44003 	bic	r4, r4, #3
    e188:	e0855004 	add	r5, r5, r4
    e18c:	e1a03082 	lsl	r3, r2, #1
    e190:	eaffffe7 	b	e134 <CScreenDevice::Scroll()+0x44>

0000e194 <CScreenDevice::CursorDown()>:
    e194:	e92d4070 	push	{r4, r5, r6, lr}
    e198:	e1a04000 	mov	r4, r0
    e19c:	e2805014 	add	r5, r0, #20
    e1a0:	e1a00005 	mov	r0, r5
    e1a4:	eb000661 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    e1a8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    e1ac:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    e1b0:	e0800003 	add	r0, r0, r3
    e1b4:	e5840040 	str	r0, [r4, #64]	; 0x40
    e1b8:	e1500002 	cmp	r0, r2
    e1bc:	38bd8070 	popcc	{r4, r5, r6, pc}
    e1c0:	e1a00004 	mov	r0, r4
    e1c4:	ebffffc9 	bl	e0f0 <CScreenDevice::Scroll()>
    e1c8:	e1a00005 	mov	r0, r5
    e1cc:	eb000657 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    e1d0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    e1d4:	e0430000 	sub	r0, r3, r0
    e1d8:	e5840040 	str	r0, [r4, #64]	; 0x40
    e1dc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e1e0 <CScreenDevice::NewLine()>:
    e1e0:	e92d4070 	push	{r4, r5, r6, lr}
    e1e4:	e1a04000 	mov	r4, r0
    e1e8:	e2805014 	add	r5, r0, #20
    e1ec:	e3a03000 	mov	r3, #0
    e1f0:	e1a00005 	mov	r0, r5
    e1f4:	e584303c 	str	r3, [r4, #60]	; 0x3c
    e1f8:	eb00064c 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    e1fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    e200:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    e204:	e0800003 	add	r0, r0, r3
    e208:	e5840040 	str	r0, [r4, #64]	; 0x40
    e20c:	e1500002 	cmp	r0, r2
    e210:	38bd8070 	popcc	{r4, r5, r6, pc}
    e214:	e1a00004 	mov	r0, r4
    e218:	ebffffb4 	bl	e0f0 <CScreenDevice::Scroll()>
    e21c:	e1a00005 	mov	r0, r5
    e220:	eb000642 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    e224:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    e228:	e0430000 	sub	r0, r3, r0
    e22c:	e5840040 	str	r0, [r4, #64]	; 0x40
    e230:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e234 <CScreenDevice::CursorRight()>:
    e234:	e92d4070 	push	{r4, r5, r6, lr}
    e238:	e1a04000 	mov	r4, r0
    e23c:	e2805014 	add	r5, r0, #20
    e240:	e1a00005 	mov	r0, r5
    e244:	eb000637 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    e248:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    e24c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    e250:	e0800003 	add	r0, r0, r3
    e254:	e584003c 	str	r0, [r4, #60]	; 0x3c
    e258:	e1500002 	cmp	r0, r2
    e25c:	38bd8070 	popcc	{r4, r5, r6, pc}
    e260:	e3a03000 	mov	r3, #0
    e264:	e1a00005 	mov	r0, r5
    e268:	e584303c 	str	r3, [r4, #60]	; 0x3c
    e26c:	eb00062f 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    e270:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    e274:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    e278:	e0800003 	add	r0, r0, r3
    e27c:	e5840040 	str	r0, [r4, #64]	; 0x40
    e280:	e1500002 	cmp	r0, r2
    e284:	38bd8070 	popcc	{r4, r5, r6, pc}
    e288:	e1a00004 	mov	r0, r4
    e28c:	ebffff97 	bl	e0f0 <CScreenDevice::Scroll()>
    e290:	e1a00005 	mov	r0, r5
    e294:	eb000625 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    e298:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    e29c:	e0430000 	sub	r0, r3, r0
    e2a0:	e5840040 	str	r0, [r4, #64]	; 0x40
    e2a4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e2a8 <CScreenDevice::Tabulator()>:
    e2a8:	e92d4070 	push	{r4, r5, r6, lr}
    e2ac:	e1a04000 	mov	r4, r0
    e2b0:	e2805014 	add	r5, r0, #20
    e2b4:	e1a00005 	mov	r0, r5
    e2b8:	eb00061a 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    e2bc:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    e2c0:	e1a00180 	lsl	r0, r0, #3
    e2c4:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    e2c8:	e0803003 	add	r3, r0, r3
    e2cc:	e733f013 	udiv	r3, r3, r0
    e2d0:	e0000390 	mul	r0, r0, r3
    e2d4:	e584003c 	str	r0, [r4, #60]	; 0x3c
    e2d8:	e1500002 	cmp	r0, r2
    e2dc:	38bd8070 	popcc	{r4, r5, r6, pc}
    e2e0:	e3a03000 	mov	r3, #0
    e2e4:	e1a00005 	mov	r0, r5
    e2e8:	e584303c 	str	r3, [r4, #60]	; 0x3c
    e2ec:	eb00060f 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    e2f0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    e2f4:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    e2f8:	e0800003 	add	r0, r0, r3
    e2fc:	e5840040 	str	r0, [r4, #64]	; 0x40
    e300:	e1500002 	cmp	r0, r2
    e304:	38bd8070 	popcc	{r4, r5, r6, pc}
    e308:	e1a00004 	mov	r0, r4
    e30c:	ebffff77 	bl	e0f0 <CScreenDevice::Scroll()>
    e310:	e1a00005 	mov	r0, r5
    e314:	eb000605 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    e318:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    e31c:	e0430000 	sub	r0, r3, r0
    e320:	e5840040 	str	r0, [r4, #64]	; 0x40
    e324:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e328 <CScreenDevice::DisplayChar(char)>:
    e328:	e6ef3071 	uxtb	r3, r1
    e32c:	e353001f 	cmp	r3, #31
    e330:	912fff1e 	bxls	lr
    e334:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e338:	e2806014 	add	r6, r0, #20
    e33c:	e1d034b6 	ldrh	r3, [r0, #70]	; 0x46
    e340:	e24dd00c 	sub	sp, sp, #12
    e344:	e590a03c 	ldr	sl, [r0, #60]	; 0x3c
    e348:	e590b040 	ldr	fp, [r0, #64]	; 0x40
    e34c:	e1a07000 	mov	r7, r0
    e350:	e3a08000 	mov	r8, #0
    e354:	e1a00006 	mov	r0, r6
    e358:	e1a09001 	mov	r9, r1
    e35c:	e58d3004 	str	r3, [sp, #4]
    e360:	eb0005f2 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    e364:	e1500008 	cmp	r0, r8
    e368:	9a000020 	bls	e3f0 <CScreenDevice::DisplayChar(char)+0xc8>
    e36c:	e3a04000 	mov	r4, #0
    e370:	e1a00006 	mov	r0, r6
    e374:	e08a5004 	add	r5, sl, r4
    e378:	eb0005ea 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    e37c:	e1a02004 	mov	r2, r4
    e380:	e1500004 	cmp	r0, r4
    e384:	e1a03008 	mov	r3, r8
    e388:	e1a01009 	mov	r1, r9
    e38c:	e1a00006 	mov	r0, r6
    e390:	9a000010 	bls	e3d8 <CScreenDevice::DisplayChar(char)+0xb0>
    e394:	eb0005e9 	bl	fb40 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    e398:	e5973024 	ldr	r3, [r7, #36]	; 0x24
    e39c:	e3500000 	cmp	r0, #0
    e3a0:	e59d2004 	ldr	r2, [sp, #4]
    e3a4:	e2844001 	add	r4, r4, #1
    e3a8:	03a02000 	moveq	r2, #0
    e3ac:	e1550003 	cmp	r5, r3
    e3b0:	2affffee 	bcs	e370 <CScreenDevice::DisplayChar(char)+0x48>
    e3b4:	e5973028 	ldr	r3, [r7, #40]	; 0x28
    e3b8:	e153000b 	cmp	r3, fp
    e3bc:	9affffeb 	bls	e370 <CScreenDevice::DisplayChar(char)+0x48>
    e3c0:	e5973020 	ldr	r3, [r7, #32]
    e3c4:	e5971018 	ldr	r1, [r7, #24]
    e3c8:	e0255b93 	mla	r5, r3, fp, r5
    e3cc:	e1a05085 	lsl	r5, r5, #1
    e3d0:	e18120b5 	strh	r2, [r1, r5]
    e3d4:	eaffffe5 	b	e370 <CScreenDevice::DisplayChar(char)+0x48>
    e3d8:	e2888001 	add	r8, r8, #1
    e3dc:	e1a00006 	mov	r0, r6
    e3e0:	eb0005d2 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    e3e4:	e28bb001 	add	fp, fp, #1
    e3e8:	e1500008 	cmp	r0, r8
    e3ec:	8affffde 	bhi	e36c <CScreenDevice::DisplayChar(char)+0x44>
    e3f0:	e1a00006 	mov	r0, r6
    e3f4:	eb0005cb 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    e3f8:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
    e3fc:	e5972024 	ldr	r2, [r7, #36]	; 0x24
    e400:	e0800003 	add	r0, r0, r3
    e404:	e587003c 	str	r0, [r7, #60]	; 0x3c
    e408:	e1500002 	cmp	r0, r2
    e40c:	2a000001 	bcs	e418 <CScreenDevice::DisplayChar(char)+0xf0>
    e410:	e28dd00c 	add	sp, sp, #12
    e414:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e418:	e3a03000 	mov	r3, #0
    e41c:	e1a00006 	mov	r0, r6
    e420:	e587303c 	str	r3, [r7, #60]	; 0x3c
    e424:	eb0005c1 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    e428:	e5973040 	ldr	r3, [r7, #64]	; 0x40
    e42c:	e5972038 	ldr	r2, [r7, #56]	; 0x38
    e430:	e0800003 	add	r0, r0, r3
    e434:	e5870040 	str	r0, [r7, #64]	; 0x40
    e438:	e1500002 	cmp	r0, r2
    e43c:	3afffff3 	bcc	e410 <CScreenDevice::DisplayChar(char)+0xe8>
    e440:	e1a00007 	mov	r0, r7
    e444:	ebffff29 	bl	e0f0 <CScreenDevice::Scroll()>
    e448:	e1a00006 	mov	r0, r6
    e44c:	eb0005b7 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    e450:	e5973040 	ldr	r3, [r7, #64]	; 0x40
    e454:	e0433000 	sub	r3, r3, r0
    e458:	e5873040 	str	r3, [r7, #64]	; 0x40
    e45c:	eaffffeb 	b	e410 <CScreenDevice::DisplayChar(char)+0xe8>

0000e460 <CScreenDevice::Write(void const*, unsigned int)>:
    e460:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e464:	e1a04000 	mov	r4, r0
    e468:	e5900058 	ldr	r0, [r0, #88]	; 0x58
    e46c:	e24dd01c 	sub	sp, sp, #28
    e470:	e1a0b001 	mov	fp, r1
    e474:	e3500000 	cmp	r0, #0
    e478:	e58d2004 	str	r2, [sp, #4]
    e47c:	1a000102 	bne	e88c <CScreenDevice::Write(void const*, unsigned int)+0x42c>
    e480:	e5d43044 	ldrb	r3, [r4, #68]	; 0x44
    e484:	e3a02001 	mov	r2, #1
    e488:	e5c42054 	strb	r2, [r4, #84]	; 0x54
    e48c:	e3530000 	cmp	r3, #0
    e490:	1a0000f7 	bne	e874 <CScreenDevice::Write(void const*, unsigned int)+0x414>
    e494:	e59d3004 	ldr	r3, [sp, #4]
    e498:	e3530000 	cmp	r3, #0
    e49c:	0a000026 	beq	e53c <CScreenDevice::Write(void const*, unsigned int)+0xdc>
    e4a0:	e08b3003 	add	r3, fp, r3
    e4a4:	e1a08003 	mov	r8, r3
    e4a8:	e5946030 	ldr	r6, [r4, #48]	; 0x30
    e4ac:	e0db50d1 	ldrsb	r5, [fp], #1
    e4b0:	e3560007 	cmp	r6, #7
    e4b4:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
    e4b8:	ea000016 	b	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    e4bc:	0000e794 	.word	0x0000e794
    e4c0:	0000e778 	.word	0x0000e778
    e4c4:	0000e720 	.word	0x0000e720
    e4c8:	0000e644 	.word	0x0000e644
    e4cc:	0000e61c 	.word	0x0000e61c
    e4d0:	0000e5f4 	.word	0x0000e5f4
    e4d4:	0000e564 	.word	0x0000e564
    e4d8:	0000e4dc 	.word	0x0000e4dc
    e4dc:	e3550068 	cmp	r5, #104	; 0x68
    e4e0:	0a0000d9 	beq	e84c <CScreenDevice::Write(void const*, unsigned int)+0x3ec>
    e4e4:	e355006c 	cmp	r5, #108	; 0x6c
    e4e8:	0a0000d7 	beq	e84c <CScreenDevice::Write(void const*, unsigned int)+0x3ec>
    e4ec:	e2453030 	sub	r3, r5, #48	; 0x30
    e4f0:	e6ef3073 	uxtb	r3, r3
    e4f4:	e3530009 	cmp	r3, #9
    e4f8:	8a000006 	bhi	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    e4fc:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    e500:	e3a0200a 	mov	r2, #10
    e504:	e0235392 	mla	r3, r2, r3, r5
    e508:	e2433030 	sub	r3, r3, #48	; 0x30
    e50c:	e584304c 	str	r3, [r4, #76]	; 0x4c
    e510:	e3530063 	cmp	r3, #99	; 0x63
    e514:	9a000001 	bls	e520 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    e518:	e3a03000 	mov	r3, #0
    e51c:	e5843030 	str	r3, [r4, #48]	; 0x30
    e520:	e15b0008 	cmp	fp, r8
    e524:	1affffdf 	bne	e4a8 <CScreenDevice::Write(void const*, unsigned int)+0x48>
    e528:	e5d43044 	ldrb	r3, [r4, #68]	; 0x44
    e52c:	e3530000 	cmp	r3, #0
    e530:	0a000001 	beq	e53c <CScreenDevice::Write(void const*, unsigned int)+0xdc>
    e534:	e1a00004 	mov	r0, r4
    e538:	ebfffcaa 	bl	d7e8 <CScreenDevice::InvertCursor() [clone .part.6]>
    e53c:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    e540:	e3a02000 	mov	r2, #0
    e544:	e5c42054 	strb	r2, [r4, #84]	; 0x54
    e548:	e1530002 	cmp	r3, r2
    e54c:	0a000000 	beq	e554 <CScreenDevice::Write(void const*, unsigned int)+0xf4>
    e550:	ebfff3ef 	bl	b514 <LeaveCritical>
    e554:	f57ff05f 	dmb	sy
    e558:	e59d0004 	ldr	r0, [sp, #4]
    e55c:	e28dd01c 	add	sp, sp, #28
    e560:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e564:	e3550048 	cmp	r5, #72	; 0x48
    e568:	0a0000a1 	beq	e7f4 <CScreenDevice::Write(void const*, unsigned int)+0x394>
    e56c:	e3550072 	cmp	r5, #114	; 0x72
    e570:	1a0000c7 	bne	e894 <CScreenDevice::Write(void const*, unsigned int)+0x434>
    e574:	e594504c 	ldr	r5, [r4, #76]	; 0x4c
    e578:	e2847014 	add	r7, r4, #20
    e57c:	e5946050 	ldr	r6, [r4, #80]	; 0x50
    e580:	e1a00007 	mov	r0, r7
    e584:	e2455001 	sub	r5, r5, #1
    e588:	eb000568 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    e58c:	e0050590 	mul	r5, r0, r5
    e590:	e1a00007 	mov	r0, r7
    e594:	eb000565 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    e598:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    e59c:	e0000690 	mul	r0, r0, r6
    e5a0:	e3500000 	cmp	r0, #0
    e5a4:	11550002 	cmpne	r5, r2
    e5a8:	33a03001 	movcc	r3, #1
    e5ac:	23a03000 	movcs	r3, #0
    e5b0:	e1500002 	cmp	r0, r2
    e5b4:	83a03000 	movhi	r3, #0
    e5b8:	92033001 	andls	r3, r3, #1
    e5bc:	e1550000 	cmp	r5, r0
    e5c0:	23a03000 	movcs	r3, #0
    e5c4:	32033001 	andcc	r3, r3, #1
    e5c8:	e3530000 	cmp	r3, #0
    e5cc:	e3a03000 	mov	r3, #0
    e5d0:	15845034 	strne	r5, [r4, #52]	; 0x34
    e5d4:	15840038 	strne	r0, [r4, #56]	; 0x38
    e5d8:	05945034 	ldreq	r5, [r4, #52]	; 0x34
    e5dc:	e15b0008 	cmp	fp, r8
    e5e0:	e584303c 	str	r3, [r4, #60]	; 0x3c
    e5e4:	e5845040 	str	r5, [r4, #64]	; 0x40
    e5e8:	e5843030 	str	r3, [r4, #48]	; 0x30
    e5ec:	1affffad 	bne	e4a8 <CScreenDevice::Write(void const*, unsigned int)+0x48>
    e5f0:	eaffffcc 	b	e528 <CScreenDevice::Write(void const*, unsigned int)+0xc8>
    e5f4:	e2455030 	sub	r5, r5, #48	; 0x30
    e5f8:	e6ef3075 	uxtb	r3, r5
    e5fc:	e3530009 	cmp	r3, #9
    e600:	8affffc4 	bhi	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    e604:	e3a03006 	mov	r3, #6
    e608:	e5845050 	str	r5, [r4, #80]	; 0x50
    e60c:	e5843030 	str	r3, [r4, #48]	; 0x30
    e610:	e15b0008 	cmp	fp, r8
    e614:	1affffa3 	bne	e4a8 <CScreenDevice::Write(void const*, unsigned int)+0x48>
    e618:	eaffffc2 	b	e528 <CScreenDevice::Write(void const*, unsigned int)+0xc8>
    e61c:	e2455030 	sub	r5, r5, #48	; 0x30
    e620:	e6ef3075 	uxtb	r3, r5
    e624:	e3530009 	cmp	r3, #9
    e628:	8affffba 	bhi	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    e62c:	e3a03007 	mov	r3, #7
    e630:	e584504c 	str	r5, [r4, #76]	; 0x4c
    e634:	e5843030 	str	r3, [r4, #48]	; 0x30
    e638:	e15b0008 	cmp	fp, r8
    e63c:	1affff99 	bne	e4a8 <CScreenDevice::Write(void const*, unsigned int)+0x48>
    e640:	eaffffb8 	b	e528 <CScreenDevice::Write(void const*, unsigned int)+0xc8>
    e644:	e245303b 	sub	r3, r5, #59	; 0x3b
    e648:	e3530032 	cmp	r3, #50	; 0x32
    e64c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e650:	eaffffa5 	b	e4ec <CScreenDevice::Write(void const*, unsigned int)+0x8c>
    e654:	0000ea68 	.word	0x0000ea68
    e658:	0000e4ec 	.word	0x0000e4ec
    e65c:	0000e4ec 	.word	0x0000e4ec
    e660:	0000e4ec 	.word	0x0000e4ec
    e664:	0000e4ec 	.word	0x0000e4ec
    e668:	0000e4ec 	.word	0x0000e4ec
    e66c:	0000e4ec 	.word	0x0000e4ec
    e670:	0000e4ec 	.word	0x0000e4ec
    e674:	0000e4ec 	.word	0x0000e4ec
    e678:	0000e4ec 	.word	0x0000e4ec
    e67c:	0000e4ec 	.word	0x0000e4ec
    e680:	0000e4ec 	.word	0x0000e4ec
    e684:	0000e4ec 	.word	0x0000e4ec
    e688:	0000e4ec 	.word	0x0000e4ec
    e68c:	0000e4ec 	.word	0x0000e4ec
    e690:	0000e4ec 	.word	0x0000e4ec
    e694:	0000e4ec 	.word	0x0000e4ec
    e698:	0000e518 	.word	0x0000e518
    e69c:	0000e518 	.word	0x0000e518
    e6a0:	0000e4ec 	.word	0x0000e4ec
    e6a4:	0000e4ec 	.word	0x0000e4ec
    e6a8:	0000e518 	.word	0x0000e518
    e6ac:	0000e4ec 	.word	0x0000e4ec
    e6b0:	0000e4ec 	.word	0x0000e4ec
    e6b4:	0000e4ec 	.word	0x0000e4ec
    e6b8:	0000e4ec 	.word	0x0000e4ec
    e6bc:	0000e4ec 	.word	0x0000e4ec
    e6c0:	0000e4ec 	.word	0x0000e4ec
    e6c4:	0000e4ec 	.word	0x0000e4ec
    e6c8:	0000e9b8 	.word	0x0000e9b8
    e6cc:	0000e4ec 	.word	0x0000e4ec
    e6d0:	0000e4ec 	.word	0x0000e4ec
    e6d4:	0000e4ec 	.word	0x0000e4ec
    e6d8:	0000e4ec 	.word	0x0000e4ec
    e6dc:	0000e4ec 	.word	0x0000e4ec
    e6e0:	0000e4ec 	.word	0x0000e4ec
    e6e4:	0000e4ec 	.word	0x0000e4ec
    e6e8:	0000e4ec 	.word	0x0000e4ec
    e6ec:	0000e4ec 	.word	0x0000e4ec
    e6f0:	0000e4ec 	.word	0x0000e4ec
    e6f4:	0000e4ec 	.word	0x0000e4ec
    e6f8:	0000e4ec 	.word	0x0000e4ec
    e6fc:	0000e4ec 	.word	0x0000e4ec
    e700:	0000e4ec 	.word	0x0000e4ec
    e704:	0000e4ec 	.word	0x0000e4ec
    e708:	0000ea74 	.word	0x0000ea74
    e70c:	0000e4ec 	.word	0x0000e4ec
    e710:	0000e4ec 	.word	0x0000e4ec
    e714:	0000e4ec 	.word	0x0000e4ec
    e718:	0000ea74 	.word	0x0000ea74
    e71c:	0000ea90 	.word	0x0000ea90
    e720:	e245303f 	sub	r3, r5, #63	; 0x3f
    e724:	e3530011 	cmp	r3, #17
    e728:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e72c:	ea00018a 	b	ed5c <CScreenDevice::Write(void const*, unsigned int)+0x8fc>
    e730:	0000ec3c 	.word	0x0000ec3c
    e734:	0000ed5c 	.word	0x0000ed5c
    e738:	0000ec48 	.word	0x0000ec48
    e73c:	0000ebc8 	.word	0x0000ebc8
    e740:	0000ec0c 	.word	0x0000ec0c
    e744:	0000ec70 	.word	0x0000ec70
    e748:	0000ed5c 	.word	0x0000ed5c
    e74c:	0000ed5c 	.word	0x0000ed5c
    e750:	0000ed5c 	.word	0x0000ed5c
    e754:	0000ecbc 	.word	0x0000ecbc
    e758:	0000ed5c 	.word	0x0000ed5c
    e75c:	0000ecd4 	.word	0x0000ecd4
    e760:	0000ece0 	.word	0x0000ece0
    e764:	0000e518 	.word	0x0000e518
    e768:	0000e518 	.word	0x0000e518
    e76c:	0000ed5c 	.word	0x0000ed5c
    e770:	0000ed5c 	.word	0x0000ed5c
    e774:	0000e518 	.word	0x0000e518
    e778:	e355005b 	cmp	r5, #91	; 0x5b
    e77c:	03a03002 	moveq	r3, #2
    e780:	05843030 	streq	r3, [r4, #48]	; 0x30
    e784:	1affff63 	bne	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    e788:	e15b0008 	cmp	fp, r8
    e78c:	1affff45 	bne	e4a8 <CScreenDevice::Write(void const*, unsigned int)+0x48>
    e790:	eaffff64 	b	e528 <CScreenDevice::Write(void const*, unsigned int)+0xc8>
    e794:	e2453008 	sub	r3, r5, #8
    e798:	e3530013 	cmp	r3, #19
    e79c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e7a0:	ea0000da 	b	eb10 <CScreenDevice::Write(void const*, unsigned int)+0x6b0>
    e7a4:	0000e8c4 	.word	0x0000e8c4
    e7a8:	0000e910 	.word	0x0000e910
    e7ac:	0000e944 	.word	0x0000e944
    e7b0:	0000eb10 	.word	0x0000eb10
    e7b4:	0000eb10 	.word	0x0000eb10
    e7b8:	0000e990 	.word	0x0000e990
    e7bc:	0000eb10 	.word	0x0000eb10
    e7c0:	0000eb10 	.word	0x0000eb10
    e7c4:	0000eb10 	.word	0x0000eb10
    e7c8:	0000eb10 	.word	0x0000eb10
    e7cc:	0000eb10 	.word	0x0000eb10
    e7d0:	0000eb10 	.word	0x0000eb10
    e7d4:	0000eb10 	.word	0x0000eb10
    e7d8:	0000eb10 	.word	0x0000eb10
    e7dc:	0000eb10 	.word	0x0000eb10
    e7e0:	0000eb10 	.word	0x0000eb10
    e7e4:	0000eb10 	.word	0x0000eb10
    e7e8:	0000eb10 	.word	0x0000eb10
    e7ec:	0000eb10 	.word	0x0000eb10
    e7f0:	0000e9a4 	.word	0x0000e9a4
    e7f4:	e5945050 	ldr	r5, [r4, #80]	; 0x50
    e7f8:	e2847014 	add	r7, r4, #20
    e7fc:	e1a00007 	mov	r0, r7
    e800:	e594604c 	ldr	r6, [r4, #76]	; 0x4c
    e804:	e2455001 	sub	r5, r5, #1
    e808:	eb0004c6 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    e80c:	e0050590 	mul	r5, r0, r5
    e810:	e1a00007 	mov	r0, r7
    e814:	eb0004c5 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    e818:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e81c:	e1550003 	cmp	r5, r3
    e820:	2affff3c 	bcs	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    e824:	e2466001 	sub	r6, r6, #1
    e828:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    e82c:	e0000690 	mul	r0, r0, r6
    e830:	e1500003 	cmp	r0, r3
    e834:	3affff37 	bcc	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    e838:	e5943038 	ldr	r3, [r4, #56]	; 0x38
    e83c:	e1500003 	cmp	r0, r3
    e840:	3584503c 	strcc	r5, [r4, #60]	; 0x3c
    e844:	35840040 	strcc	r0, [r4, #64]	; 0x40
    e848:	eaffff32 	b	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    e84c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    e850:	e3530019 	cmp	r3, #25
    e854:	1affff2f 	bne	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    e858:	e2455068 	sub	r5, r5, #104	; 0x68
    e85c:	e3a03000 	mov	r3, #0
    e860:	e16f5f15 	clz	r5, r5
    e864:	e5843030 	str	r3, [r4, #48]	; 0x30
    e868:	e1a052a5 	lsr	r5, r5, #5
    e86c:	e5c45044 	strb	r5, [r4, #68]	; 0x44
    e870:	eaffff2a 	b	e520 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    e874:	e1a00004 	mov	r0, r4
    e878:	ebfffbda 	bl	d7e8 <CScreenDevice::InvertCursor() [clone .part.6]>
    e87c:	e59d3004 	ldr	r3, [sp, #4]
    e880:	e3530000 	cmp	r3, #0
    e884:	1affff05 	bne	e4a0 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    e888:	eaffff26 	b	e528 <CScreenDevice::Write(void const*, unsigned int)+0xc8>
    e88c:	ebfff2f3 	bl	b460 <EnterCritical>
    e890:	eafffefa 	b	e480 <CScreenDevice::Write(void const*, unsigned int)+0x20>
    e894:	e2453030 	sub	r3, r5, #48	; 0x30
    e898:	e6ef3073 	uxtb	r3, r3
    e89c:	e3530009 	cmp	r3, #9
    e8a0:	8affff1c 	bhi	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    e8a4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    e8a8:	e3a0200a 	mov	r2, #10
    e8ac:	e0235392 	mla	r3, r2, r3, r5
    e8b0:	e2433030 	sub	r3, r3, #48	; 0x30
    e8b4:	e5843050 	str	r3, [r4, #80]	; 0x50
    e8b8:	e35300c7 	cmp	r3, #199	; 0xc7
    e8bc:	8affff15 	bhi	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    e8c0:	eaffff16 	b	e520 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    e8c4:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    e8c8:	e3530000 	cmp	r3, #0
    e8cc:	1a000175 	bne	eea8 <CScreenDevice::Write(void const*, unsigned int)+0xa48>
    e8d0:	e5942040 	ldr	r2, [r4, #64]	; 0x40
    e8d4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    e8d8:	e1520003 	cmp	r2, r3
    e8dc:	9affff0f 	bls	e520 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    e8e0:	e2845014 	add	r5, r4, #20
    e8e4:	e5946024 	ldr	r6, [r4, #36]	; 0x24
    e8e8:	e1a00005 	mov	r0, r5
    e8ec:	eb00048d 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    e8f0:	e0466000 	sub	r6, r6, r0
    e8f4:	e1a00005 	mov	r0, r5
    e8f8:	e584603c 	str	r6, [r4, #60]	; 0x3c
    e8fc:	eb00048b 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    e900:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    e904:	e0433000 	sub	r3, r3, r0
    e908:	e5843040 	str	r3, [r4, #64]	; 0x40
    e90c:	eaffff03 	b	e520 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    e910:	e2845014 	add	r5, r4, #20
    e914:	e1a00005 	mov	r0, r5
    e918:	eb000482 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    e91c:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    e920:	e1a00180 	lsl	r0, r0, #3
    e924:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    e928:	e0803003 	add	r3, r0, r3
    e92c:	e733f013 	udiv	r3, r3, r0
    e930:	e0000390 	mul	r0, r0, r3
    e934:	e584003c 	str	r0, [r4, #60]	; 0x3c
    e938:	e1500002 	cmp	r0, r2
    e93c:	3afffef7 	bcc	e520 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    e940:	ea000000 	b	e948 <CScreenDevice::Write(void const*, unsigned int)+0x4e8>
    e944:	e2845014 	add	r5, r4, #20
    e948:	e3a03000 	mov	r3, #0
    e94c:	e1a00005 	mov	r0, r5
    e950:	e584303c 	str	r3, [r4, #60]	; 0x3c
    e954:	eb000475 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    e958:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    e95c:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    e960:	e0800003 	add	r0, r0, r3
    e964:	e5840040 	str	r0, [r4, #64]	; 0x40
    e968:	e1500002 	cmp	r0, r2
    e96c:	3afffeeb 	bcc	e520 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    e970:	e1a00004 	mov	r0, r4
    e974:	ebfffddd 	bl	e0f0 <CScreenDevice::Scroll()>
    e978:	e1a00005 	mov	r0, r5
    e97c:	eb00046b 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    e980:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    e984:	e0433000 	sub	r3, r3, r0
    e988:	e5843040 	str	r3, [r4, #64]	; 0x40
    e98c:	eafffee3 	b	e520 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    e990:	e3a03000 	mov	r3, #0
    e994:	e15b0008 	cmp	fp, r8
    e998:	e584303c 	str	r3, [r4, #60]	; 0x3c
    e99c:	1afffec1 	bne	e4a8 <CScreenDevice::Write(void const*, unsigned int)+0x48>
    e9a0:	eafffee0 	b	e528 <CScreenDevice::Write(void const*, unsigned int)+0xc8>
    e9a4:	e3a03001 	mov	r3, #1
    e9a8:	e15b0008 	cmp	fp, r8
    e9ac:	e5843030 	str	r3, [r4, #48]	; 0x30
    e9b0:	1afffebc 	bne	e4a8 <CScreenDevice::Write(void const*, unsigned int)+0x48>
    e9b4:	eafffedb 	b	e528 <CScreenDevice::Write(void const*, unsigned int)+0xc8>
    e9b8:	e594604c 	ldr	r6, [r4, #76]	; 0x4c
    e9bc:	e3560000 	cmp	r6, #0
    e9c0:	0afffed4 	beq	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    e9c4:	e594703c 	ldr	r7, [r4, #60]	; 0x3c
    e9c8:	e2845014 	add	r5, r4, #20
    e9cc:	e1a00005 	mov	r0, r5
    e9d0:	eb000454 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    e9d4:	e594a024 	ldr	sl, [r4, #36]	; 0x24
    e9d8:	e0207690 	mla	r0, r0, r6, r7
    e9dc:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
    e9e0:	e150000a 	cmp	r0, sl
    e9e4:	31a03000 	movcc	r3, r0
    e9e8:	21a0300a 	movcs	r3, sl
    e9ec:	e1530006 	cmp	r3, r6
    e9f0:	9afffec8 	bls	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    e9f4:	e58d8008 	str	r8, [sp, #8]
    e9f8:	e1a08004 	mov	r8, r4
    e9fc:	e1a04003 	mov	r4, r3
    ea00:	e3a0a000 	mov	sl, #0
    ea04:	e1a00005 	mov	r0, r5
    ea08:	e5989040 	ldr	r9, [r8, #64]	; 0x40
    ea0c:	eb000447 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    ea10:	e150000a 	cmp	r0, sl
    ea14:	9a0000fa 	bls	ee04 <CScreenDevice::Write(void const*, unsigned int)+0x9a4>
    ea18:	e3a07000 	mov	r7, #0
    ea1c:	e1a00005 	mov	r0, r5
    ea20:	eb000440 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    ea24:	e0873006 	add	r3, r7, r6
    ea28:	e1500007 	cmp	r0, r7
    ea2c:	9a0000ee 	bls	edec <CScreenDevice::Write(void const*, unsigned int)+0x98c>
    ea30:	e5982024 	ldr	r2, [r8, #36]	; 0x24
    ea34:	e2877001 	add	r7, r7, #1
    ea38:	e1530002 	cmp	r3, r2
    ea3c:	2afffff6 	bcs	ea1c <CScreenDevice::Write(void const*, unsigned int)+0x5bc>
    ea40:	e5982028 	ldr	r2, [r8, #40]	; 0x28
    ea44:	e1520009 	cmp	r2, r9
    ea48:	9afffff3 	bls	ea1c <CScreenDevice::Write(void const*, unsigned int)+0x5bc>
    ea4c:	e5982020 	ldr	r2, [r8, #32]
    ea50:	e5980018 	ldr	r0, [r8, #24]
    ea54:	e0233992 	mla	r3, r2, r9, r3
    ea58:	e3a02000 	mov	r2, #0
    ea5c:	e1a03083 	lsl	r3, r3, #1
    ea60:	e18020b3 	strh	r2, [r0, r3]
    ea64:	eaffffec 	b	ea1c <CScreenDevice::Write(void const*, unsigned int)+0x5bc>
    ea68:	e3a03005 	mov	r3, #5
    ea6c:	e5843030 	str	r3, [r4, #48]	; 0x30
    ea70:	eafffeaa 	b	e520 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    ea74:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    ea78:	e3530004 	cmp	r3, #4
    ea7c:	02455068 	subeq	r5, r5, #104	; 0x68
    ea80:	016f5f15 	clzeq	r5, r5
    ea84:	01a052a5 	lsreq	r5, r5, #5
    ea88:	05c45048 	strbeq	r5, [r4, #72]	; 0x48
    ea8c:	eafffea1 	b	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    ea90:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    ea94:	e353001b 	cmp	r3, #27
    ea98:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    ea9c:	eafffe9d 	b	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    eaa0:	0000ed94 	.word	0x0000ed94
    eaa4:	0000ed88 	.word	0x0000ed88
    eaa8:	0000ed7c 	.word	0x0000ed7c
    eaac:	0000e518 	.word	0x0000e518
    eab0:	0000e518 	.word	0x0000e518
    eab4:	0000e518 	.word	0x0000e518
    eab8:	0000e518 	.word	0x0000e518
    eabc:	0000e518 	.word	0x0000e518
    eac0:	0000e518 	.word	0x0000e518
    eac4:	0000e518 	.word	0x0000e518
    eac8:	0000e518 	.word	0x0000e518
    eacc:	0000e518 	.word	0x0000e518
    ead0:	0000e518 	.word	0x0000e518
    ead4:	0000e518 	.word	0x0000e518
    ead8:	0000e518 	.word	0x0000e518
    eadc:	0000e518 	.word	0x0000e518
    eae0:	0000e518 	.word	0x0000e518
    eae4:	0000e518 	.word	0x0000e518
    eae8:	0000e518 	.word	0x0000e518
    eaec:	0000e518 	.word	0x0000e518
    eaf0:	0000e518 	.word	0x0000e518
    eaf4:	0000e518 	.word	0x0000e518
    eaf8:	0000e518 	.word	0x0000e518
    eafc:	0000e518 	.word	0x0000e518
    eb00:	0000e518 	.word	0x0000e518
    eb04:	0000e518 	.word	0x0000e518
    eb08:	0000e518 	.word	0x0000e518
    eb0c:	0000ed94 	.word	0x0000ed94
    eb10:	e6ef3075 	uxtb	r3, r5
    eb14:	e353001f 	cmp	r3, #31
    eb18:	9afffe80 	bls	e520 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    eb1c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    eb20:	e284a014 	add	sl, r4, #20
    eb24:	e58d3008 	str	r3, [sp, #8]
    eb28:	e1d434b6 	ldrh	r3, [r4, #70]	; 0x46
    eb2c:	e594903c 	ldr	r9, [r4, #60]	; 0x3c
    eb30:	e58d8010 	str	r8, [sp, #16]
    eb34:	e1a08006 	mov	r8, r6
    eb38:	e58db014 	str	fp, [sp, #20]
    eb3c:	e1a0b003 	mov	fp, r3
    eb40:	e58d600c 	str	r6, [sp, #12]
    eb44:	e1a0000a 	mov	r0, sl
    eb48:	eb0003f8 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    eb4c:	e1500008 	cmp	r0, r8
    eb50:	9a0000b8 	bls	ee38 <CScreenDevice::Write(void const*, unsigned int)+0x9d8>
    eb54:	e59d600c 	ldr	r6, [sp, #12]
    eb58:	e1a0000a 	mov	r0, sl
    eb5c:	e0897006 	add	r7, r9, r6
    eb60:	eb0003f0 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    eb64:	e1a02006 	mov	r2, r6
    eb68:	e1500006 	cmp	r0, r6
    eb6c:	e1a03008 	mov	r3, r8
    eb70:	e1a01005 	mov	r1, r5
    eb74:	e1a0000a 	mov	r0, sl
    eb78:	9a0000a9 	bls	ee24 <CScreenDevice::Write(void const*, unsigned int)+0x9c4>
    eb7c:	eb0003ef 	bl	fb40 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    eb80:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    eb84:	e3500000 	cmp	r0, #0
    eb88:	e2866001 	add	r6, r6, #1
    eb8c:	11a0200b 	movne	r2, fp
    eb90:	03a02000 	moveq	r2, #0
    eb94:	e1570003 	cmp	r7, r3
    eb98:	2affffee 	bcs	eb58 <CScreenDevice::Write(void const*, unsigned int)+0x6f8>
    eb9c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    eba0:	e59d1008 	ldr	r1, [sp, #8]
    eba4:	e1530001 	cmp	r3, r1
    eba8:	9affffea 	bls	eb58 <CScreenDevice::Write(void const*, unsigned int)+0x6f8>
    ebac:	e5943020 	ldr	r3, [r4, #32]
    ebb0:	e1a00001 	mov	r0, r1
    ebb4:	e5941018 	ldr	r1, [r4, #24]
    ebb8:	e0277093 	mla	r7, r3, r0, r7
    ebbc:	e1a07087 	lsl	r7, r7, #1
    ebc0:	e18120b7 	strh	r2, [r1, r7]
    ebc4:	eaffffe3 	b	eb58 <CScreenDevice::Write(void const*, unsigned int)+0x6f8>
    ebc8:	e2845014 	add	r5, r4, #20
    ebcc:	e1a00005 	mov	r0, r5
    ebd0:	eb0003d6 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    ebd4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    ebd8:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    ebdc:	e0800003 	add	r0, r0, r3
    ebe0:	e5840040 	str	r0, [r4, #64]	; 0x40
    ebe4:	e1500002 	cmp	r0, r2
    ebe8:	3afffe4a 	bcc	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    ebec:	e1a00004 	mov	r0, r4
    ebf0:	ebfffd3e 	bl	e0f0 <CScreenDevice::Scroll()>
    ebf4:	e1a00005 	mov	r0, r5
    ebf8:	eb0003cc 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    ebfc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    ec00:	e0433000 	sub	r3, r3, r0
    ec04:	e5843040 	str	r3, [r4, #64]	; 0x40
    ec08:	eafffe42 	b	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    ec0c:	e2845014 	add	r5, r4, #20
    ec10:	e1a00005 	mov	r0, r5
    ec14:	eb0003c3 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    ec18:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    ec1c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    ec20:	e0800003 	add	r0, r0, r3
    ec24:	e584003c 	str	r0, [r4, #60]	; 0x3c
    ec28:	e1500002 	cmp	r0, r2
    ec2c:	3afffe39 	bcc	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    ec30:	e3a03000 	mov	r3, #0
    ec34:	e584303c 	str	r3, [r4, #60]	; 0x3c
    ec38:	eaffffe3 	b	ebcc <CScreenDevice::Write(void const*, unsigned int)+0x76c>
    ec3c:	e3a03004 	mov	r3, #4
    ec40:	e5843030 	str	r3, [r4, #48]	; 0x30
    ec44:	eafffe35 	b	e520 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    ec48:	e5942040 	ldr	r2, [r4, #64]	; 0x40
    ec4c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    ec50:	e1520003 	cmp	r2, r3
    ec54:	9afffe2f 	bls	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    ec58:	e2840014 	add	r0, r4, #20
    ec5c:	eb0003b3 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    ec60:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    ec64:	e0433000 	sub	r3, r3, r0
    ec68:	e5843040 	str	r3, [r4, #64]	; 0x40
    ec6c:	eafffe29 	b	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    ec70:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    ec74:	e3530000 	cmp	r3, #0
    ec78:	1a000048 	bne	eda0 <CScreenDevice::Write(void const*, unsigned int)+0x940>
    ec7c:	e5942040 	ldr	r2, [r4, #64]	; 0x40
    ec80:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    ec84:	e1520003 	cmp	r2, r3
    ec88:	9afffe22 	bls	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    ec8c:	e2845014 	add	r5, r4, #20
    ec90:	e5946024 	ldr	r6, [r4, #36]	; 0x24
    ec94:	e1a00005 	mov	r0, r5
    ec98:	eb0003a2 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    ec9c:	e0466000 	sub	r6, r6, r0
    eca0:	e1a00005 	mov	r0, r5
    eca4:	e584603c 	str	r6, [r4, #60]	; 0x3c
    eca8:	eb0003a0 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    ecac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    ecb0:	e0433000 	sub	r3, r3, r0
    ecb4:	e5843040 	str	r3, [r4, #64]	; 0x40
    ecb8:	eafffe16 	b	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    ecbc:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    ecc0:	e3a02000 	mov	r2, #0
    ecc4:	e5843040 	str	r3, [r4, #64]	; 0x40
    ecc8:	e584203c 	str	r2, [r4, #60]	; 0x3c
    eccc:	e5842030 	str	r2, [r4, #48]	; 0x30
    ecd0:	eafffe12 	b	e520 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    ecd4:	e1a00004 	mov	r0, r4
    ecd8:	ebfffbd0 	bl	dc20 <CScreenDevice::ClearDisplayEnd()>
    ecdc:	eafffe0d 	b	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    ece0:	e594703c 	ldr	r7, [r4, #60]	; 0x3c
    ece4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ece8:	e1570003 	cmp	r7, r3
    ecec:	2afffe09 	bcs	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    ecf0:	e2846014 	add	r6, r4, #20
    ecf4:	e3a0a000 	mov	sl, #0
    ecf8:	e1a00006 	mov	r0, r6
    ecfc:	e5949040 	ldr	r9, [r4, #64]	; 0x40
    ed00:	eb00038a 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    ed04:	e150000a 	cmp	r0, sl
    ed08:	9a000030 	bls	edd0 <CScreenDevice::Write(void const*, unsigned int)+0x970>
    ed0c:	e3a05000 	mov	r5, #0
    ed10:	e1a00006 	mov	r0, r6
    ed14:	eb000383 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    ed18:	e0853007 	add	r3, r5, r7
    ed1c:	e1500005 	cmp	r0, r5
    ed20:	9a000024 	bls	edb8 <CScreenDevice::Write(void const*, unsigned int)+0x958>
    ed24:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    ed28:	e2855001 	add	r5, r5, #1
    ed2c:	e1530002 	cmp	r3, r2
    ed30:	2afffff6 	bcs	ed10 <CScreenDevice::Write(void const*, unsigned int)+0x8b0>
    ed34:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    ed38:	e1520009 	cmp	r2, r9
    ed3c:	9afffff3 	bls	ed10 <CScreenDevice::Write(void const*, unsigned int)+0x8b0>
    ed40:	e5942020 	ldr	r2, [r4, #32]
    ed44:	e5941018 	ldr	r1, [r4, #24]
    ed48:	e0233992 	mla	r3, r2, r9, r3
    ed4c:	e3a02000 	mov	r2, #0
    ed50:	e1a03083 	lsl	r3, r3, #1
    ed54:	e18120b3 	strh	r2, [r1, r3]
    ed58:	eaffffec 	b	ed10 <CScreenDevice::Write(void const*, unsigned int)+0x8b0>
    ed5c:	e2455030 	sub	r5, r5, #48	; 0x30
    ed60:	e6ef3075 	uxtb	r3, r5
    ed64:	e3530009 	cmp	r3, #9
    ed68:	8afffdea 	bhi	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    ed6c:	e3a03003 	mov	r3, #3
    ed70:	e584504c 	str	r5, [r4, #76]	; 0x4c
    ed74:	e5843030 	str	r3, [r4, #48]	; 0x30
    ed78:	eafffde8 	b	e520 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    ed7c:	e3a0301f 	mov	r3, #31
    ed80:	e1c434b6 	strh	r3, [r4, #70]	; 0x46
    ed84:	eafffde3 	b	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    ed88:	e3a03b3e 	mov	r3, #63488	; 0xf800
    ed8c:	e1c434b6 	strh	r3, [r4, #70]	; 0x46
    ed90:	eafffde0 	b	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    ed94:	e3e03020 	mvn	r3, #32
    ed98:	e1c434b6 	strh	r3, [r4, #70]	; 0x46
    ed9c:	eafffddd 	b	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    eda0:	e2840014 	add	r0, r4, #20
    eda4:	eb00035f 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    eda8:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    edac:	e0433000 	sub	r3, r3, r0
    edb0:	e584303c 	str	r3, [r4, #60]	; 0x3c
    edb4:	eafffdd7 	b	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    edb8:	e28aa001 	add	sl, sl, #1
    edbc:	e1a00006 	mov	r0, r6
    edc0:	eb00035a 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    edc4:	e2899001 	add	r9, r9, #1
    edc8:	e150000a 	cmp	r0, sl
    edcc:	8affffce 	bhi	ed0c <CScreenDevice::Write(void const*, unsigned int)+0x8ac>
    edd0:	e1a00006 	mov	r0, r6
    edd4:	eb000353 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    edd8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    eddc:	e0877000 	add	r7, r7, r0
    ede0:	e1530007 	cmp	r3, r7
    ede4:	8affffc2 	bhi	ecf4 <CScreenDevice::Write(void const*, unsigned int)+0x894>
    ede8:	eafffdca 	b	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    edec:	e28aa001 	add	sl, sl, #1
    edf0:	e1a00005 	mov	r0, r5
    edf4:	eb00034d 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    edf8:	e2899001 	add	r9, r9, #1
    edfc:	e150000a 	cmp	r0, sl
    ee00:	8affff04 	bhi	ea18 <CScreenDevice::Write(void const*, unsigned int)+0x5b8>
    ee04:	e1a00005 	mov	r0, r5
    ee08:	eb000346 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    ee0c:	e0866000 	add	r6, r6, r0
    ee10:	e1540006 	cmp	r4, r6
    ee14:	8afffef9 	bhi	ea00 <CScreenDevice::Write(void const*, unsigned int)+0x5a0>
    ee18:	e1a04008 	mov	r4, r8
    ee1c:	e59d8008 	ldr	r8, [sp, #8]
    ee20:	eafffdbc 	b	e518 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    ee24:	e59d3008 	ldr	r3, [sp, #8]
    ee28:	e2888001 	add	r8, r8, #1
    ee2c:	e2833001 	add	r3, r3, #1
    ee30:	e58d3008 	str	r3, [sp, #8]
    ee34:	eaffff42 	b	eb44 <CScreenDevice::Write(void const*, unsigned int)+0x6e4>
    ee38:	e1a0000a 	mov	r0, sl
    ee3c:	e59d8010 	ldr	r8, [sp, #16]
    ee40:	e59db014 	ldr	fp, [sp, #20]
    ee44:	eb000337 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    ee48:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    ee4c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    ee50:	e0800003 	add	r0, r0, r3
    ee54:	e584003c 	str	r0, [r4, #60]	; 0x3c
    ee58:	e1500002 	cmp	r0, r2
    ee5c:	3afffdaf 	bcc	e520 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    ee60:	e3a03000 	mov	r3, #0
    ee64:	e1a0000a 	mov	r0, sl
    ee68:	e584303c 	str	r3, [r4, #60]	; 0x3c
    ee6c:	eb00032f 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    ee70:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    ee74:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    ee78:	e0800003 	add	r0, r0, r3
    ee7c:	e5840040 	str	r0, [r4, #64]	; 0x40
    ee80:	e1500002 	cmp	r0, r2
    ee84:	3afffda5 	bcc	e520 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    ee88:	e1a00004 	mov	r0, r4
    ee8c:	ebfffc97 	bl	e0f0 <CScreenDevice::Scroll()>
    ee90:	e1a0000a 	mov	r0, sl
    ee94:	eb000325 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    ee98:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    ee9c:	e0433000 	sub	r3, r3, r0
    eea0:	e5843040 	str	r3, [r4, #64]	; 0x40
    eea4:	eafffd9d 	b	e520 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    eea8:	e2840014 	add	r0, r4, #20
    eeac:	eb00031d 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    eeb0:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    eeb4:	e0433000 	sub	r3, r3, r0
    eeb8:	e584303c 	str	r3, [r4, #60]	; 0x3c
    eebc:	eafffd97 	b	e520 <CScreenDevice::Write(void const*, unsigned int)+0xc0>

0000eec0 <CScreenDevice::Write(char)>:
    eec0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eec4:	e1a04000 	mov	r4, r0
    eec8:	e5906030 	ldr	r6, [r0, #48]	; 0x30
    eecc:	e24dd00c 	sub	sp, sp, #12
    eed0:	e1a05001 	mov	r5, r1
    eed4:	e3560007 	cmp	r6, #7
    eed8:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
    eedc:	ea000021 	b	ef68 <CScreenDevice::Write(char)+0xa8>
    eee0:	0000efb4 	.word	0x0000efb4
    eee4:	0000f014 	.word	0x0000f014
    eee8:	0000f028 	.word	0x0000f028
    eeec:	0000f080 	.word	0x0000f080
    eef0:	0000f15c 	.word	0x0000f15c
    eef4:	0000f17c 	.word	0x0000f17c
    eef8:	0000f19c 	.word	0x0000f19c
    eefc:	0000ef78 	.word	0x0000ef78
    ef00:	e2805014 	add	r5, r0, #20
    ef04:	e1a00005 	mov	r0, r5
    ef08:	eb000306 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    ef0c:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    ef10:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    ef14:	e0800003 	add	r0, r0, r3
    ef18:	e584003c 	str	r0, [r4, #60]	; 0x3c
    ef1c:	e1500002 	cmp	r0, r2
    ef20:	3a000010 	bcc	ef68 <CScreenDevice::Write(char)+0xa8>
    ef24:	e1a00005 	mov	r0, r5
    ef28:	e3a03000 	mov	r3, #0
    ef2c:	e584303c 	str	r3, [r4, #60]	; 0x3c
    ef30:	eb0002fe 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    ef34:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    ef38:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    ef3c:	e0800003 	add	r0, r0, r3
    ef40:	e5840040 	str	r0, [r4, #64]	; 0x40
    ef44:	e1500002 	cmp	r0, r2
    ef48:	3a000006 	bcc	ef68 <CScreenDevice::Write(char)+0xa8>
    ef4c:	e1a00004 	mov	r0, r4
    ef50:	ebfffc66 	bl	e0f0 <CScreenDevice::Scroll()>
    ef54:	e1a00005 	mov	r0, r5
    ef58:	eb0002f4 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    ef5c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    ef60:	e0433000 	sub	r3, r3, r0
    ef64:	e5843040 	str	r3, [r4, #64]	; 0x40
    ef68:	e3a03000 	mov	r3, #0
    ef6c:	e5843030 	str	r3, [r4, #48]	; 0x30
    ef70:	e28dd00c 	add	sp, sp, #12
    ef74:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef78:	e3510068 	cmp	r1, #104	; 0x68
    ef7c:	0a000095 	beq	f1d8 <CScreenDevice::Write(char)+0x318>
    ef80:	e351006c 	cmp	r1, #108	; 0x6c
    ef84:	0a000093 	beq	f1d8 <CScreenDevice::Write(char)+0x318>
    ef88:	e2455030 	sub	r5, r5, #48	; 0x30
    ef8c:	e6ef3075 	uxtb	r3, r5
    ef90:	e3530009 	cmp	r3, #9
    ef94:	8afffff3 	bhi	ef68 <CScreenDevice::Write(char)+0xa8>
    ef98:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    ef9c:	e3a0200a 	mov	r2, #10
    efa0:	e0255392 	mla	r5, r2, r3, r5
    efa4:	e584504c 	str	r5, [r4, #76]	; 0x4c
    efa8:	e3550063 	cmp	r5, #99	; 0x63
    efac:	8affffed 	bhi	ef68 <CScreenDevice::Write(char)+0xa8>
    efb0:	eaffffee 	b	ef70 <CScreenDevice::Write(char)+0xb0>
    efb4:	e2413008 	sub	r3, r1, #8
    efb8:	e3530013 	cmp	r3, #19
    efbc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    efc0:	ea000135 	b	f49c <CScreenDevice::Write(char)+0x5dc>
    efc4:	0000f308 	.word	0x0000f308
    efc8:	0000f2d4 	.word	0x0000f2d4
    efcc:	0000f288 	.word	0x0000f288
    efd0:	0000f49c 	.word	0x0000f49c
    efd4:	0000f49c 	.word	0x0000f49c
    efd8:	0000f27c 	.word	0x0000f27c
    efdc:	0000f49c 	.word	0x0000f49c
    efe0:	0000f49c 	.word	0x0000f49c
    efe4:	0000f49c 	.word	0x0000f49c
    efe8:	0000f49c 	.word	0x0000f49c
    efec:	0000f49c 	.word	0x0000f49c
    eff0:	0000f49c 	.word	0x0000f49c
    eff4:	0000f49c 	.word	0x0000f49c
    eff8:	0000f49c 	.word	0x0000f49c
    effc:	0000f49c 	.word	0x0000f49c
    f000:	0000f49c 	.word	0x0000f49c
    f004:	0000f49c 	.word	0x0000f49c
    f008:	0000f49c 	.word	0x0000f49c
    f00c:	0000f49c 	.word	0x0000f49c
    f010:	0000f270 	.word	0x0000f270
    f014:	e351005b 	cmp	r1, #91	; 0x5b
    f018:	03a03002 	moveq	r3, #2
    f01c:	05803030 	streq	r3, [r0, #48]	; 0x30
    f020:	0affffd2 	beq	ef70 <CScreenDevice::Write(char)+0xb0>
    f024:	eaffffcf 	b	ef68 <CScreenDevice::Write(char)+0xa8>
    f028:	e241303f 	sub	r3, r1, #63	; 0x3f
    f02c:	e3530011 	cmp	r3, #17
    f030:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    f034:	ea00018d 	b	f670 <CScreenDevice::Write(char)+0x7b0>
    f038:	0000f548 	.word	0x0000f548
    f03c:	0000f670 	.word	0x0000f670
    f040:	0000f648 	.word	0x0000f648
    f044:	0000f63c 	.word	0x0000f63c
    f048:	0000ef00 	.word	0x0000ef00
    f04c:	0000f574 	.word	0x0000f574
    f050:	0000f670 	.word	0x0000f670
    f054:	0000f670 	.word	0x0000f670
    f058:	0000f670 	.word	0x0000f670
    f05c:	0000f55c 	.word	0x0000f55c
    f060:	0000f670 	.word	0x0000f670
    f064:	0000f554 	.word	0x0000f554
    f068:	0000f5c0 	.word	0x0000f5c0
    f06c:	0000ef68 	.word	0x0000ef68
    f070:	0000ef68 	.word	0x0000ef68
    f074:	0000f670 	.word	0x0000f670
    f078:	0000f670 	.word	0x0000f670
    f07c:	0000ef68 	.word	0x0000ef68
    f080:	e241303b 	sub	r3, r1, #59	; 0x3b
    f084:	e3530032 	cmp	r3, #50	; 0x32
    f088:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    f08c:	eaffffbd 	b	ef88 <CScreenDevice::Write(char)+0xc8>
    f090:	0000f490 	.word	0x0000f490
    f094:	0000ef88 	.word	0x0000ef88
    f098:	0000ef88 	.word	0x0000ef88
    f09c:	0000ef88 	.word	0x0000ef88
    f0a0:	0000ef88 	.word	0x0000ef88
    f0a4:	0000ef88 	.word	0x0000ef88
    f0a8:	0000ef88 	.word	0x0000ef88
    f0ac:	0000ef88 	.word	0x0000ef88
    f0b0:	0000ef88 	.word	0x0000ef88
    f0b4:	0000ef88 	.word	0x0000ef88
    f0b8:	0000ef88 	.word	0x0000ef88
    f0bc:	0000ef88 	.word	0x0000ef88
    f0c0:	0000ef88 	.word	0x0000ef88
    f0c4:	0000ef88 	.word	0x0000ef88
    f0c8:	0000ef88 	.word	0x0000ef88
    f0cc:	0000ef88 	.word	0x0000ef88
    f0d0:	0000ef88 	.word	0x0000ef88
    f0d4:	0000ef68 	.word	0x0000ef68
    f0d8:	0000ef68 	.word	0x0000ef68
    f0dc:	0000ef88 	.word	0x0000ef88
    f0e0:	0000ef88 	.word	0x0000ef88
    f0e4:	0000ef68 	.word	0x0000ef68
    f0e8:	0000ef88 	.word	0x0000ef88
    f0ec:	0000ef88 	.word	0x0000ef88
    f0f0:	0000ef88 	.word	0x0000ef88
    f0f4:	0000ef88 	.word	0x0000ef88
    f0f8:	0000ef88 	.word	0x0000ef88
    f0fc:	0000ef88 	.word	0x0000ef88
    f100:	0000ef88 	.word	0x0000ef88
    f104:	0000f354 	.word	0x0000f354
    f108:	0000ef88 	.word	0x0000ef88
    f10c:	0000ef88 	.word	0x0000ef88
    f110:	0000ef88 	.word	0x0000ef88
    f114:	0000ef88 	.word	0x0000ef88
    f118:	0000ef88 	.word	0x0000ef88
    f11c:	0000ef88 	.word	0x0000ef88
    f120:	0000ef88 	.word	0x0000ef88
    f124:	0000ef88 	.word	0x0000ef88
    f128:	0000ef88 	.word	0x0000ef88
    f12c:	0000ef88 	.word	0x0000ef88
    f130:	0000ef88 	.word	0x0000ef88
    f134:	0000ef88 	.word	0x0000ef88
    f138:	0000ef88 	.word	0x0000ef88
    f13c:	0000ef88 	.word	0x0000ef88
    f140:	0000ef88 	.word	0x0000ef88
    f144:	0000f3f4 	.word	0x0000f3f4
    f148:	0000ef88 	.word	0x0000ef88
    f14c:	0000ef88 	.word	0x0000ef88
    f150:	0000ef88 	.word	0x0000ef88
    f154:	0000f3f4 	.word	0x0000f3f4
    f158:	0000f410 	.word	0x0000f410
    f15c:	e2415030 	sub	r5, r1, #48	; 0x30
    f160:	e6ef3075 	uxtb	r3, r5
    f164:	e3530009 	cmp	r3, #9
    f168:	8affff7e 	bhi	ef68 <CScreenDevice::Write(char)+0xa8>
    f16c:	e3a03007 	mov	r3, #7
    f170:	e580504c 	str	r5, [r0, #76]	; 0x4c
    f174:	e5803030 	str	r3, [r0, #48]	; 0x30
    f178:	eaffff7c 	b	ef70 <CScreenDevice::Write(char)+0xb0>
    f17c:	e2415030 	sub	r5, r1, #48	; 0x30
    f180:	e6ef3075 	uxtb	r3, r5
    f184:	e3530009 	cmp	r3, #9
    f188:	8affff76 	bhi	ef68 <CScreenDevice::Write(char)+0xa8>
    f18c:	e3a03006 	mov	r3, #6
    f190:	e5805050 	str	r5, [r0, #80]	; 0x50
    f194:	e5803030 	str	r3, [r0, #48]	; 0x30
    f198:	eaffff74 	b	ef70 <CScreenDevice::Write(char)+0xb0>
    f19c:	e3510048 	cmp	r1, #72	; 0x48
    f1a0:	0a000150 	beq	f6e8 <CScreenDevice::Write(char)+0x828>
    f1a4:	e3510072 	cmp	r1, #114	; 0x72
    f1a8:	0a000011 	beq	f1f4 <CScreenDevice::Write(char)+0x334>
    f1ac:	e2415030 	sub	r5, r1, #48	; 0x30
    f1b0:	e6ef3075 	uxtb	r3, r5
    f1b4:	e3530009 	cmp	r3, #9
    f1b8:	8affff6a 	bhi	ef68 <CScreenDevice::Write(char)+0xa8>
    f1bc:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    f1c0:	e3a0200a 	mov	r2, #10
    f1c4:	e0255392 	mla	r5, r2, r3, r5
    f1c8:	e5805050 	str	r5, [r0, #80]	; 0x50
    f1cc:	e35500c7 	cmp	r5, #199	; 0xc7
    f1d0:	8affff64 	bhi	ef68 <CScreenDevice::Write(char)+0xa8>
    f1d4:	eaffff65 	b	ef70 <CScreenDevice::Write(char)+0xb0>
    f1d8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    f1dc:	e3530019 	cmp	r3, #25
    f1e0:	02455068 	subeq	r5, r5, #104	; 0x68
    f1e4:	016f5f15 	clzeq	r5, r5
    f1e8:	01a052a5 	lsreq	r5, r5, #5
    f1ec:	05c45044 	strbeq	r5, [r4, #68]	; 0x44
    f1f0:	eaffff5c 	b	ef68 <CScreenDevice::Write(char)+0xa8>
    f1f4:	e590504c 	ldr	r5, [r0, #76]	; 0x4c
    f1f8:	e2807014 	add	r7, r0, #20
    f1fc:	e5906050 	ldr	r6, [r0, #80]	; 0x50
    f200:	e1a00007 	mov	r0, r7
    f204:	e2455001 	sub	r5, r5, #1
    f208:	eb000248 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    f20c:	e0050590 	mul	r5, r0, r5
    f210:	e1a00007 	mov	r0, r7
    f214:	eb000245 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    f218:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    f21c:	e0000690 	mul	r0, r0, r6
    f220:	e1550002 	cmp	r5, r2
    f224:	23a03000 	movcs	r3, #0
    f228:	33a03001 	movcc	r3, #1
    f22c:	e3500000 	cmp	r0, #0
    f230:	03a03000 	moveq	r3, #0
    f234:	e1500002 	cmp	r0, r2
    f238:	83a03000 	movhi	r3, #0
    f23c:	92033001 	andls	r3, r3, #1
    f240:	e1550000 	cmp	r5, r0
    f244:	23a03000 	movcs	r3, #0
    f248:	32033001 	andcc	r3, r3, #1
    f24c:	e3530000 	cmp	r3, #0
    f250:	e3a03000 	mov	r3, #0
    f254:	15845034 	strne	r5, [r4, #52]	; 0x34
    f258:	15840038 	strne	r0, [r4, #56]	; 0x38
    f25c:	05945034 	ldreq	r5, [r4, #52]	; 0x34
    f260:	e5845040 	str	r5, [r4, #64]	; 0x40
    f264:	e584303c 	str	r3, [r4, #60]	; 0x3c
    f268:	e5843030 	str	r3, [r4, #48]	; 0x30
    f26c:	eaffff3f 	b	ef70 <CScreenDevice::Write(char)+0xb0>
    f270:	e3a03001 	mov	r3, #1
    f274:	e5803030 	str	r3, [r0, #48]	; 0x30
    f278:	eaffff3c 	b	ef70 <CScreenDevice::Write(char)+0xb0>
    f27c:	e3a03000 	mov	r3, #0
    f280:	e580303c 	str	r3, [r0, #60]	; 0x3c
    f284:	eaffff39 	b	ef70 <CScreenDevice::Write(char)+0xb0>
    f288:	e2805014 	add	r5, r0, #20
    f28c:	e3a03000 	mov	r3, #0
    f290:	e1a00005 	mov	r0, r5
    f294:	e584303c 	str	r3, [r4, #60]	; 0x3c
    f298:	eb000224 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    f29c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    f2a0:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    f2a4:	e0800003 	add	r0, r0, r3
    f2a8:	e5840040 	str	r0, [r4, #64]	; 0x40
    f2ac:	e1500002 	cmp	r0, r2
    f2b0:	3affff2e 	bcc	ef70 <CScreenDevice::Write(char)+0xb0>
    f2b4:	e1a00004 	mov	r0, r4
    f2b8:	ebfffb8c 	bl	e0f0 <CScreenDevice::Scroll()>
    f2bc:	e1a00005 	mov	r0, r5
    f2c0:	eb00021a 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    f2c4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    f2c8:	e0433000 	sub	r3, r3, r0
    f2cc:	e5843040 	str	r3, [r4, #64]	; 0x40
    f2d0:	eaffff26 	b	ef70 <CScreenDevice::Write(char)+0xb0>
    f2d4:	e2805014 	add	r5, r0, #20
    f2d8:	e1a00005 	mov	r0, r5
    f2dc:	eb000211 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    f2e0:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    f2e4:	e1a00180 	lsl	r0, r0, #3
    f2e8:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    f2ec:	e0803003 	add	r3, r0, r3
    f2f0:	e733f013 	udiv	r3, r3, r0
    f2f4:	e0000390 	mul	r0, r0, r3
    f2f8:	e584003c 	str	r0, [r4, #60]	; 0x3c
    f2fc:	e1500002 	cmp	r0, r2
    f300:	3affff1a 	bcc	ef70 <CScreenDevice::Write(char)+0xb0>
    f304:	eaffffe0 	b	f28c <CScreenDevice::Write(char)+0x3cc>
    f308:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    f30c:	e3530000 	cmp	r3, #0
    f310:	1a00012f 	bne	f7d4 <CScreenDevice::Write(char)+0x914>
    f314:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    f318:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    f31c:	e1520003 	cmp	r2, r3
    f320:	9affff12 	bls	ef70 <CScreenDevice::Write(char)+0xb0>
    f324:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    f328:	e2806014 	add	r6, r0, #20
    f32c:	e1a00006 	mov	r0, r6
    f330:	eb0001fc 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    f334:	e0455000 	sub	r5, r5, r0
    f338:	e1a00006 	mov	r0, r6
    f33c:	e584503c 	str	r5, [r4, #60]	; 0x3c
    f340:	eb0001fa 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    f344:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    f348:	e0433000 	sub	r3, r3, r0
    f34c:	e5843040 	str	r3, [r4, #64]	; 0x40
    f350:	eaffff06 	b	ef70 <CScreenDevice::Write(char)+0xb0>
    f354:	e590504c 	ldr	r5, [r0, #76]	; 0x4c
    f358:	e3550000 	cmp	r5, #0
    f35c:	0affff01 	beq	ef68 <CScreenDevice::Write(char)+0xa8>
    f360:	e590703c 	ldr	r7, [r0, #60]	; 0x3c
    f364:	e2806014 	add	r6, r0, #20
    f368:	e1a00006 	mov	r0, r6
    f36c:	eb0001ed 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    f370:	e594b024 	ldr	fp, [r4, #36]	; 0x24
    f374:	e0207590 	mla	r0, r0, r5, r7
    f378:	e594703c 	ldr	r7, [r4, #60]	; 0x3c
    f37c:	e150000b 	cmp	r0, fp
    f380:	31a0b000 	movcc	fp, r0
    f384:	e157000b 	cmp	r7, fp
    f388:	2afffef6 	bcs	ef68 <CScreenDevice::Write(char)+0xa8>
    f38c:	e3a0a000 	mov	sl, #0
    f390:	e5948040 	ldr	r8, [r4, #64]	; 0x40
    f394:	e3a09000 	mov	r9, #0
    f398:	e1a00006 	mov	r0, r6
    f39c:	eb0001e3 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    f3a0:	e1500009 	cmp	r0, r9
    f3a4:	9a0000ea 	bls	f754 <CScreenDevice::Write(char)+0x894>
    f3a8:	e3a05000 	mov	r5, #0
    f3ac:	e1a00006 	mov	r0, r6
    f3b0:	eb0001dc 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    f3b4:	e0853007 	add	r3, r5, r7
    f3b8:	e1500005 	cmp	r0, r5
    f3bc:	9a0000bf 	bls	f6c0 <CScreenDevice::Write(char)+0x800>
    f3c0:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    f3c4:	e2855001 	add	r5, r5, #1
    f3c8:	e1530002 	cmp	r3, r2
    f3cc:	2afffff6 	bcs	f3ac <CScreenDevice::Write(char)+0x4ec>
    f3d0:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    f3d4:	e1580002 	cmp	r8, r2
    f3d8:	2afffff3 	bcs	f3ac <CScreenDevice::Write(char)+0x4ec>
    f3dc:	e5942020 	ldr	r2, [r4, #32]
    f3e0:	e5941018 	ldr	r1, [r4, #24]
    f3e4:	e0233892 	mla	r3, r2, r8, r3
    f3e8:	e1a03083 	lsl	r3, r3, #1
    f3ec:	e181a0b3 	strh	sl, [r1, r3]
    f3f0:	eaffffed 	b	f3ac <CScreenDevice::Write(char)+0x4ec>
    f3f4:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    f3f8:	e3530004 	cmp	r3, #4
    f3fc:	02415068 	subeq	r5, r1, #104	; 0x68
    f400:	016f5f15 	clzeq	r5, r5
    f404:	01a052a5 	lsreq	r5, r5, #5
    f408:	05c05048 	strbeq	r5, [r0, #72]	; 0x48
    f40c:	eafffed5 	b	ef68 <CScreenDevice::Write(char)+0xa8>
    f410:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    f414:	e353001b 	cmp	r3, #27
    f418:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    f41c:	eafffed1 	b	ef68 <CScreenDevice::Write(char)+0xa8>
    f420:	0000f6a8 	.word	0x0000f6a8
    f424:	0000f69c 	.word	0x0000f69c
    f428:	0000f690 	.word	0x0000f690
    f42c:	0000ef68 	.word	0x0000ef68
    f430:	0000ef68 	.word	0x0000ef68
    f434:	0000ef68 	.word	0x0000ef68
    f438:	0000ef68 	.word	0x0000ef68
    f43c:	0000ef68 	.word	0x0000ef68
    f440:	0000ef68 	.word	0x0000ef68
    f444:	0000ef68 	.word	0x0000ef68
    f448:	0000ef68 	.word	0x0000ef68
    f44c:	0000ef68 	.word	0x0000ef68
    f450:	0000ef68 	.word	0x0000ef68
    f454:	0000ef68 	.word	0x0000ef68
    f458:	0000ef68 	.word	0x0000ef68
    f45c:	0000ef68 	.word	0x0000ef68
    f460:	0000ef68 	.word	0x0000ef68
    f464:	0000ef68 	.word	0x0000ef68
    f468:	0000ef68 	.word	0x0000ef68
    f46c:	0000ef68 	.word	0x0000ef68
    f470:	0000ef68 	.word	0x0000ef68
    f474:	0000ef68 	.word	0x0000ef68
    f478:	0000ef68 	.word	0x0000ef68
    f47c:	0000ef68 	.word	0x0000ef68
    f480:	0000ef68 	.word	0x0000ef68
    f484:	0000ef68 	.word	0x0000ef68
    f488:	0000ef68 	.word	0x0000ef68
    f48c:	0000f6a8 	.word	0x0000f6a8
    f490:	e3a03005 	mov	r3, #5
    f494:	e5803030 	str	r3, [r0, #48]	; 0x30
    f498:	eafffeb4 	b	ef70 <CScreenDevice::Write(char)+0xb0>
    f49c:	e6ef3071 	uxtb	r3, r1
    f4a0:	e353001f 	cmp	r3, #31
    f4a4:	9afffeb1 	bls	ef70 <CScreenDevice::Write(char)+0xb0>
    f4a8:	e590b03c 	ldr	fp, [r0, #60]	; 0x3c
    f4ac:	e2809014 	add	r9, r0, #20
    f4b0:	e1d084b6 	ldrh	r8, [r0, #70]	; 0x46
    f4b4:	e1a0a006 	mov	sl, r6
    f4b8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    f4bc:	e58d3000 	str	r3, [sp]
    f4c0:	e58d6004 	str	r6, [sp, #4]
    f4c4:	e1a00009 	mov	r0, r9
    f4c8:	eb000198 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    f4cc:	e150000a 	cmp	r0, sl
    f4d0:	9a0000a5 	bls	f76c <CScreenDevice::Write(char)+0x8ac>
    f4d4:	e59d6004 	ldr	r6, [sp, #4]
    f4d8:	e1a00009 	mov	r0, r9
    f4dc:	e08b7006 	add	r7, fp, r6
    f4e0:	eb000190 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    f4e4:	e1a02006 	mov	r2, r6
    f4e8:	e1500006 	cmp	r0, r6
    f4ec:	e1a0300a 	mov	r3, sl
    f4f0:	e1a01005 	mov	r1, r5
    f4f4:	e1a00009 	mov	r0, r9
    f4f8:	9a000090 	bls	f740 <CScreenDevice::Write(char)+0x880>
    f4fc:	eb00018f 	bl	fb40 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    f500:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f504:	e3500000 	cmp	r0, #0
    f508:	e2866001 	add	r6, r6, #1
    f50c:	11a02008 	movne	r2, r8
    f510:	03a02000 	moveq	r2, #0
    f514:	e1570003 	cmp	r7, r3
    f518:	2affffee 	bcs	f4d8 <CScreenDevice::Write(char)+0x618>
    f51c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    f520:	e59d1000 	ldr	r1, [sp]
    f524:	e1510003 	cmp	r1, r3
    f528:	2affffea 	bcs	f4d8 <CScreenDevice::Write(char)+0x618>
    f52c:	e5943020 	ldr	r3, [r4, #32]
    f530:	e1a00001 	mov	r0, r1
    f534:	e5941018 	ldr	r1, [r4, #24]
    f538:	e0277093 	mla	r7, r3, r0, r7
    f53c:	e1a07087 	lsl	r7, r7, #1
    f540:	e18120b7 	strh	r2, [r1, r7]
    f544:	eaffffe3 	b	f4d8 <CScreenDevice::Write(char)+0x618>
    f548:	e3a03004 	mov	r3, #4
    f54c:	e5803030 	str	r3, [r0, #48]	; 0x30
    f550:	eafffe86 	b	ef70 <CScreenDevice::Write(char)+0xb0>
    f554:	ebfff9b1 	bl	dc20 <CScreenDevice::ClearDisplayEnd()>
    f558:	eafffe82 	b	ef68 <CScreenDevice::Write(char)+0xa8>
    f55c:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    f560:	e3a03000 	mov	r3, #0
    f564:	e5802040 	str	r2, [r0, #64]	; 0x40
    f568:	e580303c 	str	r3, [r0, #60]	; 0x3c
    f56c:	e5803030 	str	r3, [r0, #48]	; 0x30
    f570:	eafffe7e 	b	ef70 <CScreenDevice::Write(char)+0xb0>
    f574:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    f578:	e3530000 	cmp	r3, #0
    f57c:	1a00009a 	bne	f7ec <CScreenDevice::Write(char)+0x92c>
    f580:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    f584:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    f588:	e1520003 	cmp	r2, r3
    f58c:	9afffe75 	bls	ef68 <CScreenDevice::Write(char)+0xa8>
    f590:	e5906024 	ldr	r6, [r0, #36]	; 0x24
    f594:	e2805014 	add	r5, r0, #20
    f598:	e1a00005 	mov	r0, r5
    f59c:	eb000161 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    f5a0:	e0466000 	sub	r6, r6, r0
    f5a4:	e1a00005 	mov	r0, r5
    f5a8:	e584603c 	str	r6, [r4, #60]	; 0x3c
    f5ac:	eb00015f 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    f5b0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    f5b4:	e0433000 	sub	r3, r3, r0
    f5b8:	e5843040 	str	r3, [r4, #64]	; 0x40
    f5bc:	eafffe69 	b	ef68 <CScreenDevice::Write(char)+0xa8>
    f5c0:	e590703c 	ldr	r7, [r0, #60]	; 0x3c
    f5c4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f5c8:	e1570003 	cmp	r7, r3
    f5cc:	2afffe65 	bcs	ef68 <CScreenDevice::Write(char)+0xa8>
    f5d0:	e2806014 	add	r6, r0, #20
    f5d4:	e3a0a000 	mov	sl, #0
    f5d8:	e5948040 	ldr	r8, [r4, #64]	; 0x40
    f5dc:	e3a09000 	mov	r9, #0
    f5e0:	e1a00006 	mov	r0, r6
    f5e4:	eb000151 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    f5e8:	e1500009 	cmp	r0, r9
    f5ec:	9a000036 	bls	f6cc <CScreenDevice::Write(char)+0x80c>
    f5f0:	e3a05000 	mov	r5, #0
    f5f4:	e1a00006 	mov	r0, r6
    f5f8:	eb00014a 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    f5fc:	e0853007 	add	r3, r5, r7
    f600:	e1500005 	cmp	r0, r5
    f604:	9a00002a 	bls	f6b4 <CScreenDevice::Write(char)+0x7f4>
    f608:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    f60c:	e2855001 	add	r5, r5, #1
    f610:	e1530002 	cmp	r3, r2
    f614:	2afffff6 	bcs	f5f4 <CScreenDevice::Write(char)+0x734>
    f618:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    f61c:	e1580002 	cmp	r8, r2
    f620:	2afffff3 	bcs	f5f4 <CScreenDevice::Write(char)+0x734>
    f624:	e5942020 	ldr	r2, [r4, #32]
    f628:	e5941018 	ldr	r1, [r4, #24]
    f62c:	e0233892 	mla	r3, r2, r8, r3
    f630:	e1a03083 	lsl	r3, r3, #1
    f634:	e181a0b3 	strh	sl, [r1, r3]
    f638:	eaffffed 	b	f5f4 <CScreenDevice::Write(char)+0x734>
    f63c:	e2805014 	add	r5, r0, #20
    f640:	e1a00005 	mov	r0, r5
    f644:	eafffe39 	b	ef30 <CScreenDevice::Write(char)+0x70>
    f648:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    f64c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    f650:	e1520003 	cmp	r2, r3
    f654:	9afffe43 	bls	ef68 <CScreenDevice::Write(char)+0xa8>
    f658:	e2800014 	add	r0, r0, #20
    f65c:	eb000133 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    f660:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    f664:	e0433000 	sub	r3, r3, r0
    f668:	e5843040 	str	r3, [r4, #64]	; 0x40
    f66c:	eafffe3d 	b	ef68 <CScreenDevice::Write(char)+0xa8>
    f670:	e2415030 	sub	r5, r1, #48	; 0x30
    f674:	e6ef3075 	uxtb	r3, r5
    f678:	e3530009 	cmp	r3, #9
    f67c:	8afffe39 	bhi	ef68 <CScreenDevice::Write(char)+0xa8>
    f680:	e3a03003 	mov	r3, #3
    f684:	e580504c 	str	r5, [r0, #76]	; 0x4c
    f688:	e5803030 	str	r3, [r0, #48]	; 0x30
    f68c:	eafffe37 	b	ef70 <CScreenDevice::Write(char)+0xb0>
    f690:	e3a0301f 	mov	r3, #31
    f694:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    f698:	eafffe32 	b	ef68 <CScreenDevice::Write(char)+0xa8>
    f69c:	e3a03b3e 	mov	r3, #63488	; 0xf800
    f6a0:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    f6a4:	eafffe2f 	b	ef68 <CScreenDevice::Write(char)+0xa8>
    f6a8:	e3e03020 	mvn	r3, #32
    f6ac:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    f6b0:	eafffe2c 	b	ef68 <CScreenDevice::Write(char)+0xa8>
    f6b4:	e2899001 	add	r9, r9, #1
    f6b8:	e2888001 	add	r8, r8, #1
    f6bc:	eaffffc7 	b	f5e0 <CScreenDevice::Write(char)+0x720>
    f6c0:	e2899001 	add	r9, r9, #1
    f6c4:	e2888001 	add	r8, r8, #1
    f6c8:	eaffff32 	b	f398 <CScreenDevice::Write(char)+0x4d8>
    f6cc:	e1a00006 	mov	r0, r6
    f6d0:	eb000114 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    f6d4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f6d8:	e0877000 	add	r7, r7, r0
    f6dc:	e1530007 	cmp	r3, r7
    f6e0:	8affffbc 	bhi	f5d8 <CScreenDevice::Write(char)+0x718>
    f6e4:	eafffe1f 	b	ef68 <CScreenDevice::Write(char)+0xa8>
    f6e8:	e5905050 	ldr	r5, [r0, #80]	; 0x50
    f6ec:	e2806014 	add	r6, r0, #20
    f6f0:	e1a00006 	mov	r0, r6
    f6f4:	e594704c 	ldr	r7, [r4, #76]	; 0x4c
    f6f8:	e2455001 	sub	r5, r5, #1
    f6fc:	eb000109 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    f700:	e0050590 	mul	r5, r0, r5
    f704:	e1a00006 	mov	r0, r6
    f708:	eb000108 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    f70c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f710:	e1550003 	cmp	r5, r3
    f714:	2afffe13 	bcs	ef68 <CScreenDevice::Write(char)+0xa8>
    f718:	e2477001 	sub	r7, r7, #1
    f71c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    f720:	e0000790 	mul	r0, r0, r7
    f724:	e1500003 	cmp	r0, r3
    f728:	3afffe0e 	bcc	ef68 <CScreenDevice::Write(char)+0xa8>
    f72c:	e5943038 	ldr	r3, [r4, #56]	; 0x38
    f730:	e1500003 	cmp	r0, r3
    f734:	3584503c 	strcc	r5, [r4, #60]	; 0x3c
    f738:	35840040 	strcc	r0, [r4, #64]	; 0x40
    f73c:	eafffe09 	b	ef68 <CScreenDevice::Write(char)+0xa8>
    f740:	e59d3000 	ldr	r3, [sp]
    f744:	e28aa001 	add	sl, sl, #1
    f748:	e2833001 	add	r3, r3, #1
    f74c:	e58d3000 	str	r3, [sp]
    f750:	eaffff5b 	b	f4c4 <CScreenDevice::Write(char)+0x604>
    f754:	e1a00006 	mov	r0, r6
    f758:	eb0000f2 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    f75c:	e0877000 	add	r7, r7, r0
    f760:	e157000b 	cmp	r7, fp
    f764:	3affff09 	bcc	f390 <CScreenDevice::Write(char)+0x4d0>
    f768:	eafffdfe 	b	ef68 <CScreenDevice::Write(char)+0xa8>
    f76c:	e1a00009 	mov	r0, r9
    f770:	eb0000ec 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    f774:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    f778:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    f77c:	e0800003 	add	r0, r0, r3
    f780:	e584003c 	str	r0, [r4, #60]	; 0x3c
    f784:	e1500002 	cmp	r0, r2
    f788:	3afffdf8 	bcc	ef70 <CScreenDevice::Write(char)+0xb0>
    f78c:	e3a03000 	mov	r3, #0
    f790:	e1a00009 	mov	r0, r9
    f794:	e584303c 	str	r3, [r4, #60]	; 0x3c
    f798:	eb0000e4 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    f79c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    f7a0:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    f7a4:	e0800003 	add	r0, r0, r3
    f7a8:	e5840040 	str	r0, [r4, #64]	; 0x40
    f7ac:	e1500002 	cmp	r0, r2
    f7b0:	3afffdee 	bcc	ef70 <CScreenDevice::Write(char)+0xb0>
    f7b4:	e1a00004 	mov	r0, r4
    f7b8:	ebfffa4c 	bl	e0f0 <CScreenDevice::Scroll()>
    f7bc:	e1a00009 	mov	r0, r9
    f7c0:	eb0000da 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    f7c4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    f7c8:	e0433000 	sub	r3, r3, r0
    f7cc:	e5843040 	str	r3, [r4, #64]	; 0x40
    f7d0:	eafffde6 	b	ef70 <CScreenDevice::Write(char)+0xb0>
    f7d4:	e2800014 	add	r0, r0, #20
    f7d8:	eb0000d2 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    f7dc:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    f7e0:	e0433000 	sub	r3, r3, r0
    f7e4:	e584303c 	str	r3, [r4, #60]	; 0x3c
    f7e8:	eafffde0 	b	ef70 <CScreenDevice::Write(char)+0xb0>
    f7ec:	e2800014 	add	r0, r0, #20
    f7f0:	eb0000cc 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    f7f4:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    f7f8:	e0433000 	sub	r3, r3, r0
    f7fc:	e584303c 	str	r3, [r4, #60]	; 0x3c
    f800:	eafffdd8 	b	ef68 <CScreenDevice::Write(char)+0xa8>

0000f804 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    f804:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f808:	e1a07000 	mov	r7, r0
    f80c:	e2876014 	add	r6, r7, #20
    f810:	e24dd00c 	sub	sp, sp, #12
    f814:	e3a08000 	mov	r8, #0
    f818:	e1a0a001 	mov	sl, r1
    f81c:	e1a09002 	mov	r9, r2
    f820:	e1a0b003 	mov	fp, r3
    f824:	e1dd03b0 	ldrh	r0, [sp, #48]	; 0x30
    f828:	e58d0004 	str	r0, [sp, #4]
    f82c:	e1a00006 	mov	r0, r6
    f830:	eb0000be 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    f834:	e1500008 	cmp	r0, r8
    f838:	9a000020 	bls	f8c0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xbc>
    f83c:	e3a04000 	mov	r4, #0
    f840:	e1a00006 	mov	r0, r6
    f844:	e0845009 	add	r5, r4, r9
    f848:	eb0000b6 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    f84c:	e1a02004 	mov	r2, r4
    f850:	e1500004 	cmp	r0, r4
    f854:	e1a03008 	mov	r3, r8
    f858:	e1a0100a 	mov	r1, sl
    f85c:	e1a00006 	mov	r0, r6
    f860:	9a000010 	bls	f8a8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xa4>
    f864:	eb0000b5 	bl	fb40 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    f868:	e5973024 	ldr	r3, [r7, #36]	; 0x24
    f86c:	e3500000 	cmp	r0, #0
    f870:	e59d2004 	ldr	r2, [sp, #4]
    f874:	e2844001 	add	r4, r4, #1
    f878:	03a02000 	moveq	r2, #0
    f87c:	e1550003 	cmp	r5, r3
    f880:	2affffee 	bcs	f840 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x3c>
    f884:	e5973028 	ldr	r3, [r7, #40]	; 0x28
    f888:	e153000b 	cmp	r3, fp
    f88c:	9affffeb 	bls	f840 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x3c>
    f890:	e5973020 	ldr	r3, [r7, #32]
    f894:	e5971018 	ldr	r1, [r7, #24]
    f898:	e0255b93 	mla	r5, r3, fp, r5
    f89c:	e1a05085 	lsl	r5, r5, #1
    f8a0:	e18120b5 	strh	r2, [r1, r5]
    f8a4:	eaffffe5 	b	f840 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x3c>
    f8a8:	e2888001 	add	r8, r8, #1
    f8ac:	e1a00006 	mov	r0, r6
    f8b0:	eb00009e 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    f8b4:	e28bb001 	add	fp, fp, #1
    f8b8:	e1500008 	cmp	r0, r8
    f8bc:	8affffde 	bhi	f83c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x38>
    f8c0:	e28dd00c 	add	sp, sp, #12
    f8c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f8c8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    f8c8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f8cc:	e3a08000 	mov	r8, #0
    f8d0:	e1a0a000 	mov	sl, r0
    f8d4:	e1a06001 	mov	r6, r1
    f8d8:	e1a07002 	mov	r7, r2
    f8dc:	e2805014 	add	r5, r0, #20
    f8e0:	e1a09008 	mov	r9, r8
    f8e4:	e1a00005 	mov	r0, r5
    f8e8:	eb000090 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    f8ec:	e1500008 	cmp	r0, r8
    f8f0:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
    f8f4:	e3a04000 	mov	r4, #0
    f8f8:	e1a00005 	mov	r0, r5
    f8fc:	eb000089 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    f900:	e0843006 	add	r3, r4, r6
    f904:	e1500004 	cmp	r0, r4
    f908:	9a00000c 	bls	f940 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x78>
    f90c:	e59a2024 	ldr	r2, [sl, #36]	; 0x24
    f910:	e2844001 	add	r4, r4, #1
    f914:	e1530002 	cmp	r3, r2
    f918:	2afffff6 	bcs	f8f8 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    f91c:	e59a2028 	ldr	r2, [sl, #40]	; 0x28
    f920:	e1520007 	cmp	r2, r7
    f924:	9afffff3 	bls	f8f8 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    f928:	e59a2020 	ldr	r2, [sl, #32]
    f92c:	e59a1018 	ldr	r1, [sl, #24]
    f930:	e0233792 	mla	r3, r2, r7, r3
    f934:	e1a03083 	lsl	r3, r3, #1
    f938:	e18190b3 	strh	r9, [r1, r3]
    f93c:	eaffffed 	b	f8f8 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    f940:	e2888001 	add	r8, r8, #1
    f944:	e2877001 	add	r7, r7, #1
    f948:	eaffffe5 	b	f8e4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

0000f94c <CScreenDevice::InvertCursor()>:
    f94c:	e5d03044 	ldrb	r3, [r0, #68]	; 0x44
    f950:	e3530000 	cmp	r3, #0
    f954:	012fff1e 	bxeq	lr
    f958:	eafff7a2 	b	d7e8 <CScreenDevice::InvertCursor() [clone .part.6]>

0000f95c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    f95c:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    f960:	e15c0001 	cmp	ip, r1
    f964:	912fff1e 	bxls	lr
    f968:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    f96c:	e15c0002 	cmp	ip, r2
    f970:	8590c020 	ldrhi	ip, [r0, #32]
    f974:	85900018 	ldrhi	r0, [r0, #24]
    f978:	8022129c 	mlahi	r2, ip, r2, r1
    f97c:	81a02082 	lslhi	r2, r2, #1
    f980:	818030b2 	strhhi	r3, [r0, r2]
    f984:	e12fff1e 	bx	lr

0000f988 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    f988:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f98c:	e1530001 	cmp	r3, r1
    f990:	9a000008 	bls	f9b8 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    f994:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    f998:	e1530002 	cmp	r3, r2
    f99c:	9a000005 	bls	f9b8 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    f9a0:	e590c020 	ldr	ip, [r0, #32]
    f9a4:	e5903018 	ldr	r3, [r0, #24]
    f9a8:	e022129c 	mla	r2, ip, r2, r1
    f9ac:	e1a02082 	lsl	r2, r2, #1
    f9b0:	e19300b2 	ldrh	r0, [r3, r2]
    f9b4:	e12fff1e 	bx	lr
    f9b8:	e3a00000 	mov	r0, #0
    f9bc:	e12fff1e 	bx	lr

0000f9c0 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    f9c0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f9c4:	e1a08000 	mov	r8, r0
    f9c8:	e2805014 	add	r5, r0, #20
    f9cc:	e1a04001 	mov	r4, r1
    f9d0:	e1a07002 	mov	r7, r2
    f9d4:	e1a00005 	mov	r0, r5
    f9d8:	e5989024 	ldr	r9, [r8, #36]	; 0x24
    f9dc:	e2044003 	and	r4, r4, #3
    f9e0:	eb000050 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    f9e4:	e2077003 	and	r7, r7, #3
    f9e8:	e30a31ec 	movw	r3, #41452	; 0xa1ec
    f9ec:	e3403001 	movt	r3, #1
    f9f0:	e0833007 	add	r3, r3, r7
    f9f4:	e0200094 	mla	r0, r4, r0, r0
    f9f8:	e3a06000 	mov	r6, #0
    f9fc:	e0499000 	sub	r9, r9, r0
    fa00:	e1d3a1dc 	ldrsb	sl, [r3, #28]
    fa04:	e1a00005 	mov	r0, r5
    fa08:	eb000048 	bl	fb30 <CCharGenerator::GetCharHeight() const>
    fa0c:	e1500006 	cmp	r0, r6
    fa10:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
    fa14:	e3a04000 	mov	r4, #0
    fa18:	e1a00005 	mov	r0, r5
    fa1c:	e0897004 	add	r7, r9, r4
    fa20:	eb000040 	bl	fb28 <CCharGenerator::GetCharWidth() const>
    fa24:	e1a02004 	mov	r2, r4
    fa28:	e1500004 	cmp	r0, r4
    fa2c:	e1a03006 	mov	r3, r6
    fa30:	e1a0100a 	mov	r1, sl
    fa34:	e1a00005 	mov	r0, r5
    fa38:	9a000010 	bls	fa80 <CScreenDevice::Rotor(unsigned int, unsigned int)+0xc0>
    fa3c:	eb00003f 	bl	fb40 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    fa40:	e5983024 	ldr	r3, [r8, #36]	; 0x24
    fa44:	e3500000 	cmp	r0, #0
    fa48:	e2844001 	add	r4, r4, #1
    fa4c:	13a02b3e 	movne	r2, #63488	; 0xf800
    fa50:	03a02000 	moveq	r2, #0
    fa54:	e1570003 	cmp	r7, r3
    fa58:	2affffee 	bcs	fa18 <CScreenDevice::Rotor(unsigned int, unsigned int)+0x58>
    fa5c:	e5983028 	ldr	r3, [r8, #40]	; 0x28
    fa60:	e1560003 	cmp	r6, r3
    fa64:	2affffeb 	bcs	fa18 <CScreenDevice::Rotor(unsigned int, unsigned int)+0x58>
    fa68:	e5983020 	ldr	r3, [r8, #32]
    fa6c:	e5981018 	ldr	r1, [r8, #24]
    fa70:	e0277693 	mla	r7, r3, r6, r7
    fa74:	e1a07087 	lsl	r7, r7, #1
    fa78:	e18120b7 	strh	r2, [r1, r7]
    fa7c:	eaffffe5 	b	fa18 <CScreenDevice::Rotor(unsigned int, unsigned int)+0x58>
    fa80:	e2866001 	add	r6, r6, #1
    fa84:	eaffffde 	b	fa04 <CScreenDevice::Rotor(unsigned int, unsigned int)+0x44>

0000fa88 <assertion_failed>:
    fa88:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    fa8c:	e1a05000 	mov	r5, r0
    fa90:	e1a06001 	mov	r6, r1
    fa94:	e24dd01c 	sub	sp, sp, #28
    fa98:	e1a07002 	mov	r7, r2
    fa9c:	e1a0400d 	mov	r4, sp
    faa0:	eb00117a 	bl	14090 <CInterruptSystem::DisableFIQ()>
    faa4:	f1080040 	cpsie	f
    faa8:	e28d0008 	add	r0, sp, #8
    faac:	eb00073a 	bl	1179c <CString::CString()>
    fab0:	e1a03007 	mov	r3, r7
    fab4:	e1a02006 	mov	r2, r6
    fab8:	e28d0008 	add	r0, sp, #8
    fabc:	e30a1210 	movw	r1, #41488	; 0xa210
    fac0:	e3401001 	movt	r1, #1
    fac4:	eb000ed6 	bl	13624 <CString::Format(char const*, ...)>
    fac8:	e28d0008 	add	r0, sp, #8
    facc:	eb000749 	bl	117f8 <CString::operator char const*() const>
    fad0:	e1a01000 	mov	r1, r0
    fad4:	e1a00004 	mov	r0, r4
    fad8:	eb00007a 	bl	fcc8 <debug_stacktrace(unsigned int const*, char const*)>
    fadc:	eb000245 	bl	103f8 <CLogger::Get()>
    fae0:	e1a04000 	mov	r4, r0
    fae4:	e28d0008 	add	r0, sp, #8
    fae8:	eb000742 	bl	117f8 <CString::operator char const*() const>
    faec:	e3a02000 	mov	r2, #0
    faf0:	e1a01000 	mov	r1, r0
    faf4:	e58d5000 	str	r5, [sp]
    faf8:	e1a00004 	mov	r0, r4
    fafc:	e30a3218 	movw	r3, #41496	; 0xa218
    fb00:	e3403001 	movt	r3, #1
    fb04:	eb0003c6 	bl	10a24 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fb08:	e28d0008 	add	r0, sp, #8
    fb0c:	eb000709 	bl	11738 <CString::~CString()>
    fb10:	e28dd01c 	add	sp, sp, #28
    fb14:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000fb18 <CCharGenerator::CCharGenerator()>:
    fb18:	e3a03008 	mov	r3, #8
    fb1c:	e5803000 	str	r3, [r0]
    fb20:	e12fff1e 	bx	lr

0000fb24 <CCharGenerator::~CCharGenerator()>:
    fb24:	e12fff1e 	bx	lr

0000fb28 <CCharGenerator::GetCharWidth() const>:
    fb28:	e5900000 	ldr	r0, [r0]
    fb2c:	e12fff1e 	bx	lr

0000fb30 <CCharGenerator::GetCharHeight() const>:
    fb30:	e3a00013 	mov	r0, #19
    fb34:	e12fff1e 	bx	lr

0000fb38 <CCharGenerator::GetUnderline() const>:
    fb38:	e3a00010 	mov	r0, #16
    fb3c:	e12fff1e 	bx	lr

0000fb40 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
    fb40:	e6ef1071 	uxtb	r1, r1
    fb44:	e92d4070 	push	{r4, r5, r6, lr}
    fb48:	e2414021 	sub	r4, r1, #33	; 0x21
    fb4c:	e35400de 	cmp	r4, #222	; 0xde
    fb50:	8a00000f 	bhi	fb94 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    fb54:	e1a06003 	mov	r6, r3
    fb58:	e5903000 	ldr	r3, [r0]
    fb5c:	e1a05002 	mov	r5, r2
    fb60:	e1530002 	cmp	r3, r2
    fb64:	9a00000c 	bls	fb9c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x5c>
    fb68:	e356000f 	cmp	r6, #15
    fb6c:	8a000008 	bhi	fb94 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    fb70:	e30a1230 	movw	r1, #41520	; 0xa230
    fb74:	e3401001 	movt	r1, #1
    fb78:	e0811204 	add	r1, r1, r4, lsl #4
    fb7c:	e3a02080 	mov	r2, #128	; 0x80
    fb80:	e7d13006 	ldrb	r3, [r1, r6]
    fb84:	e0133552 	ands	r3, r3, r2, asr r5
    fb88:	13a00001 	movne	r0, #1
    fb8c:	03a00000 	moveq	r0, #0
    fb90:	e8bd8070 	pop	{r4, r5, r6, pc}
    fb94:	e3a00000 	mov	r0, #0
    fb98:	e8bd8070 	pop	{r4, r5, r6, pc}
    fb9c:	e30b1020 	movw	r1, #45088	; 0xb020
    fba0:	e3401001 	movt	r1, #1
    fba4:	e30b0034 	movw	r0, #45108	; 0xb034
    fba8:	e3400001 	movt	r0, #1
    fbac:	e3a0204e 	mov	r2, #78	; 0x4e
    fbb0:	ebffffb4 	bl	fa88 <assertion_failed>
    fbb4:	e356000f 	cmp	r6, #15
    fbb8:	9affffec 	bls	fb70 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
    fbbc:	eafffff4 	b	fb94 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>

0000fbc0 <debug_hexdump(void const*, unsigned int, char const*)>:
    fbc0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    fbc4:	e3520000 	cmp	r2, #0
    fbc8:	e30b704c 	movw	r7, #45132	; 0xb04c
    fbcc:	e3407001 	movt	r7, #1
    fbd0:	11a07002 	movne	r7, r2
    fbd4:	e24dd048 	sub	sp, sp, #72	; 0x48
    fbd8:	e1a05001 	mov	r5, r1
    fbdc:	e1a04000 	mov	r4, r0
    fbe0:	eb000204 	bl	103f8 <CLogger::Get()>
    fbe4:	e1a01007 	mov	r1, r7
    fbe8:	e30b3054 	movw	r3, #45140	; 0xb054
    fbec:	e3403001 	movt	r3, #1
    fbf0:	e58d4004 	str	r4, [sp, #4]
    fbf4:	e3a02004 	mov	r2, #4
    fbf8:	e58d5000 	str	r5, [sp]
    fbfc:	eb000388 	bl	10a24 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fc00:	e3550000 	cmp	r5, #0
    fc04:	0a00002d 	beq	fcc0 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
    fc08:	e30b8078 	movw	r8, #45176	; 0xb078
    fc0c:	e3408001 	movt	r8, #1
    fc10:	ea000001 	b	fc1c <debug_hexdump(void const*, unsigned int, char const*)+0x5c>
    fc14:	e2555010 	subs	r5, r5, #16
    fc18:	0a000028 	beq	fcc0 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
    fc1c:	eb0001f5 	bl	103f8 <CLogger::Get()>
    fc20:	e5d4c00f 	ldrb	ip, [r4, #15]
    fc24:	e5d4900e 	ldrb	r9, [r4, #14]
    fc28:	e1a03008 	mov	r3, r8
    fc2c:	e5d4600d 	ldrb	r6, [r4, #13]
    fc30:	e3a02004 	mov	r2, #4
    fc34:	e5d4e00c 	ldrb	lr, [r4, #12]
    fc38:	e1a01007 	mov	r1, r7
    fc3c:	e5d4a00b 	ldrb	sl, [r4, #11]
    fc40:	e58dc040 	str	ip, [sp, #64]	; 0x40
    fc44:	e6ffc074 	uxth	ip, r4
    fc48:	e58d903c 	str	r9, [sp, #60]	; 0x3c
    fc4c:	e2844010 	add	r4, r4, #16
    fc50:	e5549006 	ldrb	r9, [r4, #-6]
    fc54:	e58d6038 	str	r6, [sp, #56]	; 0x38
    fc58:	e5546007 	ldrb	r6, [r4, #-7]
    fc5c:	e58de034 	str	lr, [sp, #52]	; 0x34
    fc60:	e554e008 	ldrb	lr, [r4, #-8]
    fc64:	e58da030 	str	sl, [sp, #48]	; 0x30
    fc68:	e554a009 	ldrb	sl, [r4, #-9]
    fc6c:	e58d902c 	str	r9, [sp, #44]	; 0x2c
    fc70:	e554900a 	ldrb	r9, [r4, #-10]
    fc74:	e58d6028 	str	r6, [sp, #40]	; 0x28
    fc78:	e554600b 	ldrb	r6, [r4, #-11]
    fc7c:	e58de024 	str	lr, [sp, #36]	; 0x24
    fc80:	e554e00c 	ldrb	lr, [r4, #-12]
    fc84:	e58da020 	str	sl, [sp, #32]
    fc88:	e554a00d 	ldrb	sl, [r4, #-13]
    fc8c:	e58d901c 	str	r9, [sp, #28]
    fc90:	e554900e 	ldrb	r9, [r4, #-14]
    fc94:	e58d6018 	str	r6, [sp, #24]
    fc98:	e554600f 	ldrb	r6, [r4, #-15]
    fc9c:	e58de014 	str	lr, [sp, #20]
    fca0:	e554e010 	ldrb	lr, [r4, #-16]
    fca4:	e58da010 	str	sl, [sp, #16]
    fca8:	e58d900c 	str	r9, [sp, #12]
    fcac:	e58d6008 	str	r6, [sp, #8]
    fcb0:	e88d5000 	stm	sp, {ip, lr}
    fcb4:	eb00035a 	bl	10a24 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fcb8:	e355000f 	cmp	r5, #15
    fcbc:	8affffd4 	bhi	fc14 <debug_hexdump(void const*, unsigned int, char const*)+0x54>
    fcc0:	e28dd048 	add	sp, sp, #72	; 0x48
    fcc4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0000fcc8 <debug_stacktrace(unsigned int const*, char const*)>:
    fcc8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fccc:	e3510000 	cmp	r1, #0
    fcd0:	e30b704c 	movw	r7, #45132	; 0xb04c
    fcd4:	e3407001 	movt	r7, #1
    fcd8:	11a07001 	movne	r7, r1
    fcdc:	e309681c 	movw	r6, #38940	; 0x981c
    fce0:	e3406001 	movt	r6, #1
    fce4:	e30b80d0 	movw	r8, #45264	; 0xb0d0
    fce8:	e3408001 	movt	r8, #1
    fcec:	e24dd008 	sub	sp, sp, #8
    fcf0:	e2405004 	sub	r5, r0, #4
    fcf4:	e3a04000 	mov	r4, #0
    fcf8:	ea000002 	b	fd08 <debug_stacktrace(unsigned int const*, char const*)+0x40>
    fcfc:	e2844001 	add	r4, r4, #1
    fd00:	e3540040 	cmp	r4, #64	; 0x40
    fd04:	0a00000f 	beq	fd48 <debug_stacktrace(unsigned int const*, char const*)+0x80>
    fd08:	e5b53004 	ldr	r3, [r5, #4]!
    fd0c:	e3530902 	cmp	r3, #32768	; 0x8000
    fd10:	3afffff9 	bcc	fcfc <debug_stacktrace(unsigned int const*, char const*)+0x34>
    fd14:	e1530006 	cmp	r3, r6
    fd18:	2afffff7 	bcs	fcfc <debug_stacktrace(unsigned int const*, char const*)+0x34>
    fd1c:	eb0001b5 	bl	103f8 <CLogger::Get()>
    fd20:	e5951000 	ldr	r1, [r5]
    fd24:	e58d1004 	str	r1, [sp, #4]
    fd28:	e1a03008 	mov	r3, r8
    fd2c:	e58d4000 	str	r4, [sp]
    fd30:	e3a02004 	mov	r2, #4
    fd34:	e1a01007 	mov	r1, r7
    fd38:	e2844001 	add	r4, r4, #1
    fd3c:	eb000338 	bl	10a24 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fd40:	e3540040 	cmp	r4, #64	; 0x40
    fd44:	1affffef 	bne	fd08 <debug_stacktrace(unsigned int const*, char const*)+0x40>
    fd48:	e28dd008 	add	sp, sp, #8
    fd4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000fd50 <CDeviceNameService::CDeviceNameService()>:
    fd50:	e92d4070 	push	{r4, r5, r6, lr}
    fd54:	e30c57dc 	movw	r5, #51164	; 0xc7dc
    fd58:	e3405001 	movt	r5, #1
    fd5c:	e3a03000 	mov	r3, #0
    fd60:	e1a04000 	mov	r4, r0
    fd64:	e5803004 	str	r3, [r0, #4]
    fd68:	e5952000 	ldr	r2, [r5]
    fd6c:	e5803000 	str	r3, [r0]
    fd70:	e1520003 	cmp	r2, r3
    fd74:	0a000005 	beq	fd90 <CDeviceNameService::CDeviceNameService()+0x40>
    fd78:	e30b10e4 	movw	r1, #45284	; 0xb0e4
    fd7c:	e3401001 	movt	r1, #1
    fd80:	e30b00fc 	movw	r0, #45308	; 0xb0fc
    fd84:	e3400001 	movt	r0, #1
    fd88:	e3a0201f 	mov	r2, #31
    fd8c:	ebffff3d 	bl	fa88 <assertion_failed>
    fd90:	e5854000 	str	r4, [r5]
    fd94:	e1a00004 	mov	r0, r4
    fd98:	e8bd8070 	pop	{r4, r5, r6, pc}

0000fd9c <CDeviceNameService::~CDeviceNameService()>:
    fd9c:	e92d4070 	push	{r4, r5, r6, lr}
    fda0:	e1a05000 	mov	r5, r0
    fda4:	e5903000 	ldr	r3, [r0]
    fda8:	ed2d8b02 	vpush	{d8}
    fdac:	e3530000 	cmp	r3, #0
    fdb0:	0a000019 	beq	fe1c <CDeviceNameService::~CDeviceNameService()+0x80>
    fdb4:	e1a00003 	mov	r0, r3
    fdb8:	f2808010 	vmov.i32	d8, #0	; 0x00000000
    fdbc:	ea00000b 	b	fdf0 <CDeviceNameService::~CDeviceNameService()+0x54>
    fdc0:	e1a00002 	mov	r0, r2
    fdc4:	eb002268 	bl	1876c <operator delete[](void*)>
    fdc8:	e5950000 	ldr	r0, [r5]
    fdcc:	e3a01010 	mov	r1, #16
    fdd0:	e2803004 	add	r3, r0, #4
    fdd4:	f403878f 	vst1.32	{d8}, [r3]
    fdd8:	eb002264 	bl	18770 <operator delete(void*, unsigned int)>
    fddc:	e5854000 	str	r4, [r5]
    fde0:	e3540000 	cmp	r4, #0
    fde4:	0a00000c 	beq	fe1c <CDeviceNameService::~CDeviceNameService()+0x80>
    fde8:	e1a00004 	mov	r0, r4
    fdec:	e1a03004 	mov	r3, r4
    fdf0:	e5932004 	ldr	r2, [r3, #4]
    fdf4:	e280c004 	add	ip, r0, #4
    fdf8:	e3a01010 	mov	r1, #16
    fdfc:	e5934000 	ldr	r4, [r3]
    fe00:	e3520000 	cmp	r2, #0
    fe04:	1affffed 	bne	fdc0 <CDeviceNameService::~CDeviceNameService()+0x24>
    fe08:	f40c878f 	vst1.32	{d8}, [ip]
    fe0c:	eb002257 	bl	18770 <operator delete(void*, unsigned int)>
    fe10:	e5854000 	str	r4, [r5]
    fe14:	e3540000 	cmp	r4, #0
    fe18:	1afffff2 	bne	fde8 <CDeviceNameService::~CDeviceNameService()+0x4c>
    fe1c:	ecbd8b02 	vpop	{d8}
    fe20:	e30c37dc 	movw	r3, #51164	; 0xc7dc
    fe24:	e3403001 	movt	r3, #1
    fe28:	e1a00005 	mov	r0, r5
    fe2c:	e3a02000 	mov	r2, #0
    fe30:	e5832000 	str	r2, [r3]
    fe34:	e8bd8070 	pop	{r4, r5, r6, pc}

0000fe38 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
    fe38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fe3c:	e1a05000 	mov	r5, r0
    fe40:	e5900004 	ldr	r0, [r0, #4]
    fe44:	e1a06001 	mov	r6, r1
    fe48:	e1a07002 	mov	r7, r2
    fe4c:	e1a08003 	mov	r8, r3
    fe50:	e3500000 	cmp	r0, #0
    fe54:	1a000017 	bne	feb8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
    fe58:	e3a00010 	mov	r0, #16
    fe5c:	eb00223f 	bl	18760 <operator new(unsigned int)>
    fe60:	e3560000 	cmp	r6, #0
    fe64:	e1a04000 	mov	r4, r0
    fe68:	0a00001b 	beq	fedc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa4>
    fe6c:	e1a00006 	mov	r0, r6
    fe70:	ebfff29b 	bl	c8e4 <strlen>
    fe74:	e2800001 	add	r0, r0, #1
    fe78:	eb002239 	bl	18764 <operator new[](unsigned int)>
    fe7c:	e1a01006 	mov	r1, r6
    fe80:	e5840004 	str	r0, [r4, #4]
    fe84:	ebfff300 	bl	ca8c <strcpy>
    fe88:	e3570000 	cmp	r7, #0
    fe8c:	0a00000b 	beq	fec0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
    fe90:	e5952004 	ldr	r2, [r5, #4]
    fe94:	e5953000 	ldr	r3, [r5]
    fe98:	e3520000 	cmp	r2, #0
    fe9c:	e5847008 	str	r7, [r4, #8]
    fea0:	e5c4800c 	strb	r8, [r4, #12]
    fea4:	e5843000 	str	r3, [r4]
    fea8:	e5854000 	str	r4, [r5]
    feac:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    feb0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    feb4:	eaffed96 	b	b514 <LeaveCritical>
    feb8:	ebffed68 	bl	b460 <EnterCritical>
    febc:	eaffffe5 	b	fe58 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
    fec0:	e30b10e4 	movw	r1, #45284	; 0xb0e4
    fec4:	e3401001 	movt	r1, #1
    fec8:	e30b0114 	movw	r0, #45332	; 0xb114
    fecc:	e3400001 	movt	r0, #1
    fed0:	e3a02040 	mov	r2, #64	; 0x40
    fed4:	ebfffeeb 	bl	fa88 <assertion_failed>
    fed8:	eaffffec 	b	fe90 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x58>
    fedc:	e30b10e4 	movw	r1, #45284	; 0xb0e4
    fee0:	e3401001 	movt	r1, #1
    fee4:	e30b0108 	movw	r0, #45320	; 0xb108
    fee8:	e3400001 	movt	r0, #1
    feec:	e3a0203b 	mov	r2, #59	; 0x3b
    fef0:	ebfffee4 	bl	fa88 <assertion_failed>
    fef4:	eaffffdc 	b	fe6c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x34>

0000fef8 <CDeviceNameService::GetDevice(char const*, bool)>:
    fef8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    fefc:	e1a09000 	mov	r9, r0
    ff00:	e1a06002 	mov	r6, r2
    ff04:	e2515000 	subs	r5, r1, #0
    ff08:	0a000035 	beq	ffe4 <CDeviceNameService::GetDevice(char const*, bool)+0xec>
    ff0c:	e5990004 	ldr	r0, [r9, #4]
    ff10:	e3500000 	cmp	r0, #0
    ff14:	1a00001a 	bne	ff84 <CDeviceNameService::GetDevice(char const*, bool)+0x8c>
    ff18:	e5994000 	ldr	r4, [r9]
    ff1c:	e3540000 	cmp	r4, #0
    ff20:	0a00001f 	beq	ffa4 <CDeviceNameService::GetDevice(char const*, bool)+0xac>
    ff24:	e30b80e4 	movw	r8, #45284	; 0xb0e4
    ff28:	e3408001 	movt	r8, #1
    ff2c:	e30b7124 	movw	r7, #45348	; 0xb124
    ff30:	e3407001 	movt	r7, #1
    ff34:	ea000009 	b	ff60 <CDeviceNameService::GetDevice(char const*, bool)+0x68>
    ff38:	e1a00005 	mov	r0, r5
    ff3c:	ebfff272 	bl	c90c <strcmp>
    ff40:	e3500000 	cmp	r0, #0
    ff44:	1a000002 	bne	ff54 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
    ff48:	e5d4300c 	ldrb	r3, [r4, #12]
    ff4c:	e1530006 	cmp	r3, r6
    ff50:	0a000016 	beq	ffb0 <CDeviceNameService::GetDevice(char const*, bool)+0xb8>
    ff54:	e5944000 	ldr	r4, [r4]
    ff58:	e3540000 	cmp	r4, #0
    ff5c:	0a00000c 	beq	ff94 <CDeviceNameService::GetDevice(char const*, bool)+0x9c>
    ff60:	e5941004 	ldr	r1, [r4, #4]
    ff64:	e3510000 	cmp	r1, #0
    ff68:	1afffff2 	bne	ff38 <CDeviceNameService::GetDevice(char const*, bool)+0x40>
    ff6c:	e1a01008 	mov	r1, r8
    ff70:	e3a02054 	mov	r2, #84	; 0x54
    ff74:	e1a00007 	mov	r0, r7
    ff78:	ebfffec2 	bl	fa88 <assertion_failed>
    ff7c:	e5941004 	ldr	r1, [r4, #4]
    ff80:	eaffffec 	b	ff38 <CDeviceNameService::GetDevice(char const*, bool)+0x40>
    ff84:	ebffed35 	bl	b460 <EnterCritical>
    ff88:	e5994000 	ldr	r4, [r9]
    ff8c:	e3540000 	cmp	r4, #0
    ff90:	1affffe3 	bne	ff24 <CDeviceNameService::GetDevice(char const*, bool)+0x2c>
    ff94:	e5993004 	ldr	r3, [r9, #4]
    ff98:	e3530000 	cmp	r3, #0
    ff9c:	0a000000 	beq	ffa4 <CDeviceNameService::GetDevice(char const*, bool)+0xac>
    ffa0:	ebffed5b 	bl	b514 <LeaveCritical>
    ffa4:	e3a04000 	mov	r4, #0
    ffa8:	e1a00004 	mov	r0, r4
    ffac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ffb0:	e5993004 	ldr	r3, [r9, #4]
    ffb4:	e5944008 	ldr	r4, [r4, #8]
    ffb8:	e3530000 	cmp	r3, #0
    ffbc:	1a00000f 	bne	10000 <CDeviceNameService::GetDevice(char const*, bool)+0x108>
    ffc0:	e3540000 	cmp	r4, #0
    ffc4:	1afffff7 	bne	ffa8 <CDeviceNameService::GetDevice(char const*, bool)+0xb0>
    ffc8:	e30b10e4 	movw	r1, #45284	; 0xb0e4
    ffcc:	e3401001 	movt	r1, #1
    ffd0:	e30b0138 	movw	r0, #45368	; 0xb138
    ffd4:	e3400001 	movt	r0, #1
    ffd8:	e3a0205c 	mov	r2, #92	; 0x5c
    ffdc:	ebfffea9 	bl	fa88 <assertion_failed>
    ffe0:	eafffff0 	b	ffa8 <CDeviceNameService::GetDevice(char const*, bool)+0xb0>
    ffe4:	e30b10e4 	movw	r1, #45284	; 0xb0e4
    ffe8:	e3401001 	movt	r1, #1
    ffec:	e30b0108 	movw	r0, #45320	; 0xb108
    fff0:	e3400001 	movt	r0, #1
    fff4:	e3a0204d 	mov	r2, #77	; 0x4d
    fff8:	ebfffea2 	bl	fa88 <assertion_failed>
    fffc:	eaffffc2 	b	ff0c <CDeviceNameService::GetDevice(char const*, bool)+0x14>
   10000:	ebffed43 	bl	b514 <LeaveCritical>
   10004:	eaffffed 	b	ffc0 <CDeviceNameService::GetDevice(char const*, bool)+0xc8>

00010008 <CDeviceNameService::Get()>:
   10008:	e92d4010 	push	{r4, lr}
   1000c:	e30c47dc 	movw	r4, #51164	; 0xc7dc
   10010:	e3404001 	movt	r4, #1
   10014:	e5940000 	ldr	r0, [r4]
   10018:	e3500000 	cmp	r0, #0
   1001c:	18bd8010 	popne	{r4, pc}
   10020:	e3a02086 	mov	r2, #134	; 0x86
   10024:	e30b10e4 	movw	r1, #45284	; 0xb0e4
   10028:	e3401001 	movt	r1, #1
   1002c:	e30b0148 	movw	r0, #45384	; 0xb148
   10030:	e3400001 	movt	r0, #1
   10034:	ebfffe93 	bl	fa88 <assertion_failed>
   10038:	e5940000 	ldr	r0, [r4]
   1003c:	e8bd8010 	pop	{r4, pc}

00010040 <CDeviceNameService::ListDevices(CDevice*)>:
   10040:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10044:	e1a04000 	mov	r4, r0
   10048:	e2516000 	subs	r6, r1, #0
   1004c:	e24dd01c 	sub	sp, sp, #28
   10050:	0a000051 	beq	1019c <CDeviceNameService::ListDevices(CDevice*)+0x15c>
   10054:	e5944000 	ldr	r4, [r4]
   10058:	e3540000 	cmp	r4, #0
   1005c:	0a00002a 	beq	1010c <CDeviceNameService::ListDevices(CDevice*)+0xcc>
   10060:	e30b90e4 	movw	r9, #45284	; 0xb0e4
   10064:	e3409001 	movt	r9, #1
   10068:	e30b8124 	movw	r8, #45348	; 0xb124
   1006c:	e3408001 	movt	r8, #1
   10070:	e30b7164 	movw	r7, #45412	; 0xb164
   10074:	e3407001 	movt	r7, #1
   10078:	e3a05000 	mov	r5, #0
   1007c:	e28d0008 	add	r0, sp, #8
   10080:	e2855001 	add	r5, r5, #1
   10084:	eb0005c4 	bl	1179c <CString::CString()>
   10088:	e594c004 	ldr	ip, [r4, #4]
   1008c:	e35c0000 	cmp	ip, #0
   10090:	0a00003b 	beq	10184 <CDeviceNameService::ListDevices(CDevice*)+0x144>
   10094:	e5d4200c 	ldrb	r2, [r4, #12]
   10098:	e1a01007 	mov	r1, r7
   1009c:	e28d0008 	add	r0, sp, #8
   100a0:	e1a0300c 	mov	r3, ip
   100a4:	e3520000 	cmp	r2, #0
   100a8:	e3a0b00a 	mov	fp, #10
   100ac:	03a0e063 	moveq	lr, #99	; 0x63
   100b0:	13a0e062 	movne	lr, #98	; 0x62
   100b4:	e3a0a020 	mov	sl, #32
   100b8:	e3150003 	tst	r5, #3
   100bc:	e1a0200e 	mov	r2, lr
   100c0:	1a000013 	bne	10114 <CDeviceNameService::ListDevices(CDevice*)+0xd4>
   100c4:	e58db000 	str	fp, [sp]
   100c8:	eb000d55 	bl	13624 <CString::Format(char const*, ...)>
   100cc:	e5963000 	ldr	r3, [r6]
   100d0:	e28d0008 	add	r0, sp, #8
   100d4:	e593a00c 	ldr	sl, [r3, #12]
   100d8:	eb0005c6 	bl	117f8 <CString::operator char const*() const>
   100dc:	e1a0b000 	mov	fp, r0
   100e0:	e28d0008 	add	r0, sp, #8
   100e4:	eb0005f3 	bl	118b8 <CString::GetLength() const>
   100e8:	e1a0100b 	mov	r1, fp
   100ec:	e1a02000 	mov	r2, r0
   100f0:	e1a00006 	mov	r0, r6
   100f4:	e12fff3a 	blx	sl
   100f8:	e5944000 	ldr	r4, [r4]
   100fc:	e28d0008 	add	r0, sp, #8
   10100:	eb00058c 	bl	11738 <CString::~CString()>
   10104:	e3540000 	cmp	r4, #0
   10108:	1affffdb 	bne	1007c <CDeviceNameService::ListDevices(CDevice*)+0x3c>
   1010c:	e28dd01c 	add	sp, sp, #28
   10110:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10114:	e58da000 	str	sl, [sp]
   10118:	e28d0008 	add	r0, sp, #8
   1011c:	eb000d40 	bl	13624 <CString::Format(char const*, ...)>
   10120:	e5963000 	ldr	r3, [r6]
   10124:	e28d0008 	add	r0, sp, #8
   10128:	e593a00c 	ldr	sl, [r3, #12]
   1012c:	eb0005b1 	bl	117f8 <CString::operator char const*() const>
   10130:	e1a0b000 	mov	fp, r0
   10134:	e28d0008 	add	r0, sp, #8
   10138:	eb0005de 	bl	118b8 <CString::GetLength() const>
   1013c:	e1a0100b 	mov	r1, fp
   10140:	e1a02000 	mov	r2, r0
   10144:	e1a00006 	mov	r0, r6
   10148:	e12fff3a 	blx	sl
   1014c:	e5944000 	ldr	r4, [r4]
   10150:	e28d0008 	add	r0, sp, #8
   10154:	eb000577 	bl	11738 <CString::~CString()>
   10158:	e3540000 	cmp	r4, #0
   1015c:	1affffc6 	bne	1007c <CDeviceNameService::ListDevices(CDevice*)+0x3c>
   10160:	e5963000 	ldr	r3, [r6]
   10164:	e1a00006 	mov	r0, r6
   10168:	e3a02001 	mov	r2, #1
   1016c:	e30b1170 	movw	r1, #45424	; 0xb170
   10170:	e3401001 	movt	r1, #1
   10174:	e593300c 	ldr	r3, [r3, #12]
   10178:	e12fff33 	blx	r3
   1017c:	e28dd01c 	add	sp, sp, #28
   10180:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10184:	e3a02073 	mov	r2, #115	; 0x73
   10188:	e1a01009 	mov	r1, r9
   1018c:	e1a00008 	mov	r0, r8
   10190:	ebfffe3c 	bl	fa88 <assertion_failed>
   10194:	e594c004 	ldr	ip, [r4, #4]
   10198:	eaffffbd 	b	10094 <CDeviceNameService::ListDevices(CDevice*)+0x54>
   1019c:	e30b10e4 	movw	r1, #45284	; 0xb0e4
   101a0:	e3401001 	movt	r1, #1
   101a4:	e30b0154 	movw	r0, #45396	; 0xb154
   101a8:	e3400001 	movt	r0, #1
   101ac:	e3a0206a 	mov	r2, #106	; 0x6a
   101b0:	ebfffe34 	bl	fa88 <assertion_failed>
   101b4:	eaffffa6 	b	10054 <CDeviceNameService::ListDevices(CDevice*)+0x14>

000101b8 <CLogger::CLogger(unsigned int, CTimer*)>:
   101b8:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   101bc:	e92d4070 	push	{r4, r5, r6, lr}
   101c0:	e280c0f0 	add	ip, r0, #240	; 0xf0
   101c4:	e1a04000 	mov	r4, r0
   101c8:	e280e0e4 	add	lr, r0, #228	; 0xe4
   101cc:	e2805010 	add	r5, r0, #16
   101d0:	e5801000 	str	r1, [r0]
   101d4:	e5802004 	str	r2, [r0, #4]
   101d8:	e3a01000 	mov	r1, #0
   101dc:	e3a03001 	mov	r3, #1
   101e0:	e5801008 	str	r1, [r0, #8]
   101e4:	e580100c 	str	r1, [r0, #12]
   101e8:	e3a00901 	mov	r0, #16384	; 0x4000
   101ec:	f445078f 	vst1.32	{d16}, [r5]
   101f0:	e5843018 	str	r3, [r4, #24]
   101f4:	f44e078f 	vst1.32	{d16}, [lr]
   101f8:	e58430ec 	str	r3, [r4, #236]	; 0xec
   101fc:	f44c078f 	vst1.32	{d16}, [ip]
   10200:	eb002157 	bl	18764 <operator new[](unsigned int)>
   10204:	e30c37e0 	movw	r3, #51168	; 0xc7e0
   10208:	e3403001 	movt	r3, #1
   1020c:	e584000c 	str	r0, [r4, #12]
   10210:	e1a00004 	mov	r0, r4
   10214:	e5834000 	str	r4, [r3]
   10218:	e8bd8070 	pop	{r4, r5, r6, pc}

0001021c <CLogger::~CLogger()>:
   1021c:	e30c27e0 	movw	r2, #51168	; 0xc7e0
   10220:	e3402001 	movt	r2, #1
   10224:	e3a01000 	mov	r1, #0
   10228:	e92d4070 	push	{r4, r5, r6, lr}
   1022c:	e59030e8 	ldr	r3, [r0, #232]	; 0xe8
   10230:	e1a04000 	mov	r4, r0
   10234:	e1a05001 	mov	r5, r1
   10238:	e5821000 	str	r1, [r2]
   1023c:	ea000007 	b	10260 <CLogger::~CLogger()+0x44>
   10240:	e590001c 	ldr	r0, [r0, #28]
   10244:	eb002149 	bl	18770 <operator delete(void*, unsigned int)>
   10248:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   1024c:	e2833001 	add	r3, r3, #1
   10250:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   10254:	e3530032 	cmp	r3, #50	; 0x32
   10258:	058450e8 	streq	r5, [r4, #232]	; 0xe8
   1025c:	03a03000 	moveq	r3, #0
   10260:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   10264:	e0840103 	add	r0, r4, r3, lsl #2
   10268:	e3a01f42 	mov	r1, #264	; 0x108
   1026c:	e1520003 	cmp	r2, r3
   10270:	1afffff2 	bne	10240 <CLogger::~CLogger()+0x24>
   10274:	e594000c 	ldr	r0, [r4, #12]
   10278:	e3500000 	cmp	r0, #0
   1027c:	0a000000 	beq	10284 <CLogger::~CLogger()+0x68>
   10280:	eb002139 	bl	1876c <operator delete[](void*)>
   10284:	e1a00004 	mov	r0, r4
   10288:	e8bd8070 	pop	{r4, r5, r6, pc}

0001028c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   1028c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10290:	e590e000 	ldr	lr, [r0]
   10294:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
   10298:	e152000e 	cmp	r2, lr
   1029c:	8a00003b 	bhi	10390 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x104>
   102a0:	e1a07003 	mov	r7, r3
   102a4:	e1a05002 	mov	r5, r2
   102a8:	e3a03000 	mov	r3, #0
   102ac:	e1a04000 	mov	r4, r0
   102b0:	e3520000 	cmp	r2, #0
   102b4:	e5cd3000 	strb	r3, [sp]
   102b8:	0a000036 	beq	10398 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x10c>
   102bc:	e1a0600d 	mov	r6, sp
   102c0:	e1a00006 	mov	r0, r6
   102c4:	ebfff20d 	bl	cb00 <strcat>
   102c8:	e1a00006 	mov	r0, r6
   102cc:	e30b117c 	movw	r1, #45436	; 0xb17c
   102d0:	e3401001 	movt	r1, #1
   102d4:	ebfff209 	bl	cb00 <strcat>
   102d8:	e1a01007 	mov	r1, r7
   102dc:	e1a00006 	mov	r0, r6
   102e0:	ebfff206 	bl	cb00 <strcat>
   102e4:	e30b1170 	movw	r1, #45424	; 0xb170
   102e8:	e3401001 	movt	r1, #1
   102ec:	e1a00006 	mov	r0, r6
   102f0:	ebfff202 	bl	cb00 <strcat>
   102f4:	e1a00006 	mov	r0, r6
   102f8:	ebfff179 	bl	c8e4 <strlen>
   102fc:	e5943008 	ldr	r3, [r4, #8]
   10300:	e1a02000 	mov	r2, r0
   10304:	e1a07000 	mov	r7, r0
   10308:	e1a00003 	mov	r0, r3
   1030c:	e1a01006 	mov	r1, r6
   10310:	e5933000 	ldr	r3, [r3]
   10314:	e593300c 	ldr	r3, [r3, #12]
   10318:	e12fff33 	blx	r3
   1031c:	e5940018 	ldr	r0, [r4, #24]
   10320:	e3500000 	cmp	r0, #0
   10324:	1a000030 	bne	103ec <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x160>
   10328:	e0862007 	add	r2, r6, r7
   1032c:	e1a00006 	mov	r0, r6
   10330:	e1500002 	cmp	r0, r2
   10334:	0a00000f 	beq	10378 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xec>
   10338:	e0d030d1 	ldrsb	r3, [r0], #1
   1033c:	e353000d 	cmp	r3, #13
   10340:	0afffffa 	beq	10330 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xa4>
   10344:	e5941010 	ldr	r1, [r4, #16]
   10348:	e594c00c 	ldr	ip, [r4, #12]
   1034c:	e7cc3001 	strb	r3, [ip, r1]
   10350:	e5943010 	ldr	r3, [r4, #16]
   10354:	e5941014 	ldr	r1, [r4, #20]
   10358:	e2833001 	add	r3, r3, #1
   1035c:	e7ed3053 	ubfx	r3, r3, #0, #14
   10360:	e5843010 	str	r3, [r4, #16]
   10364:	e1530001 	cmp	r3, r1
   10368:	1afffff0 	bne	10330 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xa4>
   1036c:	e2433001 	sub	r3, r3, #1
   10370:	e7ed3053 	ubfx	r3, r3, #0, #14
   10374:	e5843010 	str	r3, [r4, #16]
   10378:	e5943018 	ldr	r3, [r4, #24]
   1037c:	e3530000 	cmp	r3, #0
   10380:	0a000000 	beq	10388 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xfc>
   10384:	ebffec62 	bl	b514 <LeaveCritical>
   10388:	e3550000 	cmp	r5, #0
   1038c:	0a000018 	beq	103f4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x168>
   10390:	e28dd0c8 	add	sp, sp, #200	; 0xc8
   10394:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10398:	e1a0600d 	mov	r6, sp
   1039c:	e1a08001 	mov	r8, r1
   103a0:	e1a00006 	mov	r0, r6
   103a4:	e30b1174 	movw	r1, #45428	; 0xb174
   103a8:	e3401001 	movt	r1, #1
   103ac:	ebfff1b6 	bl	ca8c <strcpy>
   103b0:	e1a01008 	mov	r1, r8
   103b4:	e1a00006 	mov	r0, r6
   103b8:	ebfff1d0 	bl	cb00 <strcat>
   103bc:	e1a00006 	mov	r0, r6
   103c0:	e30b117c 	movw	r1, #45436	; 0xb17c
   103c4:	e3401001 	movt	r1, #1
   103c8:	ebfff1cc 	bl	cb00 <strcat>
   103cc:	e1a01007 	mov	r1, r7
   103d0:	e1a00006 	mov	r0, r6
   103d4:	ebfff1c9 	bl	cb00 <strcat>
   103d8:	e1a00006 	mov	r0, r6
   103dc:	e30b1180 	movw	r1, #45440	; 0xb180
   103e0:	e3401001 	movt	r1, #1
   103e4:	ebfff1c5 	bl	cb00 <strcat>
   103e8:	eaffffbd 	b	102e4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x58>
   103ec:	ebffec1b 	bl	b460 <EnterCritical>
   103f0:	eaffffcc 	b	10328 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x9c>
   103f4:	ebffec63 	bl	b588 <halt>

000103f8 <CLogger::Get()>:
   103f8:	e30c37e0 	movw	r3, #51168	; 0xc7e0
   103fc:	e3403001 	movt	r3, #1
   10400:	e5930000 	ldr	r0, [r3]
   10404:	e12fff1e 	bx	lr

00010408 <CLogger::Write(char const*)>:
   10408:	e92d4070 	push	{r4, r5, r6, lr}
   1040c:	e1a04000 	mov	r4, r0
   10410:	e1a00001 	mov	r0, r1
   10414:	e1a05001 	mov	r5, r1
   10418:	ebfff131 	bl	c8e4 <strlen>
   1041c:	e5943008 	ldr	r3, [r4, #8]
   10420:	e1a02000 	mov	r2, r0
   10424:	e1a06000 	mov	r6, r0
   10428:	e1a01005 	mov	r1, r5
   1042c:	e1a00003 	mov	r0, r3
   10430:	e5933000 	ldr	r3, [r3]
   10434:	e593300c 	ldr	r3, [r3, #12]
   10438:	e12fff33 	blx	r3
   1043c:	e5940018 	ldr	r0, [r4, #24]
   10440:	e3500000 	cmp	r0, #0
   10444:	1a000017 	bne	104a8 <CLogger::Write(char const*)+0xa0>
   10448:	e0850006 	add	r0, r5, r6
   1044c:	e1550000 	cmp	r5, r0
   10450:	0a00000f 	beq	10494 <CLogger::Write(char const*)+0x8c>
   10454:	e0d530d1 	ldrsb	r3, [r5], #1
   10458:	e353000d 	cmp	r3, #13
   1045c:	0afffffa 	beq	1044c <CLogger::Write(char const*)+0x44>
   10460:	e5942010 	ldr	r2, [r4, #16]
   10464:	e594100c 	ldr	r1, [r4, #12]
   10468:	e7c13002 	strb	r3, [r1, r2]
   1046c:	e5943010 	ldr	r3, [r4, #16]
   10470:	e5942014 	ldr	r2, [r4, #20]
   10474:	e2833001 	add	r3, r3, #1
   10478:	e7ed3053 	ubfx	r3, r3, #0, #14
   1047c:	e5843010 	str	r3, [r4, #16]
   10480:	e1530002 	cmp	r3, r2
   10484:	1afffff0 	bne	1044c <CLogger::Write(char const*)+0x44>
   10488:	e2433001 	sub	r3, r3, #1
   1048c:	e7ed3053 	ubfx	r3, r3, #0, #14
   10490:	e5843010 	str	r3, [r4, #16]
   10494:	e5943018 	ldr	r3, [r4, #24]
   10498:	e3530000 	cmp	r3, #0
   1049c:	08bd8070 	popeq	{r4, r5, r6, pc}
   104a0:	e8bd4070 	pop	{r4, r5, r6, lr}
   104a4:	eaffec1a 	b	b514 <LeaveCritical>
   104a8:	ebffebec 	bl	b460 <EnterCritical>
   104ac:	eaffffe5 	b	10448 <CLogger::Write(char const*)+0x40>

000104b0 <CLogger::Read(void*, unsigned int)>:
   104b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   104b4:	e1a04000 	mov	r4, r0
   104b8:	e5900018 	ldr	r0, [r0, #24]
   104bc:	e1a05001 	mov	r5, r1
   104c0:	e1a06002 	mov	r6, r2
   104c4:	e3500000 	cmp	r0, #0
   104c8:	1a00001a 	bne	10538 <CLogger::Read(void*, unsigned int)+0x88>
   104cc:	e1c421d0 	ldrd	r2, [r4, #16]
   104d0:	e1520003 	cmp	r2, r3
   104d4:	0a00001f 	beq	10558 <CLogger::Read(void*, unsigned int)+0xa8>
   104d8:	e1a07006 	mov	r7, r6
   104dc:	e3a0c000 	mov	ip, #0
   104e0:	ea00000a 	b	10510 <CLogger::Read(void*, unsigned int)+0x60>
   104e4:	e594100c 	ldr	r1, [r4, #12]
   104e8:	e28cc001 	add	ip, ip, #1
   104ec:	e19130d3 	ldrsb	r3, [r1, r3]
   104f0:	e4c53001 	strb	r3, [r5], #1
   104f4:	e5943014 	ldr	r3, [r4, #20]
   104f8:	e5941010 	ldr	r1, [r4, #16]
   104fc:	e2833001 	add	r3, r3, #1
   10500:	e7ed3053 	ubfx	r3, r3, #0, #14
   10504:	e5843014 	str	r3, [r4, #20]
   10508:	e1530001 	cmp	r3, r1
   1050c:	0a000014 	beq	10564 <CLogger::Read(void*, unsigned int)+0xb4>
   10510:	e15c0006 	cmp	ip, r6
   10514:	1afffff2 	bne	104e4 <CLogger::Read(void*, unsigned int)+0x34>
   10518:	e5943018 	ldr	r3, [r4, #24]
   1051c:	e3530000 	cmp	r3, #0
   10520:	1a000001 	bne	1052c <CLogger::Read(void*, unsigned int)+0x7c>
   10524:	e1a00007 	mov	r0, r7
   10528:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1052c:	ebffebf8 	bl	b514 <LeaveCritical>
   10530:	e1a00007 	mov	r0, r7
   10534:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10538:	ebffebc8 	bl	b460 <EnterCritical>
   1053c:	e1c421d0 	ldrd	r2, [r4, #16]
   10540:	e1520003 	cmp	r2, r3
   10544:	1affffe3 	bne	104d8 <CLogger::Read(void*, unsigned int)+0x28>
   10548:	e5943018 	ldr	r3, [r4, #24]
   1054c:	e3530000 	cmp	r3, #0
   10550:	0a000000 	beq	10558 <CLogger::Read(void*, unsigned int)+0xa8>
   10554:	ebffebee 	bl	b514 <LeaveCritical>
   10558:	e3e07000 	mvn	r7, #0
   1055c:	e1a00007 	mov	r0, r7
   10560:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10564:	e5943018 	ldr	r3, [r4, #24]
   10568:	e1a0700c 	mov	r7, ip
   1056c:	e3530000 	cmp	r3, #0
   10570:	0affffeb 	beq	10524 <CLogger::Read(void*, unsigned int)+0x74>
   10574:	eaffffec 	b	1052c <CLogger::Read(void*, unsigned int)+0x7c>

00010578 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   10578:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1057c:	e1a04000 	mov	r4, r0
   10580:	e3a00f42 	mov	r0, #264	; 0x108
   10584:	e1a07003 	mov	r7, r3
   10588:	e1a06001 	mov	r6, r1
   1058c:	e1a08002 	mov	r8, r2
   10590:	eb002072 	bl	18760 <operator new(unsigned int)>
   10594:	e1a05000 	mov	r5, r0
   10598:	e1a01006 	mov	r1, r6
   1059c:	e3a02032 	mov	r2, #50	; 0x32
   105a0:	e4c08001 	strb	r8, [r0], #1
   105a4:	ebfff143 	bl	cab8 <strncpy>
   105a8:	e3a06000 	mov	r6, #0
   105ac:	e1a01007 	mov	r1, r7
   105b0:	e2850033 	add	r0, r5, #51	; 0x33
   105b4:	e3a020c8 	mov	r2, #200	; 0xc8
   105b8:	e5c56032 	strb	r6, [r5, #50]	; 0x32
   105bc:	ebfff13d 	bl	cab8 <strncpy>
   105c0:	e5940004 	ldr	r0, [r4, #4]
   105c4:	e5c560fa 	strb	r6, [r5, #250]	; 0xfa
   105c8:	e1500006 	cmp	r0, r6
   105cc:	0a000024 	beq	10664 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xec>
   105d0:	ebffed62 	bl	bb60 <CTimer::GetTime() const>
   105d4:	e58500fc 	str	r0, [r5, #252]	; 0xfc
   105d8:	e5940004 	ldr	r0, [r4, #4]
   105dc:	ebffed5b 	bl	bb50 <CTimer::GetTicks() const>
   105e0:	e308251f 	movw	r2, #34079	; 0x851f
   105e4:	e34521eb 	movt	r2, #20971	; 0x51eb
   105e8:	e1a01000 	mov	r1, r0
   105ec:	e3a0c064 	mov	ip, #100	; 0x64
   105f0:	e5940004 	ldr	r0, [r4, #4]
   105f4:	e0832291 	umull	r2, r3, r1, r2
   105f8:	e1a032a3 	lsr	r3, r3, #5
   105fc:	e063139c 	mls	r3, ip, r3, r1
   10600:	e5853100 	str	r3, [r5, #256]	; 0x100
   10604:	ebffed2b 	bl	bab8 <CTimer::GetTimeZone() const>
   10608:	e5850104 	str	r0, [r5, #260]	; 0x104
   1060c:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
   10610:	e3500000 	cmp	r0, #0
   10614:	1a000018 	bne	1067c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x104>
   10618:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   1061c:	e2823001 	add	r3, r2, #1
   10620:	e0842102 	add	r2, r4, r2, lsl #2
   10624:	e3530032 	cmp	r3, #50	; 0x32
   10628:	03a03000 	moveq	r3, #0
   1062c:	e582501c 	str	r5, [r2, #28]
   10630:	e59420e8 	ldr	r2, [r4, #232]	; 0xe8
   10634:	e58430e4 	str	r3, [r4, #228]	; 0xe4
   10638:	e1520003 	cmp	r2, r3
   1063c:	0a000011 	beq	10688 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x110>
   10640:	e3500000 	cmp	r0, #0
   10644:	1a000004 	bne	1065c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe4>
   10648:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
   1064c:	e3530000 	cmp	r3, #0
   10650:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   10654:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   10658:	e12fff13 	bx	r3
   1065c:	ebffebac 	bl	b514 <LeaveCritical>
   10660:	eafffff8 	b	10648 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd0>
   10664:	e58500fc 	str	r0, [r5, #252]	; 0xfc
   10668:	e5850100 	str	r0, [r5, #256]	; 0x100
   1066c:	e5850104 	str	r0, [r5, #260]	; 0x104
   10670:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
   10674:	e3500000 	cmp	r0, #0
   10678:	0affffe6 	beq	10618 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xa0>
   1067c:	ebffeb77 	bl	b460 <EnterCritical>
   10680:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
   10684:	eaffffe3 	b	10618 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xa0>
   10688:	e0842103 	add	r2, r4, r3, lsl #2
   1068c:	e2833001 	add	r3, r3, #1
   10690:	e3530032 	cmp	r3, #50	; 0x32
   10694:	03a03000 	moveq	r3, #0
   10698:	e3500000 	cmp	r0, #0
   1069c:	e592501c 	ldr	r5, [r2, #28]
   106a0:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   106a4:	1a000005 	bne	106c0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x148>
   106a8:	e3550000 	cmp	r5, #0
   106ac:	0affffe5 	beq	10648 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd0>
   106b0:	e1a00005 	mov	r0, r5
   106b4:	e3a01f42 	mov	r1, #264	; 0x108
   106b8:	eb00202c 	bl	18770 <operator delete(void*, unsigned int)>
   106bc:	eaffffe1 	b	10648 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd0>
   106c0:	ebffeb93 	bl	b514 <LeaveCritical>
   106c4:	eafffff7 	b	106a8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x130>

000106c8 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   106c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   106cc:	e1a04000 	mov	r4, r0
   106d0:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
   106d4:	e1a06001 	mov	r6, r1
   106d8:	e1a08002 	mov	r8, r2
   106dc:	e1a07003 	mov	r7, r3
   106e0:	e3500000 	cmp	r0, #0
   106e4:	1a000020 	bne	1076c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xa4>
   106e8:	e1c42ed4 	ldrd	r2, [r4, #228]	; 0xe4
   106ec:	e1530002 	cmp	r3, r2
   106f0:	0a000026 	beq	10790 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xc8>
   106f4:	e0842103 	add	r2, r4, r3, lsl #2
   106f8:	e2833001 	add	r3, r3, #1
   106fc:	e3530032 	cmp	r3, #50	; 0x32
   10700:	03a03000 	moveq	r3, #0
   10704:	e3500000 	cmp	r0, #0
   10708:	e592501c 	ldr	r5, [r2, #28]
   1070c:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   10710:	1a000020 	bne	10798 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd0>
   10714:	e1a01005 	mov	r1, r5
   10718:	e1a00008 	mov	r0, r8
   1071c:	e4d12001 	ldrb	r2, [r1], #1
   10720:	e5c62000 	strb	r2, [r6]
   10724:	ebfff0d8 	bl	ca8c <strcpy>
   10728:	e2851033 	add	r1, r5, #51	; 0x33
   1072c:	e1a00007 	mov	r0, r7
   10730:	ebfff0d5 	bl	ca8c <strcpy>
   10734:	e59d2018 	ldr	r2, [sp, #24]
   10738:	e59530fc 	ldr	r3, [r5, #252]	; 0xfc
   1073c:	e1a00005 	mov	r0, r5
   10740:	e3a01f42 	mov	r1, #264	; 0x108
   10744:	e5823000 	str	r3, [r2]
   10748:	e59d201c 	ldr	r2, [sp, #28]
   1074c:	e5953100 	ldr	r3, [r5, #256]	; 0x100
   10750:	e5823000 	str	r3, [r2]
   10754:	e59d2020 	ldr	r2, [sp, #32]
   10758:	e5953104 	ldr	r3, [r5, #260]	; 0x104
   1075c:	e5823000 	str	r3, [r2]
   10760:	eb002002 	bl	18770 <operator delete(void*, unsigned int)>
   10764:	e3a00001 	mov	r0, #1
   10768:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1076c:	ebffeb3b 	bl	b460 <EnterCritical>
   10770:	e1c42ed4 	ldrd	r2, [r4, #228]	; 0xe4
   10774:	e1520003 	cmp	r2, r3
   10778:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
   1077c:	1affffdc 	bne	106f4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x2c>
   10780:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
   10784:	e3530000 	cmp	r3, #0
   10788:	0a000000 	beq	10790 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xc8>
   1078c:	ebffeb60 	bl	b514 <LeaveCritical>
   10790:	e3a00000 	mov	r0, #0
   10794:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10798:	ebffeb5d 	bl	b514 <LeaveCritical>
   1079c:	eaffffdc 	b	10714 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x4c>

000107a0 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   107a0:	e58010f0 	str	r1, [r0, #240]	; 0xf0
   107a4:	e12fff1e 	bx	lr

000107a8 <CLogger::RegisterPanicHandler(void (*)())>:
   107a8:	e58010f4 	str	r1, [r0, #244]	; 0xf4
   107ac:	e12fff1e 	bx	lr

000107b0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   107b0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   107b4:	e1a07003 	mov	r7, r3
   107b8:	e1a04000 	mov	r4, r0
   107bc:	e24dd024 	sub	sp, sp, #36	; 0x24
   107c0:	e1a06002 	mov	r6, r2
   107c4:	e1a0000d 	mov	r0, sp
   107c8:	e1a05001 	mov	r5, r1
   107cc:	eb0003f2 	bl	1179c <CString::CString()>
   107d0:	e1a01007 	mov	r1, r7
   107d4:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   107d8:	e1a0000d 	mov	r0, sp
   107dc:	eb0006ce 	bl	1231c <CString::FormatV(char const*, std::__va_list)>
   107e0:	e1a0000d 	mov	r0, sp
   107e4:	eb000403 	bl	117f8 <CString::operator char const*() const>
   107e8:	e1a02006 	mov	r2, r6
   107ec:	e1a03000 	mov	r3, r0
   107f0:	e1a01005 	mov	r1, r5
   107f4:	e1a00004 	mov	r0, r4
   107f8:	ebffff5e 	bl	10578 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   107fc:	e5943000 	ldr	r3, [r4]
   10800:	e1560003 	cmp	r6, r3
   10804:	8a000044 	bhi	1091c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x16c>
   10808:	e28d0010 	add	r0, sp, #16
   1080c:	eb0003e2 	bl	1179c <CString::CString()>
   10810:	e3560000 	cmp	r6, #0
   10814:	0a000044 	beq	1092c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x17c>
   10818:	e5940004 	ldr	r0, [r4, #4]
   1081c:	e3500000 	cmp	r0, #0
   10820:	1a00006a 	bne	109d0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x220>
   10824:	e1a01005 	mov	r1, r5
   10828:	e28d0010 	add	r0, sp, #16
   1082c:	eb000425 	bl	118c8 <CString::Append(char const*)>
   10830:	e28d0010 	add	r0, sp, #16
   10834:	e30b117c 	movw	r1, #45436	; 0xb17c
   10838:	e3401001 	movt	r1, #1
   1083c:	eb000421 	bl	118c8 <CString::Append(char const*)>
   10840:	e1a0000d 	mov	r0, sp
   10844:	eb0003eb 	bl	117f8 <CString::operator char const*() const>
   10848:	e1a01000 	mov	r1, r0
   1084c:	e28d0010 	add	r0, sp, #16
   10850:	eb00041c 	bl	118c8 <CString::Append(char const*)>
   10854:	e28d0010 	add	r0, sp, #16
   10858:	e30b1170 	movw	r1, #45424	; 0xb170
   1085c:	e3401001 	movt	r1, #1
   10860:	eb000418 	bl	118c8 <CString::Append(char const*)>
   10864:	e28d0010 	add	r0, sp, #16
   10868:	eb0003e2 	bl	117f8 <CString::operator char const*() const>
   1086c:	e1a05000 	mov	r5, r0
   10870:	ebfff01b 	bl	c8e4 <strlen>
   10874:	e5943008 	ldr	r3, [r4, #8]
   10878:	e1a02000 	mov	r2, r0
   1087c:	e1a07000 	mov	r7, r0
   10880:	e1a00003 	mov	r0, r3
   10884:	e1a01005 	mov	r1, r5
   10888:	e5933000 	ldr	r3, [r3]
   1088c:	e593300c 	ldr	r3, [r3, #12]
   10890:	e12fff33 	blx	r3
   10894:	e5940018 	ldr	r0, [r4, #24]
   10898:	e3500000 	cmp	r0, #0
   1089c:	1a000049 	bne	109c8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x218>
   108a0:	e0850007 	add	r0, r5, r7
   108a4:	e1550000 	cmp	r5, r0
   108a8:	0a00000f 	beq	108ec <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x13c>
   108ac:	e0d530d1 	ldrsb	r3, [r5], #1
   108b0:	e353000d 	cmp	r3, #13
   108b4:	0afffffa 	beq	108a4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf4>
   108b8:	e5942010 	ldr	r2, [r4, #16]
   108bc:	e594100c 	ldr	r1, [r4, #12]
   108c0:	e7c13002 	strb	r3, [r1, r2]
   108c4:	e5943010 	ldr	r3, [r4, #16]
   108c8:	e5942014 	ldr	r2, [r4, #20]
   108cc:	e2833001 	add	r3, r3, #1
   108d0:	e7ed3053 	ubfx	r3, r3, #0, #14
   108d4:	e5843010 	str	r3, [r4, #16]
   108d8:	e1530002 	cmp	r3, r2
   108dc:	1afffff0 	bne	108a4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf4>
   108e0:	e2433001 	sub	r3, r3, #1
   108e4:	e7ed3053 	ubfx	r3, r3, #0, #14
   108e8:	e5843010 	str	r3, [r4, #16]
   108ec:	e5943018 	ldr	r3, [r4, #24]
   108f0:	e3530000 	cmp	r3, #0
   108f4:	0a000000 	beq	108fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x14c>
   108f8:	ebffeb05 	bl	b514 <LeaveCritical>
   108fc:	e3560000 	cmp	r6, #0
   10900:	0a000042 	beq	10a10 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x260>
   10904:	e28d0010 	add	r0, sp, #16
   10908:	eb00038a 	bl	11738 <CString::~CString()>
   1090c:	e1a0000d 	mov	r0, sp
   10910:	eb000388 	bl	11738 <CString::~CString()>
   10914:	e28dd024 	add	sp, sp, #36	; 0x24
   10918:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1091c:	e1a0000d 	mov	r0, sp
   10920:	eb000384 	bl	11738 <CString::~CString()>
   10924:	e28dd024 	add	sp, sp, #36	; 0x24
   10928:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1092c:	e30b1174 	movw	r1, #45428	; 0xb174
   10930:	e3401001 	movt	r1, #1
   10934:	e28d0010 	add	r0, sp, #16
   10938:	eb0003b4 	bl	11810 <CString::operator=(char const*)>
   1093c:	e5940004 	ldr	r0, [r4, #4]
   10940:	e3500000 	cmp	r0, #0
   10944:	0a00000e 	beq	10984 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d4>
   10948:	ebffec8e 	bl	bb88 <CTimer::GetTimeString()>
   1094c:	e2507000 	subs	r7, r0, #0
   10950:	0a00000b 	beq	10984 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d4>
   10954:	eb0003a7 	bl	117f8 <CString::operator char const*() const>
   10958:	e1a01000 	mov	r1, r0
   1095c:	e28d0010 	add	r0, sp, #16
   10960:	eb0003d8 	bl	118c8 <CString::Append(char const*)>
   10964:	e28d0010 	add	r0, sp, #16
   10968:	e30b1188 	movw	r1, #45448	; 0xb188
   1096c:	e3401001 	movt	r1, #1
   10970:	eb0003d4 	bl	118c8 <CString::Append(char const*)>
   10974:	e5973000 	ldr	r3, [r7]
   10978:	e1a00007 	mov	r0, r7
   1097c:	e5933004 	ldr	r3, [r3, #4]
   10980:	e12fff33 	blx	r3
   10984:	e1a01005 	mov	r1, r5
   10988:	e28d0010 	add	r0, sp, #16
   1098c:	eb0003cd 	bl	118c8 <CString::Append(char const*)>
   10990:	e28d0010 	add	r0, sp, #16
   10994:	e30b117c 	movw	r1, #45436	; 0xb17c
   10998:	e3401001 	movt	r1, #1
   1099c:	eb0003c9 	bl	118c8 <CString::Append(char const*)>
   109a0:	e1a0000d 	mov	r0, sp
   109a4:	eb000393 	bl	117f8 <CString::operator char const*() const>
   109a8:	e1a01000 	mov	r1, r0
   109ac:	e28d0010 	add	r0, sp, #16
   109b0:	eb0003c4 	bl	118c8 <CString::Append(char const*)>
   109b4:	e30b1180 	movw	r1, #45440	; 0xb180
   109b8:	e3401001 	movt	r1, #1
   109bc:	e28d0010 	add	r0, sp, #16
   109c0:	eb0003c0 	bl	118c8 <CString::Append(char const*)>
   109c4:	eaffffa2 	b	10854 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xa4>
   109c8:	ebffeaa4 	bl	b460 <EnterCritical>
   109cc:	eaffffb3 	b	108a0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf0>
   109d0:	ebffec6c 	bl	bb88 <CTimer::GetTimeString()>
   109d4:	e2507000 	subs	r7, r0, #0
   109d8:	0affff91 	beq	10824 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x74>
   109dc:	eb000385 	bl	117f8 <CString::operator char const*() const>
   109e0:	e1a01000 	mov	r1, r0
   109e4:	e28d0010 	add	r0, sp, #16
   109e8:	eb0003b6 	bl	118c8 <CString::Append(char const*)>
   109ec:	e28d0010 	add	r0, sp, #16
   109f0:	e30b1188 	movw	r1, #45448	; 0xb188
   109f4:	e3401001 	movt	r1, #1
   109f8:	eb0003b2 	bl	118c8 <CString::Append(char const*)>
   109fc:	e5973000 	ldr	r3, [r7]
   10a00:	e1a00007 	mov	r0, r7
   10a04:	e5933004 	ldr	r3, [r3, #4]
   10a08:	e12fff33 	blx	r3
   10a0c:	eaffff84 	b	10824 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x74>
   10a10:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
   10a14:	e3530000 	cmp	r3, #0
   10a18:	0a000000 	beq	10a20 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x270>
   10a1c:	e12fff33 	blx	r3
   10a20:	ebffead8 	bl	b588 <halt>

00010a24 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   10a24:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   10a28:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   10a2c:	e24dd010 	sub	sp, sp, #16
   10a30:	e28dc018 	add	ip, sp, #24
   10a34:	e59d3014 	ldr	r3, [sp, #20]
   10a38:	e58dc000 	str	ip, [sp]
   10a3c:	e58dc00c 	str	ip, [sp, #12]
   10a40:	ebffff5a 	bl	107b0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   10a44:	e28dd010 	add	sp, sp, #16
   10a48:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   10a4c:	e28dd004 	add	sp, sp, #4
   10a50:	e12fff1e 	bx	lr

00010a54 <CLogger::Initialize(CDevice*)>:
   10a54:	e92d4010 	push	{r4, lr}
   10a58:	e1a04000 	mov	r4, r0
   10a5c:	e24dd008 	sub	sp, sp, #8
   10a60:	e5801008 	str	r1, [r0, #8]
   10a64:	eb0014bf 	bl	15d68 <CMachineInfo::Get()>
   10a68:	eb00144c 	bl	15ba0 <CMachineInfo::GetMachineName() const>
   10a6c:	e3a02003 	mov	r2, #3
   10a70:	e58d0000 	str	r0, [sp]
   10a74:	e30b318c 	movw	r3, #45452	; 0xb18c
   10a78:	e3403001 	movt	r3, #1
   10a7c:	e1a00004 	mov	r0, r4
   10a80:	e30b11a4 	movw	r1, #45476	; 0xb1a4
   10a84:	e3401001 	movt	r1, #1
   10a88:	ebffffe5 	bl	10a24 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10a8c:	e3a00001 	mov	r0, #1
   10a90:	e28dd008 	add	sp, sp, #8
   10a94:	e8bd8010 	pop	{r4, pc}

00010a98 <CSerialDevice::Read(void*, unsigned int)>:
   10a98:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10a9c:	e1a04000 	mov	r4, r0
   10aa0:	e1a05002 	mov	r5, r2
   10aa4:	e2516000 	subs	r6, r1, #0
   10aa8:	0a000056 	beq	10c08 <CSerialDevice::Read(void*, unsigned int)+0x170>
   10aac:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
   10ab0:	e3530000 	cmp	r3, #0
   10ab4:	0a000032 	beq	10b84 <CSerialDevice::Read(void*, unsigned int)+0xec>
   10ab8:	e2847a01 	add	r7, r4, #4096	; 0x1000
   10abc:	e59700c4 	ldr	r0, [r7, #196]	; 0xc4
   10ac0:	e3500000 	cmp	r0, #0
   10ac4:	1a000029 	bne	10b70 <CSerialDevice::Read(void*, unsigned int)+0xd8>
   10ac8:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   10acc:	e3530000 	cmp	r3, #0
   10ad0:	ba00001e 	blt	10b50 <CSerialDevice::Read(void*, unsigned int)+0xb8>
   10ad4:	e3550000 	cmp	r5, #0
   10ad8:	0a00001f 	beq	10b5c <CSerialDevice::Read(void*, unsigned int)+0xc4>
   10adc:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
   10ae0:	e59428b0 	ldr	r2, [r4, #2224]	; 0x8b0
   10ae4:	e1520003 	cmp	r2, r3
   10ae8:	0a000051 	beq	10c34 <CSerialDevice::Read(void*, unsigned int)+0x19c>
   10aec:	e0862005 	add	r2, r6, r5
   10af0:	e1a01006 	mov	r1, r6
   10af4:	ea000003 	b	10b08 <CSerialDevice::Read(void*, unsigned int)+0x70>
   10af8:	e59408ac 	ldr	r0, [r4, #2220]	; 0x8ac
   10afc:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   10b00:	e1500003 	cmp	r0, r3
   10b04:	0a000014 	beq	10b5c <CSerialDevice::Read(void*, unsigned int)+0xc4>
   10b08:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   10b0c:	e0840003 	add	r0, r4, r3
   10b10:	e2833001 	add	r3, r3, #1
   10b14:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
   10b18:	e5d030aa 	ldrb	r3, [r0, #170]	; 0xaa
   10b1c:	e4c13001 	strb	r3, [r1], #1
   10b20:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   10b24:	e1520001 	cmp	r2, r1
   10b28:	e0415006 	sub	r5, r1, r6
   10b2c:	e7ea3053 	ubfx	r3, r3, #0, #11
   10b30:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
   10b34:	1affffef 	bne	10af8 <CSerialDevice::Read(void*, unsigned int)+0x60>
   10b38:	e59730c4 	ldr	r3, [r7, #196]	; 0xc4
   10b3c:	e3530000 	cmp	r3, #0
   10b40:	0a000008 	beq	10b68 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   10b44:	ebffea72 	bl	b514 <LeaveCritical>
   10b48:	e1a00005 	mov	r0, r5
   10b4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10b50:	e59458b4 	ldr	r5, [r4, #2228]	; 0x8b4
   10b54:	e3a03000 	mov	r3, #0
   10b58:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
   10b5c:	e59730c4 	ldr	r3, [r7, #196]	; 0xc4
   10b60:	e3530000 	cmp	r3, #0
   10b64:	1afffff6 	bne	10b44 <CSerialDevice::Read(void*, unsigned int)+0xac>
   10b68:	e1a00005 	mov	r0, r5
   10b6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10b70:	ebffea3a 	bl	b460 <EnterCritical>
   10b74:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   10b78:	e3530000 	cmp	r3, #0
   10b7c:	aaffffd4 	bge	10ad4 <CSerialDevice::Read(void*, unsigned int)+0x3c>
   10b80:	eafffff2 	b	10b50 <CSerialDevice::Read(void*, unsigned int)+0xb8>
   10b84:	e3550000 	cmp	r5, #0
   10b88:	0afffff6 	beq	10b68 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   10b8c:	e3a00a01 	mov	r0, #4096	; 0x1000
   10b90:	e3430f20 	movt	r0, #16160	; 0x3f20
   10b94:	e5902018 	ldr	r2, [r0, #24]
   10b98:	e3120010 	tst	r2, #16
   10b9c:	1a000026 	bne	10c3c <CSerialDevice::Read(void*, unsigned int)+0x1a4>
   10ba0:	e5903000 	ldr	r3, [r0]
   10ba4:	e3130b01 	tst	r3, #1024	; 0x400
   10ba8:	1a000014 	bne	10c00 <CSerialDevice::Read(void*, unsigned int)+0x168>
   10bac:	e3130b02 	tst	r3, #2048	; 0x800
   10bb0:	1a00001b 	bne	10c24 <CSerialDevice::Read(void*, unsigned int)+0x18c>
   10bb4:	e3130c01 	tst	r3, #256	; 0x100
   10bb8:	00862005 	addeq	r2, r6, r5
   10bbc:	01a01006 	moveq	r1, r6
   10bc0:	0a000004 	beq	10bd8 <CSerialDevice::Read(void*, unsigned int)+0x140>
   10bc4:	ea000018 	b	10c2c <CSerialDevice::Read(void*, unsigned int)+0x194>
   10bc8:	e3130b02 	tst	r3, #2048	; 0x800
   10bcc:	1a000014 	bne	10c24 <CSerialDevice::Read(void*, unsigned int)+0x18c>
   10bd0:	e3130c01 	tst	r3, #256	; 0x100
   10bd4:	1a000014 	bne	10c2c <CSerialDevice::Read(void*, unsigned int)+0x194>
   10bd8:	e4c13001 	strb	r3, [r1], #1
   10bdc:	e1510002 	cmp	r1, r2
   10be0:	e0415006 	sub	r5, r1, r6
   10be4:	0affffdf 	beq	10b68 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   10be8:	e5903018 	ldr	r3, [r0, #24]
   10bec:	e3130010 	tst	r3, #16
   10bf0:	1affffdc 	bne	10b68 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   10bf4:	e5903000 	ldr	r3, [r0]
   10bf8:	e3130b01 	tst	r3, #1024	; 0x400
   10bfc:	0afffff1 	beq	10bc8 <CSerialDevice::Read(void*, unsigned int)+0x130>
   10c00:	e3e05000 	mvn	r5, #0
   10c04:	eaffffd7 	b	10b68 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   10c08:	e30b11c8 	movw	r1, #45512	; 0xb1c8
   10c0c:	e3401001 	movt	r1, #1
   10c10:	e30b01d4 	movw	r0, #45524	; 0xb1d4
   10c14:	e3400001 	movt	r0, #1
   10c18:	e3a02c01 	mov	r2, #256	; 0x100
   10c1c:	ebfffb99 	bl	fa88 <assertion_failed>
   10c20:	eaffffa1 	b	10aac <CSerialDevice::Read(void*, unsigned int)+0x14>
   10c24:	e3e05001 	mvn	r5, #1
   10c28:	eaffffce 	b	10b68 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   10c2c:	e3e05002 	mvn	r5, #2
   10c30:	eaffffcc 	b	10b68 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   10c34:	e3a05000 	mov	r5, #0
   10c38:	eaffffc7 	b	10b5c <CSerialDevice::Read(void*, unsigned int)+0xc4>
   10c3c:	e1a05003 	mov	r5, r3
   10c40:	eaffffc8 	b	10b68 <CSerialDevice::Read(void*, unsigned int)+0xd0>

00010c44 <CSerialDevice::Write(void const*, unsigned int)>:
   10c44:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c48:	e2804a01 	add	r4, r0, #4096	; 0x1000
   10c4c:	e1a07000 	mov	r7, r0
   10c50:	e1a05001 	mov	r5, r1
   10c54:	e1a09002 	mov	r9, r2
   10c58:	e59400c8 	ldr	r0, [r4, #200]	; 0xc8
   10c5c:	e3500000 	cmp	r0, #0
   10c60:	1a00009f 	bne	10ee4 <CSerialDevice::Write(void const*, unsigned int)+0x2a0>
   10c64:	e3550000 	cmp	r5, #0
   10c68:	0a0000a0 	beq	10ef0 <CSerialDevice::Write(void const*, unsigned int)+0x2ac>
   10c6c:	e3590000 	cmp	r9, #0
   10c70:	0a0000b7 	beq	10f54 <CSerialDevice::Write(void const*, unsigned int)+0x310>
   10c74:	e3a0aa01 	mov	sl, #4096	; 0x1000
   10c78:	e343af20 	movt	sl, #16160	; 0x3f20
   10c7c:	e2455001 	sub	r5, r5, #1
   10c80:	e3a06000 	mov	r6, #0
   10c84:	e3a0800d 	mov	r8, #13
   10c88:	ea000002 	b	10c98 <CSerialDevice::Write(void const*, unsigned int)+0x54>
   10c8c:	e2866001 	add	r6, r6, #1
   10c90:	e1590006 	cmp	r9, r6
   10c94:	0a000031 	beq	10d60 <CSerialDevice::Write(void const*, unsigned int)+0x11c>
   10c98:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
   10c9c:	e5f5b001 	ldrb	fp, [r5, #1]!
   10ca0:	e3530000 	cmp	r3, #0
   10ca4:	0a00005a 	beq	10e14 <CSerialDevice::Write(void const*, unsigned int)+0x1d0>
   10ca8:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
   10cac:	e3500000 	cmp	r0, #0
   10cb0:	1a000061 	bne	10e3c <CSerialDevice::Write(void const*, unsigned int)+0x1f8>
   10cb4:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   10cb8:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
   10cbc:	e2833001 	add	r3, r3, #1
   10cc0:	e7ea3053 	ubfx	r3, r3, #0, #11
   10cc4:	e1530002 	cmp	r3, r2
   10cc8:	0a000024 	beq	10d60 <CSerialDevice::Write(void const*, unsigned int)+0x11c>
   10ccc:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   10cd0:	e0872003 	add	r2, r7, r3
   10cd4:	e2833001 	add	r3, r3, #1
   10cd8:	e58430b8 	str	r3, [r4, #184]	; 0xb8
   10cdc:	e5c2b8b8 	strb	fp, [r2, #2232]	; 0x8b8
   10ce0:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   10ce4:	e7ea3053 	ubfx	r3, r3, #0, #11
   10ce8:	e58430b8 	str	r3, [r4, #184]	; 0xb8
   10cec:	e5d53000 	ldrb	r3, [r5]
   10cf0:	e353000a 	cmp	r3, #10
   10cf4:	1affffe4 	bne	10c8c <CSerialDevice::Write(void const*, unsigned int)+0x48>
   10cf8:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   10cfc:	e3130001 	tst	r3, #1
   10d00:	0affffe1 	beq	10c8c <CSerialDevice::Write(void const*, unsigned int)+0x48>
   10d04:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
   10d08:	e3530000 	cmp	r3, #0
   10d0c:	0a000045 	beq	10e28 <CSerialDevice::Write(void const*, unsigned int)+0x1e4>
   10d10:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
   10d14:	e3500000 	cmp	r0, #0
   10d18:	1a00005b 	bne	10e8c <CSerialDevice::Write(void const*, unsigned int)+0x248>
   10d1c:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   10d20:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
   10d24:	e2833001 	add	r3, r3, #1
   10d28:	e7ea3053 	ubfx	r3, r3, #0, #11
   10d2c:	e1530002 	cmp	r3, r2
   10d30:	0a00000a 	beq	10d60 <CSerialDevice::Write(void const*, unsigned int)+0x11c>
   10d34:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   10d38:	e2866001 	add	r6, r6, #1
   10d3c:	e1590006 	cmp	r9, r6
   10d40:	e0872003 	add	r2, r7, r3
   10d44:	e2833001 	add	r3, r3, #1
   10d48:	e58430b8 	str	r3, [r4, #184]	; 0xb8
   10d4c:	e5c288b8 	strb	r8, [r2, #2232]	; 0x8b8
   10d50:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   10d54:	e7ea3053 	ubfx	r3, r3, #0, #11
   10d58:	e58430b8 	str	r3, [r4, #184]	; 0xb8
   10d5c:	1affffcd 	bne	10c98 <CSerialDevice::Write(void const*, unsigned int)+0x54>
   10d60:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   10d64:	e3530000 	cmp	r3, #0
   10d68:	1a000055 	bne	10ec4 <CSerialDevice::Write(void const*, unsigned int)+0x280>
   10d6c:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
   10d70:	e3530000 	cmp	r3, #0
   10d74:	0a000024 	beq	10e0c <CSerialDevice::Write(void const*, unsigned int)+0x1c8>
   10d78:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
   10d7c:	e3500000 	cmp	r0, #0
   10d80:	1a000051 	bne	10ecc <CSerialDevice::Write(void const*, unsigned int)+0x288>
   10d84:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   10d88:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
   10d8c:	e1520003 	cmp	r2, r3
   10d90:	0a00001d 	beq	10e0c <CSerialDevice::Write(void const*, unsigned int)+0x1c8>
   10d94:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   10d98:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
   10d9c:	e1520003 	cmp	r2, r3
   10da0:	0a000015 	beq	10dfc <CSerialDevice::Write(void const*, unsigned int)+0x1b8>
   10da4:	e3a02a01 	mov	r2, #4096	; 0x1000
   10da8:	e3432f20 	movt	r2, #16160	; 0x3f20
   10dac:	e5923018 	ldr	r3, [r2, #24]
   10db0:	e3130020 	tst	r3, #32
   10db4:	0a000003 	beq	10dc8 <CSerialDevice::Write(void const*, unsigned int)+0x184>
   10db8:	ea000053 	b	10f0c <CSerialDevice::Write(void const*, unsigned int)+0x2c8>
   10dbc:	e5923018 	ldr	r3, [r2, #24]
   10dc0:	e3130020 	tst	r3, #32
   10dc4:	1a000050 	bne	10f0c <CSerialDevice::Write(void const*, unsigned int)+0x2c8>
   10dc8:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   10dcc:	e0871003 	add	r1, r7, r3
   10dd0:	e2833001 	add	r3, r3, #1
   10dd4:	e58430bc 	str	r3, [r4, #188]	; 0xbc
   10dd8:	e5d138b8 	ldrb	r3, [r1, #2232]	; 0x8b8
   10ddc:	e5823000 	str	r3, [r2]
   10de0:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   10de4:	e7ea3053 	ubfx	r3, r3, #0, #11
   10de8:	e58430bc 	str	r3, [r4, #188]	; 0xbc
   10dec:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
   10df0:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   10df4:	e1510003 	cmp	r1, r3
   10df8:	1affffef 	bne	10dbc <CSerialDevice::Write(void const*, unsigned int)+0x178>
   10dfc:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
   10e00:	e3530000 	cmp	r3, #0
   10e04:	0a000000 	beq	10e0c <CSerialDevice::Write(void const*, unsigned int)+0x1c8>
   10e08:	ebffe9c1 	bl	b514 <LeaveCritical>
   10e0c:	e1a00006 	mov	r0, r6
   10e10:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e14:	e59a3018 	ldr	r3, [sl, #24]
   10e18:	e3130020 	tst	r3, #32
   10e1c:	1afffffc 	bne	10e14 <CSerialDevice::Write(void const*, unsigned int)+0x1d0>
   10e20:	e58ab000 	str	fp, [sl]
   10e24:	eaffffb0 	b	10cec <CSerialDevice::Write(void const*, unsigned int)+0xa8>
   10e28:	e59a3018 	ldr	r3, [sl, #24]
   10e2c:	e3130020 	tst	r3, #32
   10e30:	1afffffc 	bne	10e28 <CSerialDevice::Write(void const*, unsigned int)+0x1e4>
   10e34:	e58a8000 	str	r8, [sl]
   10e38:	eaffff93 	b	10c8c <CSerialDevice::Write(void const*, unsigned int)+0x48>
   10e3c:	ebffe987 	bl	b460 <EnterCritical>
   10e40:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   10e44:	e59410bc 	ldr	r1, [r4, #188]	; 0xbc
   10e48:	e2833001 	add	r3, r3, #1
   10e4c:	e59420c4 	ldr	r2, [r4, #196]	; 0xc4
   10e50:	e7ea3053 	ubfx	r3, r3, #0, #11
   10e54:	e1530001 	cmp	r3, r1
   10e58:	0a000013 	beq	10eac <CSerialDevice::Write(void const*, unsigned int)+0x268>
   10e5c:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   10e60:	e3520000 	cmp	r2, #0
   10e64:	e0872003 	add	r2, r7, r3
   10e68:	e2833001 	add	r3, r3, #1
   10e6c:	e58430b8 	str	r3, [r4, #184]	; 0xb8
   10e70:	e5c2b8b8 	strb	fp, [r2, #2232]	; 0x8b8
   10e74:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   10e78:	e7ea3053 	ubfx	r3, r3, #0, #11
   10e7c:	e58430b8 	str	r3, [r4, #184]	; 0xb8
   10e80:	0affff99 	beq	10cec <CSerialDevice::Write(void const*, unsigned int)+0xa8>
   10e84:	ebffe9a2 	bl	b514 <LeaveCritical>
   10e88:	eaffff97 	b	10cec <CSerialDevice::Write(void const*, unsigned int)+0xa8>
   10e8c:	ebffe973 	bl	b460 <EnterCritical>
   10e90:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   10e94:	e59410bc 	ldr	r1, [r4, #188]	; 0xbc
   10e98:	e2833001 	add	r3, r3, #1
   10e9c:	e59420c4 	ldr	r2, [r4, #196]	; 0xc4
   10ea0:	e7ea3053 	ubfx	r3, r3, #0, #11
   10ea4:	e1530001 	cmp	r3, r1
   10ea8:	1a00001d 	bne	10f24 <CSerialDevice::Write(void const*, unsigned int)+0x2e0>
   10eac:	e3520000 	cmp	r2, #0
   10eb0:	0affffaa 	beq	10d60 <CSerialDevice::Write(void const*, unsigned int)+0x11c>
   10eb4:	ebffe996 	bl	b514 <LeaveCritical>
   10eb8:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   10ebc:	e3530000 	cmp	r3, #0
   10ec0:	0affffa9 	beq	10d6c <CSerialDevice::Write(void const*, unsigned int)+0x128>
   10ec4:	ebffe992 	bl	b514 <LeaveCritical>
   10ec8:	eaffffa7 	b	10d6c <CSerialDevice::Write(void const*, unsigned int)+0x128>
   10ecc:	ebffe963 	bl	b460 <EnterCritical>
   10ed0:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
   10ed4:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   10ed8:	e1520003 	cmp	r2, r3
   10edc:	1affffac 	bne	10d94 <CSerialDevice::Write(void const*, unsigned int)+0x150>
   10ee0:	eaffffc5 	b	10dfc <CSerialDevice::Write(void const*, unsigned int)+0x1b8>
   10ee4:	ebffe95d 	bl	b460 <EnterCritical>
   10ee8:	e3550000 	cmp	r5, #0
   10eec:	1affff5e 	bne	10c6c <CSerialDevice::Write(void const*, unsigned int)+0x28>
   10ef0:	e30b11c8 	movw	r1, #45512	; 0xb1c8
   10ef4:	e3401001 	movt	r1, #1
   10ef8:	e30b01d4 	movw	r0, #45524	; 0xb1d4
   10efc:	e3400001 	movt	r0, #1
   10f00:	e3a020c2 	mov	r2, #194	; 0xc2
   10f04:	ebfffadf 	bl	fa88 <assertion_failed>
   10f08:	eaffff57 	b	10c6c <CSerialDevice::Write(void const*, unsigned int)+0x28>
   10f0c:	e3a03a01 	mov	r3, #4096	; 0x1000
   10f10:	e3433f20 	movt	r3, #16160	; 0x3f20
   10f14:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   10f18:	e3822020 	orr	r2, r2, #32
   10f1c:	e5832038 	str	r2, [r3, #56]	; 0x38
   10f20:	eaffffb5 	b	10dfc <CSerialDevice::Write(void const*, unsigned int)+0x1b8>
   10f24:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   10f28:	e3520000 	cmp	r2, #0
   10f2c:	e0872003 	add	r2, r7, r3
   10f30:	e2833001 	add	r3, r3, #1
   10f34:	e58430b8 	str	r3, [r4, #184]	; 0xb8
   10f38:	e5c288b8 	strb	r8, [r2, #2232]	; 0x8b8
   10f3c:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   10f40:	e7ea3053 	ubfx	r3, r3, #0, #11
   10f44:	e58430b8 	str	r3, [r4, #184]	; 0xb8
   10f48:	0affff4f 	beq	10c8c <CSerialDevice::Write(void const*, unsigned int)+0x48>
   10f4c:	ebffe970 	bl	b514 <LeaveCritical>
   10f50:	eaffff4d 	b	10c8c <CSerialDevice::Write(void const*, unsigned int)+0x48>
   10f54:	e1a06009 	mov	r6, r9
   10f58:	eaffff80 	b	10d60 <CSerialDevice::Write(void const*, unsigned int)+0x11c>

00010f5c <CSerialDevice::InterruptStub(void*)>:
   10f5c:	e92d4070 	push	{r4, r5, r6, lr}
   10f60:	e2504000 	subs	r4, r0, #0
   10f64:	0a00005c 	beq	110dc <CSerialDevice::InterruptStub(void*)+0x180>
   10f68:	e2845a01 	add	r5, r4, #4096	; 0x1000
   10f6c:	e59500c4 	ldr	r0, [r5, #196]	; 0xc4
   10f70:	e3500000 	cmp	r0, #0
   10f74:	1a000056 	bne	110d4 <CSerialDevice::InterruptStub(void*)+0x178>
   10f78:	e3a03a01 	mov	r3, #4096	; 0x1000
   10f7c:	e3433f20 	movt	r3, #16160	; 0x3f20
   10f80:	e1a01003 	mov	r1, r3
   10f84:	e3e0e002 	mvn	lr, #2
   10f88:	e3e00001 	mvn	r0, #1
   10f8c:	e3e0c000 	mvn	ip, #0
   10f90:	e5932040 	ldr	r2, [r3, #64]	; 0x40
   10f94:	e5832044 	str	r2, [r3, #68]	; 0x44
   10f98:	e5913018 	ldr	r3, [r1, #24]
   10f9c:	e3130010 	tst	r3, #16
   10fa0:	1a000016 	bne	11000 <CSerialDevice::InterruptStub(void*)+0xa4>
   10fa4:	e5912000 	ldr	r2, [r1]
   10fa8:	e3120b01 	tst	r2, #1024	; 0x400
   10fac:	0a000032 	beq	1107c <CSerialDevice::InterruptStub(void*)+0x120>
   10fb0:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   10fb4:	e3530000 	cmp	r3, #0
   10fb8:	0584c8b4 	streq	ip, [r4, #2228]	; 0x8b4
   10fbc:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
   10fc0:	e59468b0 	ldr	r6, [r4, #2224]	; 0x8b0
   10fc4:	e2833001 	add	r3, r3, #1
   10fc8:	e7ea3053 	ubfx	r3, r3, #0, #11
   10fcc:	e1530006 	cmp	r3, r6
   10fd0:	0a00002f 	beq	11094 <CSerialDevice::InterruptStub(void*)+0x138>
   10fd4:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
   10fd8:	e0846003 	add	r6, r4, r3
   10fdc:	e2833001 	add	r3, r3, #1
   10fe0:	e58438ac 	str	r3, [r4, #2220]	; 0x8ac
   10fe4:	e5c620aa 	strb	r2, [r6, #170]	; 0xaa
   10fe8:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
   10fec:	e7ea3053 	ubfx	r3, r3, #0, #11
   10ff0:	e58438ac 	str	r3, [r4, #2220]	; 0x8ac
   10ff4:	e5913018 	ldr	r3, [r1, #24]
   10ff8:	e3130010 	tst	r3, #16
   10ffc:	0affffe8 	beq	10fa4 <CSerialDevice::InterruptStub(void*)+0x48>
   11000:	e5913018 	ldr	r3, [r1, #24]
   11004:	e3130020 	tst	r3, #32
   11008:	1a000016 	bne	11068 <CSerialDevice::InterruptStub(void*)+0x10c>
   1100c:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   11010:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
   11014:	e1520003 	cmp	r2, r3
   11018:	0a000027 	beq	110bc <CSerialDevice::InterruptStub(void*)+0x160>
   1101c:	e3a02a01 	mov	r2, #4096	; 0x1000
   11020:	e3432f20 	movt	r2, #16160	; 0x3f20
   11024:	ea000003 	b	11038 <CSerialDevice::InterruptStub(void*)+0xdc>
   11028:	e59510b8 	ldr	r1, [r5, #184]	; 0xb8
   1102c:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   11030:	e1510003 	cmp	r1, r3
   11034:	0a000020 	beq	110bc <CSerialDevice::InterruptStub(void*)+0x160>
   11038:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1103c:	e0841003 	add	r1, r4, r3
   11040:	e2833001 	add	r3, r3, #1
   11044:	e58530bc 	str	r3, [r5, #188]	; 0xbc
   11048:	e5d138b8 	ldrb	r3, [r1, #2232]	; 0x8b8
   1104c:	e5823000 	str	r3, [r2]
   11050:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   11054:	e7ea3053 	ubfx	r3, r3, #0, #11
   11058:	e58530bc 	str	r3, [r5, #188]	; 0xbc
   1105c:	e5923018 	ldr	r3, [r2, #24]
   11060:	e3130020 	tst	r3, #32
   11064:	0affffef 	beq	11028 <CSerialDevice::InterruptStub(void*)+0xcc>
   11068:	e59530c4 	ldr	r3, [r5, #196]	; 0xc4
   1106c:	e3530000 	cmp	r3, #0
   11070:	08bd8070 	popeq	{r4, r5, r6, pc}
   11074:	e8bd4070 	pop	{r4, r5, r6, lr}
   11078:	eaffe925 	b	b514 <LeaveCritical>
   1107c:	e3120b02 	tst	r2, #2048	; 0x800
   11080:	0a000007 	beq	110a4 <CSerialDevice::InterruptStub(void*)+0x148>
   11084:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   11088:	e3530000 	cmp	r3, #0
   1108c:	058408b4 	streq	r0, [r4, #2228]	; 0x8b4
   11090:	eaffffc9 	b	10fbc <CSerialDevice::InterruptStub(void*)+0x60>
   11094:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   11098:	e3530000 	cmp	r3, #0
   1109c:	058408b4 	streq	r0, [r4, #2228]	; 0x8b4
   110a0:	eaffffbc 	b	10f98 <CSerialDevice::InterruptStub(void*)+0x3c>
   110a4:	e3120c01 	tst	r2, #256	; 0x100
   110a8:	0affffc3 	beq	10fbc <CSerialDevice::InterruptStub(void*)+0x60>
   110ac:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   110b0:	e3530000 	cmp	r3, #0
   110b4:	0584e8b4 	streq	lr, [r4, #2228]	; 0x8b4
   110b8:	eaffffbf 	b	10fbc <CSerialDevice::InterruptStub(void*)+0x60>
   110bc:	e3a03a01 	mov	r3, #4096	; 0x1000
   110c0:	e3433f20 	movt	r3, #16160	; 0x3f20
   110c4:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   110c8:	e3c22020 	bic	r2, r2, #32
   110cc:	e5832038 	str	r2, [r3, #56]	; 0x38
   110d0:	eaffffe4 	b	11068 <CSerialDevice::InterruptStub(void*)+0x10c>
   110d4:	ebffe8e1 	bl	b460 <EnterCritical>
   110d8:	eaffffa6 	b	10f78 <CSerialDevice::InterruptStub(void*)+0x1c>
   110dc:	e30b11c8 	movw	r1, #45512	; 0xb1c8
   110e0:	e3401001 	movt	r1, #1
   110e4:	e3090ad4 	movw	r0, #39636	; 0x9ad4
   110e8:	e3400001 	movt	r0, #1
   110ec:	e30021c1 	movw	r2, #449	; 0x1c1
   110f0:	ebfffa64 	bl	fa88 <assertion_failed>
   110f4:	eaffff9b 	b	10f68 <CSerialDevice::InterruptStub(void*)+0xc>

000110f8 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)>:
   110f8:	e92d4070 	push	{r4, r5, r6, lr}
   110fc:	e1a04000 	mov	r4, r0
   11100:	e1a05002 	mov	r5, r2
   11104:	e1a06001 	mov	r6, r1
   11108:	eb002150 	bl	19650 <CDevice::CDevice()>
   1110c:	e1a00004 	mov	r0, r4
   11110:	e59fc098 	ldr	ip, [pc, #152]	; 111b0 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)+0xb8>
   11114:	e3a03000 	mov	r3, #0
   11118:	e3a01020 	mov	r1, #32
   1111c:	e1a02003 	mov	r2, r3
   11120:	e480c004 	str	ip, [r0], #4
   11124:	ebffe2fc 	bl	9d1c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   11128:	e3a03000 	mov	r3, #0
   1112c:	e1a02003 	mov	r2, r3
   11130:	e284002c 	add	r0, r4, #44	; 0x2c
   11134:	e3a01021 	mov	r1, #33	; 0x21
   11138:	ebffe2f7 	bl	9d1c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1113c:	e2840054 	add	r0, r4, #84	; 0x54
   11140:	e3a03000 	mov	r3, #0
   11144:	e3a02004 	mov	r2, #4
   11148:	e3a0100e 	mov	r1, #14
   1114c:	ebffe2f2 	bl	9d1c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   11150:	e284007c 	add	r0, r4, #124	; 0x7c
   11154:	e3a03000 	mov	r3, #0
   11158:	e3a02004 	mov	r2, #4
   1115c:	e3a0100f 	mov	r1, #15
   11160:	ebffe2ed 	bl	9d1c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   11164:	e2842a01 	add	r2, r4, #4096	; 0x1000
   11168:	e3550000 	cmp	r5, #0
   1116c:	e3a03000 	mov	r3, #0
   11170:	e58460a4 	str	r6, [r4, #164]	; 0xa4
   11174:	e3a01001 	mov	r1, #1
   11178:	e58438ac 	str	r3, [r4, #2220]	; 0x8ac
   1117c:	13a0c002 	movne	ip, #2
   11180:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
   11184:	03a0c001 	moveq	ip, #1
   11188:	e5c450a8 	strb	r5, [r4, #168]	; 0xa8
   1118c:	e1a00004 	mov	r0, r4
   11190:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
   11194:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
   11198:	e58230b8 	str	r3, [r2, #184]	; 0xb8
   1119c:	e582c0c4 	str	ip, [r2, #196]	; 0xc4
   111a0:	e58210c0 	str	r1, [r2, #192]	; 0xc0
   111a4:	e58230bc 	str	r3, [r2, #188]	; 0xbc
   111a8:	e58210c8 	str	r1, [r2, #200]	; 0xc8
   111ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   111b0:	0001b1b4 	.word	0x0001b1b4

000111b4 <CSerialDevice::Initialize(unsigned int)>:
   111b4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   111b8:	e1a07001 	mov	r7, r1
   111bc:	e1a05000 	mov	r5, r0
   111c0:	eb0012e8 	bl	15d68 <CMachineInfo::Get()>
   111c4:	e3a01002 	mov	r1, #2
   111c8:	eb00128a 	bl	15bf8 <CMachineInfo::GetClockRate(unsigned int) const>
   111cc:	e2474f4b 	sub	r4, r7, #300	; 0x12c
   111d0:	e2508000 	subs	r8, r0, #0
   111d4:	e1a09207 	lsl	r9, r7, #4
   111d8:	0a000044 	beq	112f0 <CSerialDevice::Initialize(unsigned int)+0x13c>
   111dc:	e30037d4 	movw	r3, #2004	; 0x7d4
   111e0:	e340303d 	movt	r3, #61	; 0x3d
   111e4:	e1540003 	cmp	r4, r3
   111e8:	8a000039 	bhi	112d4 <CSerialDevice::Initialize(unsigned int)+0x120>
   111ec:	e734f918 	udiv	r4, r8, r9
   111f0:	e30f3ffe 	movw	r3, #65534	; 0xfffe
   111f4:	e2442001 	sub	r2, r4, #1
   111f8:	e1a06004 	mov	r6, r4
   111fc:	e1520003 	cmp	r2, r3
   11200:	8a000046 	bhi	11320 <CSerialDevice::Initialize(unsigned int)+0x16c>
   11204:	e0618499 	mls	r1, r9, r4, r8
   11208:	e1a01181 	lsl	r1, r1, #3
   1120c:	e731f711 	udiv	r1, r1, r7
   11210:	e2014001 	and	r4, r1, #1
   11214:	e08440a1 	add	r4, r4, r1, lsr #1
   11218:	e354003f 	cmp	r4, #63	; 0x3f
   1121c:	8a000046 	bhi	1133c <CSerialDevice::Initialize(unsigned int)+0x188>
   11220:	e59500a4 	ldr	r0, [r5, #164]	; 0xa4
   11224:	e3500000 	cmp	r0, #0
   11228:	0a000009 	beq	11254 <CSerialDevice::Initialize(unsigned int)+0xa0>
   1122c:	e5d530a8 	ldrb	r3, [r5, #168]	; 0xa8
   11230:	e3002f5c 	movw	r2, #3932	; 0xf5c
   11234:	e3402001 	movt	r2, #1
   11238:	e3530000 	cmp	r3, #0
   1123c:	e3a01039 	mov	r1, #57	; 0x39
   11240:	e1a03005 	mov	r3, r5
   11244:	0a000020 	beq	112cc <CSerialDevice::Initialize(unsigned int)+0x118>
   11248:	eb000b06 	bl	13e68 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   1124c:	e3a03001 	mov	r3, #1
   11250:	e5c530a9 	strb	r3, [r5, #169]	; 0xa9
   11254:	e3a03a01 	mov	r3, #4096	; 0x1000
   11258:	e3433f20 	movt	r3, #16160	; 0x3f20
   1125c:	e3a01000 	mov	r1, #0
   11260:	e30027ff 	movw	r2, #2047	; 0x7ff
   11264:	e5831038 	str	r1, [r3, #56]	; 0x38
   11268:	e5832044 	str	r2, [r3, #68]	; 0x44
   1126c:	e5836024 	str	r6, [r3, #36]	; 0x24
   11270:	e5834028 	str	r4, [r3, #40]	; 0x28
   11274:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   11278:	e1520001 	cmp	r2, r1
   1127c:	13a02009 	movne	r2, #9
   11280:	13a01070 	movne	r1, #112	; 0x70
   11284:	15832034 	strne	r2, [r3, #52]	; 0x34
   11288:	03a02060 	moveq	r2, #96	; 0x60
   1128c:	1583102c 	strne	r1, [r3, #44]	; 0x2c
   11290:	13a02e45 	movne	r2, #1104	; 0x450
   11294:	0583202c 	streq	r2, [r3, #44]	; 0x2c
   11298:	15832038 	strne	r2, [r3, #56]	; 0x38
   1129c:	e3a03a01 	mov	r3, #4096	; 0x1000
   112a0:	e3433f20 	movt	r3, #16160	; 0x3f20
   112a4:	e3002301 	movw	r2, #769	; 0x301
   112a8:	e5832030 	str	r2, [r3, #48]	; 0x30
   112ac:	ebfffb55 	bl	10008 <CDeviceNameService::Get()>
   112b0:	e1a02005 	mov	r2, r5
   112b4:	e3a03000 	mov	r3, #0
   112b8:	e30b1254 	movw	r1, #45652	; 0xb254
   112bc:	e3401001 	movt	r1, #1
   112c0:	ebfffadc 	bl	fe38 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   112c4:	e3a00001 	mov	r0, #1
   112c8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   112cc:	eb000a6f 	bl	13c90 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   112d0:	eaffffdd 	b	1124c <CSerialDevice::Initialize(unsigned int)+0x98>
   112d4:	e30b11c8 	movw	r1, #45512	; 0xb1c8
   112d8:	e3401001 	movt	r1, #1
   112dc:	e30b01f0 	movw	r0, #45552	; 0xb1f0
   112e0:	e3400001 	movt	r0, #1
   112e4:	e3a0208b 	mov	r2, #139	; 0x8b
   112e8:	ebfff9e6 	bl	fa88 <assertion_failed>
   112ec:	eaffffbe 	b	111ec <CSerialDevice::Initialize(unsigned int)+0x38>
   112f0:	e30b11c8 	movw	r1, #45512	; 0xb1c8
   112f4:	e3401001 	movt	r1, #1
   112f8:	e30b01e0 	movw	r0, #45536	; 0xb1e0
   112fc:	e3400001 	movt	r0, #1
   11300:	e3a02089 	mov	r2, #137	; 0x89
   11304:	ebfff9df 	bl	fa88 <assertion_failed>
   11308:	e30037d4 	movw	r3, #2004	; 0x7d4
   1130c:	e340303d 	movt	r3, #61	; 0x3d
   11310:	e1540003 	cmp	r4, r3
   11314:	91a06008 	movls	r6, r8
   11318:	91a04008 	movls	r4, r8
   1131c:	8affffec 	bhi	112d4 <CSerialDevice::Initialize(unsigned int)+0x120>
   11320:	e30b11c8 	movw	r1, #45512	; 0xb1c8
   11324:	e3401001 	movt	r1, #1
   11328:	e30b021c 	movw	r0, #45596	; 0xb21c
   1132c:	e3400001 	movt	r0, #1
   11330:	e3a0208e 	mov	r2, #142	; 0x8e
   11334:	ebfff9d3 	bl	fa88 <assertion_failed>
   11338:	eaffffb1 	b	11204 <CSerialDevice::Initialize(unsigned int)+0x50>
   1133c:	e30b11c8 	movw	r1, #45512	; 0xb1c8
   11340:	e3401001 	movt	r1, #1
   11344:	e30b0240 	movw	r0, #45632	; 0xb240
   11348:	e3400001 	movt	r0, #1
   1134c:	e3a02091 	mov	r2, #145	; 0x91
   11350:	ebfff9cc 	bl	fa88 <assertion_failed>
   11354:	eaffffb1 	b	11220 <CSerialDevice::Initialize(unsigned int)+0x6c>

00011358 <CSerialDevice::GetOptions() const>:
   11358:	e2800a01 	add	r0, r0, #4096	; 0x1000
   1135c:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
   11360:	e12fff1e 	bx	lr

00011364 <CSerialDevice::SetOptions(unsigned int)>:
   11364:	e2800a01 	add	r0, r0, #4096	; 0x1000
   11368:	e58010c0 	str	r1, [r0, #192]	; 0xc0
   1136c:	e12fff1e 	bx	lr

00011370 <CSerialDevice::Write(unsigned char)>:
   11370:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11374:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
   11378:	e3530000 	cmp	r3, #0
   1137c:	03a02a01 	moveq	r2, #4096	; 0x1000
   11380:	03432f20 	movteq	r2, #16160	; 0x3f20
   11384:	0a000019 	beq	113f0 <CSerialDevice::Write(unsigned char)+0x80>
   11388:	e2805a01 	add	r5, r0, #4096	; 0x1000
   1138c:	e1a06001 	mov	r6, r1
   11390:	e1a04000 	mov	r4, r0
   11394:	e59520c4 	ldr	r2, [r5, #196]	; 0xc4
   11398:	e3520000 	cmp	r2, #0
   1139c:	1a00001a 	bne	1140c <CSerialDevice::Write(unsigned char)+0x9c>
   113a0:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   113a4:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
   113a8:	e2833001 	add	r3, r3, #1
   113ac:	e7ea3053 	ubfx	r3, r3, #0, #11
   113b0:	e1530001 	cmp	r3, r1
   113b4:	0a00001f 	beq	11438 <CSerialDevice::Write(unsigned char)+0xc8>
   113b8:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   113bc:	e3a07001 	mov	r7, #1
   113c0:	e0840003 	add	r0, r4, r3
   113c4:	e0833007 	add	r3, r3, r7
   113c8:	e58530b8 	str	r3, [r5, #184]	; 0xb8
   113cc:	e5c068b8 	strb	r6, [r0, #2232]	; 0x8b8
   113d0:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   113d4:	e7ea3053 	ubfx	r3, r3, #0, #11
   113d8:	e58530b8 	str	r3, [r5, #184]	; 0xb8
   113dc:	e3520000 	cmp	r2, #0
   113e0:	0a000000 	beq	113e8 <CSerialDevice::Write(unsigned char)+0x78>
   113e4:	ebffe84a 	bl	b514 <LeaveCritical>
   113e8:	e1a00007 	mov	r0, r7
   113ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   113f0:	e5923018 	ldr	r3, [r2, #24]
   113f4:	e3130020 	tst	r3, #32
   113f8:	1afffffc 	bne	113f0 <CSerialDevice::Write(unsigned char)+0x80>
   113fc:	e3a07001 	mov	r7, #1
   11400:	e5821000 	str	r1, [r2]
   11404:	e1a00007 	mov	r0, r7
   11408:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1140c:	e1a00002 	mov	r0, r2
   11410:	ebffe812 	bl	b460 <EnterCritical>
   11414:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   11418:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
   1141c:	e2833001 	add	r3, r3, #1
   11420:	e7ea3053 	ubfx	r3, r3, #0, #11
   11424:	e1530002 	cmp	r3, r2
   11428:	e59520c4 	ldr	r2, [r5, #196]	; 0xc4
   1142c:	03a07000 	moveq	r7, #0
   11430:	1affffe0 	bne	113b8 <CSerialDevice::Write(unsigned char)+0x48>
   11434:	eaffffe8 	b	113dc <CSerialDevice::Write(unsigned char)+0x6c>
   11438:	e1a07002 	mov	r7, r2
   1143c:	e1a00007 	mov	r0, r7
   11440:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00011444 <CSerialDevice::InterruptHandler()>:
   11444:	e92d4070 	push	{r4, r5, r6, lr}
   11448:	e2805a01 	add	r5, r0, #4096	; 0x1000
   1144c:	e1a04000 	mov	r4, r0
   11450:	e59500c4 	ldr	r0, [r5, #196]	; 0xc4
   11454:	e3500000 	cmp	r0, #0
   11458:	1a000056 	bne	115b8 <CSerialDevice::InterruptHandler()+0x174>
   1145c:	e3a03a01 	mov	r3, #4096	; 0x1000
   11460:	e3433f20 	movt	r3, #16160	; 0x3f20
   11464:	e1a01003 	mov	r1, r3
   11468:	e3e0e002 	mvn	lr, #2
   1146c:	e3e00001 	mvn	r0, #1
   11470:	e3e0c000 	mvn	ip, #0
   11474:	e5932040 	ldr	r2, [r3, #64]	; 0x40
   11478:	e5832044 	str	r2, [r3, #68]	; 0x44
   1147c:	e5913018 	ldr	r3, [r1, #24]
   11480:	e3130010 	tst	r3, #16
   11484:	1a000016 	bne	114e4 <CSerialDevice::InterruptHandler()+0xa0>
   11488:	e5912000 	ldr	r2, [r1]
   1148c:	e3120b01 	tst	r2, #1024	; 0x400
   11490:	0a000032 	beq	11560 <CSerialDevice::InterruptHandler()+0x11c>
   11494:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   11498:	e3530000 	cmp	r3, #0
   1149c:	0584c8b4 	streq	ip, [r4, #2228]	; 0x8b4
   114a0:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
   114a4:	e59468b0 	ldr	r6, [r4, #2224]	; 0x8b0
   114a8:	e2833001 	add	r3, r3, #1
   114ac:	e7ea3053 	ubfx	r3, r3, #0, #11
   114b0:	e1530006 	cmp	r3, r6
   114b4:	0a00002f 	beq	11578 <CSerialDevice::InterruptHandler()+0x134>
   114b8:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
   114bc:	e0846003 	add	r6, r4, r3
   114c0:	e2833001 	add	r3, r3, #1
   114c4:	e58438ac 	str	r3, [r4, #2220]	; 0x8ac
   114c8:	e5c620aa 	strb	r2, [r6, #170]	; 0xaa
   114cc:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
   114d0:	e7ea3053 	ubfx	r3, r3, #0, #11
   114d4:	e58438ac 	str	r3, [r4, #2220]	; 0x8ac
   114d8:	e5913018 	ldr	r3, [r1, #24]
   114dc:	e3130010 	tst	r3, #16
   114e0:	0affffe8 	beq	11488 <CSerialDevice::InterruptHandler()+0x44>
   114e4:	e5913018 	ldr	r3, [r1, #24]
   114e8:	e3130020 	tst	r3, #32
   114ec:	1a000016 	bne	1154c <CSerialDevice::InterruptHandler()+0x108>
   114f0:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   114f4:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
   114f8:	e1520003 	cmp	r2, r3
   114fc:	0a000027 	beq	115a0 <CSerialDevice::InterruptHandler()+0x15c>
   11500:	e3a02a01 	mov	r2, #4096	; 0x1000
   11504:	e3432f20 	movt	r2, #16160	; 0x3f20
   11508:	ea000003 	b	1151c <CSerialDevice::InterruptHandler()+0xd8>
   1150c:	e59510b8 	ldr	r1, [r5, #184]	; 0xb8
   11510:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   11514:	e1510003 	cmp	r1, r3
   11518:	0a000020 	beq	115a0 <CSerialDevice::InterruptHandler()+0x15c>
   1151c:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   11520:	e0841003 	add	r1, r4, r3
   11524:	e2833001 	add	r3, r3, #1
   11528:	e58530bc 	str	r3, [r5, #188]	; 0xbc
   1152c:	e5d138b8 	ldrb	r3, [r1, #2232]	; 0x8b8
   11530:	e5823000 	str	r3, [r2]
   11534:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   11538:	e7ea3053 	ubfx	r3, r3, #0, #11
   1153c:	e58530bc 	str	r3, [r5, #188]	; 0xbc
   11540:	e5923018 	ldr	r3, [r2, #24]
   11544:	e3130020 	tst	r3, #32
   11548:	0affffef 	beq	1150c <CSerialDevice::InterruptHandler()+0xc8>
   1154c:	e59530c4 	ldr	r3, [r5, #196]	; 0xc4
   11550:	e3530000 	cmp	r3, #0
   11554:	08bd8070 	popeq	{r4, r5, r6, pc}
   11558:	e8bd4070 	pop	{r4, r5, r6, lr}
   1155c:	eaffe7ec 	b	b514 <LeaveCritical>
   11560:	e3120b02 	tst	r2, #2048	; 0x800
   11564:	0a000007 	beq	11588 <CSerialDevice::InterruptHandler()+0x144>
   11568:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   1156c:	e3530000 	cmp	r3, #0
   11570:	058408b4 	streq	r0, [r4, #2228]	; 0x8b4
   11574:	eaffffc9 	b	114a0 <CSerialDevice::InterruptHandler()+0x5c>
   11578:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   1157c:	e3530000 	cmp	r3, #0
   11580:	058408b4 	streq	r0, [r4, #2228]	; 0x8b4
   11584:	eaffffbc 	b	1147c <CSerialDevice::InterruptHandler()+0x38>
   11588:	e3120c01 	tst	r2, #256	; 0x100
   1158c:	0affffc3 	beq	114a0 <CSerialDevice::InterruptHandler()+0x5c>
   11590:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   11594:	e3530000 	cmp	r3, #0
   11598:	0584e8b4 	streq	lr, [r4, #2228]	; 0x8b4
   1159c:	eaffffbf 	b	114a0 <CSerialDevice::InterruptHandler()+0x5c>
   115a0:	e3a03a01 	mov	r3, #4096	; 0x1000
   115a4:	e3433f20 	movt	r3, #16160	; 0x3f20
   115a8:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   115ac:	e3c22020 	bic	r2, r2, #32
   115b0:	e5832038 	str	r2, [r3, #56]	; 0x38
   115b4:	eaffffe4 	b	1154c <CSerialDevice::InterruptHandler()+0x108>
   115b8:	ebffe7a8 	bl	b460 <EnterCritical>
   115bc:	eaffffa6 	b	1145c <CSerialDevice::InterruptHandler()+0x18>

000115c0 <CSerialDevice::~CSerialDevice()>:
   115c0:	e3a03a01 	mov	r3, #4096	; 0x1000
   115c4:	e3433f20 	movt	r3, #16160	; 0x3f20
   115c8:	e59f10a0 	ldr	r1, [pc, #160]	; 11670 <CSerialDevice::~CSerialDevice()+0xb0>
   115cc:	e3a02000 	mov	r2, #0
   115d0:	e92d4010 	push	{r4, lr}
   115d4:	e1a04000 	mov	r4, r0
   115d8:	e5801000 	str	r1, [r0]
   115dc:	e5832038 	str	r2, [r3, #56]	; 0x38
   115e0:	e5832030 	str	r2, [r3, #48]	; 0x30
   115e4:	e5d030a9 	ldrb	r3, [r0, #169]	; 0xa9
   115e8:	e1530002 	cmp	r3, r2
   115ec:	0a000006 	beq	1160c <CSerialDevice::~CSerialDevice()+0x4c>
   115f0:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
   115f4:	e1500002 	cmp	r0, r2
   115f8:	0a000014 	beq	11650 <CSerialDevice::~CSerialDevice()+0x90>
   115fc:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
   11600:	e3530000 	cmp	r3, #0
   11604:	0a00000e 	beq	11644 <CSerialDevice::~CSerialDevice()+0x84>
   11608:	eb000a47 	bl	13f2c <CInterruptSystem::DisconnectFIQ()>
   1160c:	e3a03000 	mov	r3, #0
   11610:	e284007c 	add	r0, r4, #124	; 0x7c
   11614:	e58430a4 	str	r3, [r4, #164]	; 0xa4
   11618:	ebffe1b8 	bl	9d00 <CGPIOPin::~CGPIOPin()>
   1161c:	e2840054 	add	r0, r4, #84	; 0x54
   11620:	ebffe1b6 	bl	9d00 <CGPIOPin::~CGPIOPin()>
   11624:	e284002c 	add	r0, r4, #44	; 0x2c
   11628:	ebffe1b4 	bl	9d00 <CGPIOPin::~CGPIOPin()>
   1162c:	e2840004 	add	r0, r4, #4
   11630:	ebffe1b2 	bl	9d00 <CGPIOPin::~CGPIOPin()>
   11634:	e1a00004 	mov	r0, r4
   11638:	eb001ff8 	bl	19620 <CDevice::~CDevice()>
   1163c:	e1a00004 	mov	r0, r4
   11640:	e8bd8010 	pop	{r4, pc}
   11644:	e3a01039 	mov	r1, #57	; 0x39
   11648:	eb0009cd 	bl	13d84 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   1164c:	eaffffee 	b	1160c <CSerialDevice::~CSerialDevice()+0x4c>
   11650:	e30b11c8 	movw	r1, #45512	; 0xb1c8
   11654:	e3401001 	movt	r1, #1
   11658:	e30a0004 	movw	r0, #40964	; 0xa004
   1165c:	e3400001 	movt	r0, #1
   11660:	e3a02078 	mov	r2, #120	; 0x78
   11664:	ebfff907 	bl	fa88 <assertion_failed>
   11668:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
   1166c:	eaffffe2 	b	115fc <CSerialDevice::~CSerialDevice()+0x3c>
   11670:	0001b1b4 	.word	0x0001b1b4

00011674 <CSerialDevice::~CSerialDevice()>:
   11674:	e3a03a01 	mov	r3, #4096	; 0x1000
   11678:	e3433f20 	movt	r3, #16160	; 0x3f20
   1167c:	e59f10ac 	ldr	r1, [pc, #172]	; 11730 <CSerialDevice::~CSerialDevice()+0xbc>
   11680:	e3a02000 	mov	r2, #0
   11684:	e92d4010 	push	{r4, lr}
   11688:	e1a04000 	mov	r4, r0
   1168c:	e5801000 	str	r1, [r0]
   11690:	e5832038 	str	r2, [r3, #56]	; 0x38
   11694:	e5832030 	str	r2, [r3, #48]	; 0x30
   11698:	e5d030a9 	ldrb	r3, [r0, #169]	; 0xa9
   1169c:	e1530002 	cmp	r3, r2
   116a0:	0a000006 	beq	116c0 <CSerialDevice::~CSerialDevice()+0x4c>
   116a4:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
   116a8:	e1500002 	cmp	r0, r2
   116ac:	0a000017 	beq	11710 <CSerialDevice::~CSerialDevice()+0x9c>
   116b0:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
   116b4:	e3530000 	cmp	r3, #0
   116b8:	0a000011 	beq	11704 <CSerialDevice::~CSerialDevice()+0x90>
   116bc:	eb000a1a 	bl	13f2c <CInterruptSystem::DisconnectFIQ()>
   116c0:	e3a03000 	mov	r3, #0
   116c4:	e284007c 	add	r0, r4, #124	; 0x7c
   116c8:	e58430a4 	str	r3, [r4, #164]	; 0xa4
   116cc:	ebffe18b 	bl	9d00 <CGPIOPin::~CGPIOPin()>
   116d0:	e2840054 	add	r0, r4, #84	; 0x54
   116d4:	ebffe189 	bl	9d00 <CGPIOPin::~CGPIOPin()>
   116d8:	e284002c 	add	r0, r4, #44	; 0x2c
   116dc:	ebffe187 	bl	9d00 <CGPIOPin::~CGPIOPin()>
   116e0:	e2840004 	add	r0, r4, #4
   116e4:	ebffe185 	bl	9d00 <CGPIOPin::~CGPIOPin()>
   116e8:	e1a00004 	mov	r0, r4
   116ec:	eb001fcb 	bl	19620 <CDevice::~CDevice()>
   116f0:	e1a00004 	mov	r0, r4
   116f4:	e30110cc 	movw	r1, #4300	; 0x10cc
   116f8:	eb001c1c 	bl	18770 <operator delete(void*, unsigned int)>
   116fc:	e1a00004 	mov	r0, r4
   11700:	e8bd8010 	pop	{r4, pc}
   11704:	e3a01039 	mov	r1, #57	; 0x39
   11708:	eb00099d 	bl	13d84 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   1170c:	eaffffeb 	b	116c0 <CSerialDevice::~CSerialDevice()+0x4c>
   11710:	e30b11c8 	movw	r1, #45512	; 0xb1c8
   11714:	e3401001 	movt	r1, #1
   11718:	e30a0004 	movw	r0, #40964	; 0xa004
   1171c:	e3400001 	movt	r0, #1
   11720:	e3a02078 	mov	r2, #120	; 0x78
   11724:	ebfff8d7 	bl	fa88 <assertion_failed>
   11728:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
   1172c:	eaffffdf 	b	116b0 <CSerialDevice::~CSerialDevice()+0x3c>
   11730:	0001b1b4 	.word	0x0001b1b4
   11734:	00000000 	.word	0x00000000

00011738 <CString::~CString()>:
   11738:	e92d4010 	push	{r4, lr}
   1173c:	e1a04000 	mov	r4, r0
   11740:	e5900004 	ldr	r0, [r0, #4]
   11744:	e59f3014 	ldr	r3, [pc, #20]	; 11760 <CString::~CString()+0x28>
   11748:	e5843000 	str	r3, [r4]
   1174c:	e3500000 	cmp	r0, #0
   11750:	0a000000 	beq	11758 <CString::~CString()+0x20>
   11754:	eb001c04 	bl	1876c <operator delete[](void*)>
   11758:	e1a00004 	mov	r0, r4
   1175c:	e8bd8010 	pop	{r4, pc}
   11760:	0001b264 	.word	0x0001b264

00011764 <CString::~CString()>:
   11764:	e92d4010 	push	{r4, lr}
   11768:	e1a04000 	mov	r4, r0
   1176c:	e5900004 	ldr	r0, [r0, #4]
   11770:	e59f3020 	ldr	r3, [pc, #32]	; 11798 <CString::~CString()+0x34>
   11774:	e5843000 	str	r3, [r4]
   11778:	e3500000 	cmp	r0, #0
   1177c:	0a000000 	beq	11784 <CString::~CString()+0x20>
   11780:	eb001bf9 	bl	1876c <operator delete[](void*)>
   11784:	e1a00004 	mov	r0, r4
   11788:	e3a01010 	mov	r1, #16
   1178c:	eb001bf7 	bl	18770 <operator delete(void*, unsigned int)>
   11790:	e1a00004 	mov	r0, r4
   11794:	e8bd8010 	pop	{r4, pc}
   11798:	0001b264 	.word	0x0001b264

0001179c <CString::CString()>:
   1179c:	e59f100c 	ldr	r1, [pc, #12]	; 117b0 <CString::CString()+0x14>
   117a0:	e3a02000 	mov	r2, #0
   117a4:	e8800006 	stm	r0, {r1, r2}
   117a8:	e5802008 	str	r2, [r0, #8]
   117ac:	e12fff1e 	bx	lr
   117b0:	0001b264 	.word	0x0001b264

000117b4 <CString::CString(char const*)>:
   117b4:	e92d4070 	push	{r4, r5, r6, lr}
   117b8:	e1a04000 	mov	r4, r0
   117bc:	e59f3030 	ldr	r3, [pc, #48]	; 117f4 <CString::CString(char const*)+0x40>
   117c0:	e1a00001 	mov	r0, r1
   117c4:	e1a05001 	mov	r5, r1
   117c8:	e5843000 	str	r3, [r4]
   117cc:	ebffec44 	bl	c8e4 <strlen>
   117d0:	e2803001 	add	r3, r0, #1
   117d4:	e1a00003 	mov	r0, r3
   117d8:	e5843008 	str	r3, [r4, #8]
   117dc:	eb001be0 	bl	18764 <operator new[](unsigned int)>
   117e0:	e1a01005 	mov	r1, r5
   117e4:	e5840004 	str	r0, [r4, #4]
   117e8:	ebffeca7 	bl	ca8c <strcpy>
   117ec:	e1a00004 	mov	r0, r4
   117f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   117f4:	0001b264 	.word	0x0001b264

000117f8 <CString::operator char const*() const>:
   117f8:	e5900004 	ldr	r0, [r0, #4]
   117fc:	e3093f78 	movw	r3, #40824	; 0x9f78
   11800:	e3403001 	movt	r3, #1
   11804:	e3500000 	cmp	r0, #0
   11808:	01a00003 	moveq	r0, r3
   1180c:	e12fff1e 	bx	lr

00011810 <CString::operator=(char const*)>:
   11810:	e92d4070 	push	{r4, r5, r6, lr}
   11814:	e1a04000 	mov	r4, r0
   11818:	e5900004 	ldr	r0, [r0, #4]
   1181c:	e1a05001 	mov	r5, r1
   11820:	e3500000 	cmp	r0, #0
   11824:	0a000000 	beq	1182c <CString::operator=(char const*)+0x1c>
   11828:	eb001bcf 	bl	1876c <operator delete[](void*)>
   1182c:	e1a00005 	mov	r0, r5
   11830:	ebffec2b 	bl	c8e4 <strlen>
   11834:	e2803001 	add	r3, r0, #1
   11838:	e1a00003 	mov	r0, r3
   1183c:	e5843008 	str	r3, [r4, #8]
   11840:	eb001bc7 	bl	18764 <operator new[](unsigned int)>
   11844:	e1a01005 	mov	r1, r5
   11848:	e5840004 	str	r0, [r4, #4]
   1184c:	ebffec8e 	bl	ca8c <strcpy>
   11850:	e5940004 	ldr	r0, [r4, #4]
   11854:	e8bd8070 	pop	{r4, r5, r6, pc}

00011858 <CString::operator=(CString const&)>:
   11858:	e92d4070 	push	{r4, r5, r6, lr}
   1185c:	e1a04000 	mov	r4, r0
   11860:	e5900004 	ldr	r0, [r0, #4]
   11864:	e1a06001 	mov	r6, r1
   11868:	e3500000 	cmp	r0, #0
   1186c:	0a000000 	beq	11874 <CString::operator=(CString const&)+0x1c>
   11870:	eb001bbd 	bl	1876c <operator delete[](void*)>
   11874:	e5960004 	ldr	r0, [r6, #4]
   11878:	e3095f78 	movw	r5, #40824	; 0x9f78
   1187c:	e3405001 	movt	r5, #1
   11880:	e3500000 	cmp	r0, #0
   11884:	01a00005 	moveq	r0, r5
   11888:	ebffec15 	bl	c8e4 <strlen>
   1188c:	e2803001 	add	r3, r0, #1
   11890:	e1a00003 	mov	r0, r3
   11894:	e5843008 	str	r3, [r4, #8]
   11898:	eb001bb1 	bl	18764 <operator new[](unsigned int)>
   1189c:	e5840004 	str	r0, [r4, #4]
   118a0:	e5961004 	ldr	r1, [r6, #4]
   118a4:	e3510000 	cmp	r1, #0
   118a8:	01a01005 	moveq	r1, r5
   118ac:	ebffec76 	bl	ca8c <strcpy>
   118b0:	e1a00004 	mov	r0, r4
   118b4:	e8bd8070 	pop	{r4, r5, r6, pc}

000118b8 <CString::GetLength() const>:
   118b8:	e5900004 	ldr	r0, [r0, #4]
   118bc:	e3500000 	cmp	r0, #0
   118c0:	012fff1e 	bxeq	lr
   118c4:	eaffec06 	b	c8e4 <strlen>

000118c8 <CString::Append(char const*)>:
   118c8:	e92d4070 	push	{r4, r5, r6, lr}
   118cc:	e1a04000 	mov	r4, r0
   118d0:	e5900004 	ldr	r0, [r0, #4]
   118d4:	e3a03001 	mov	r3, #1
   118d8:	e1a06001 	mov	r6, r1
   118dc:	e5843008 	str	r3, [r4, #8]
   118e0:	e3500000 	cmp	r0, #0
   118e4:	0a000003 	beq	118f8 <CString::Append(char const*)+0x30>
   118e8:	ebffebfd 	bl	c8e4 <strlen>
   118ec:	e5943008 	ldr	r3, [r4, #8]
   118f0:	e0830000 	add	r0, r3, r0
   118f4:	e5840008 	str	r0, [r4, #8]
   118f8:	e1a00006 	mov	r0, r6
   118fc:	ebffebf8 	bl	c8e4 <strlen>
   11900:	e5943008 	ldr	r3, [r4, #8]
   11904:	e0800003 	add	r0, r0, r3
   11908:	e5840008 	str	r0, [r4, #8]
   1190c:	eb001b94 	bl	18764 <operator new[](unsigned int)>
   11910:	e5941004 	ldr	r1, [r4, #4]
   11914:	e1a05000 	mov	r5, r0
   11918:	e3510000 	cmp	r1, #0
   1191c:	05c01000 	strbeq	r1, [r0]
   11920:	0a000004 	beq	11938 <CString::Append(char const*)+0x70>
   11924:	ebffec58 	bl	ca8c <strcpy>
   11928:	e5940004 	ldr	r0, [r4, #4]
   1192c:	e3500000 	cmp	r0, #0
   11930:	0a000000 	beq	11938 <CString::Append(char const*)+0x70>
   11934:	eb001b8c 	bl	1876c <operator delete[](void*)>
   11938:	e1a01006 	mov	r1, r6
   1193c:	e1a00005 	mov	r0, r5
   11940:	ebffec6e 	bl	cb00 <strcat>
   11944:	e5845004 	str	r5, [r4, #4]
   11948:	e8bd8070 	pop	{r4, r5, r6, pc}

0001194c <CString::Compare(char const*) const>:
   1194c:	e5900004 	ldr	r0, [r0, #4]
   11950:	eaffebed 	b	c90c <strcmp>

00011954 <CString::Find(char) const>:
   11954:	e5902004 	ldr	r2, [r0, #4]
   11958:	e1d230d0 	ldrsb	r3, [r2]
   1195c:	e3530000 	cmp	r3, #0
   11960:	0a000009 	beq	1198c <CString::Find(char) const+0x38>
   11964:	e1510003 	cmp	r1, r3
   11968:	e3a00000 	mov	r0, #0
   1196c:	1a000002 	bne	1197c <CString::Find(char) const+0x28>
   11970:	e12fff1e 	bx	lr
   11974:	e1530001 	cmp	r3, r1
   11978:	012fff1e 	bxeq	lr
   1197c:	e1f230d1 	ldrsb	r3, [r2, #1]!
   11980:	e2800001 	add	r0, r0, #1
   11984:	e3530000 	cmp	r3, #0
   11988:	1afffff9 	bne	11974 <CString::Find(char) const+0x20>
   1198c:	e3e00000 	mvn	r0, #0
   11990:	e12fff1e 	bx	lr

00011994 <CString::Replace(char const*, char const*)>:
   11994:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11998:	e1d1a0d0 	ldrsb	sl, [r1]
   1199c:	e24dd014 	sub	sp, sp, #20
   119a0:	e35a0000 	cmp	sl, #0
   119a4:	01a0000a 	moveq	r0, sl
   119a8:	058da004 	streq	sl, [sp, #4]
   119ac:	1a000001 	bne	119b8 <CString::Replace(char const*, char const*)+0x24>
   119b0:	e28dd014 	add	sp, sp, #20
   119b4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119b8:	e5905004 	ldr	r5, [r0, #4]
   119bc:	e1a04000 	mov	r4, r0
   119c0:	e58d2008 	str	r2, [sp, #8]
   119c4:	e1a09001 	mov	r9, r1
   119c8:	e1a00005 	mov	r0, r5
   119cc:	ebffebc4 	bl	c8e4 <strlen>
   119d0:	e2800001 	add	r0, r0, #1
   119d4:	eb001b62 	bl	18764 <operator new[](unsigned int)>
   119d8:	e1a01005 	mov	r1, r5
   119dc:	e58d000c 	str	r0, [sp, #12]
   119e0:	ebffec29 	bl	ca8c <strcpy>
   119e4:	e5940004 	ldr	r0, [r4, #4]
   119e8:	e3500000 	cmp	r0, #0
   119ec:	0a000000 	beq	119f4 <CString::Replace(char const*, char const*)+0x60>
   119f0:	eb001b5d 	bl	1876c <operator delete[](void*)>
   119f4:	e3a00040 	mov	r0, #64	; 0x40
   119f8:	e5840008 	str	r0, [r4, #8]
   119fc:	e3a03000 	mov	r3, #0
   11a00:	e59d500c 	ldr	r5, [sp, #12]
   11a04:	e58d3004 	str	r3, [sp, #4]
   11a08:	eb001b55 	bl	18764 <operator new[](unsigned int)>
   11a0c:	e5840004 	str	r0, [r4, #4]
   11a10:	e584000c 	str	r0, [r4, #12]
   11a14:	e1d910d0 	ldrsb	r1, [r9]
   11a18:	e1a00005 	mov	r0, r5
   11a1c:	ebffec48 	bl	cb44 <strchr>
   11a20:	e2506000 	subs	r6, r0, #0
   11a24:	0a000067 	beq	11bc8 <CString::Replace(char const*, char const*)+0x234>
   11a28:	e1550006 	cmp	r5, r6
   11a2c:	3a000005 	bcc	11a48 <CString::Replace(char const*, char const*)+0xb4>
   11a30:	ea000075 	b	11c0c <CString::Replace(char const*, char const*)+0x278>
   11a34:	e2832001 	add	r2, r3, #1
   11a38:	e1560005 	cmp	r6, r5
   11a3c:	e584200c 	str	r2, [r4, #12]
   11a40:	e5c38000 	strb	r8, [r3]
   11a44:	0a000018 	beq	11aac <CString::Replace(char const*, char const*)+0x118>
   11a48:	e594300c 	ldr	r3, [r4, #12]
   11a4c:	e5947004 	ldr	r7, [r4, #4]
   11a50:	e5942008 	ldr	r2, [r4, #8]
   11a54:	e0437007 	sub	r7, r3, r7
   11a58:	e0d580d1 	ldrsb	r8, [r5], #1
   11a5c:	e2871002 	add	r1, r7, #2
   11a60:	e1510002 	cmp	r1, r2
   11a64:	9afffff2 	bls	11a34 <CString::Replace(char const*, char const*)+0xa0>
   11a68:	e287a042 	add	sl, r7, #66	; 0x42
   11a6c:	e1a0000a 	mov	r0, sl
   11a70:	eb001b3b 	bl	18764 <operator new[](unsigned int)>
   11a74:	e594300c 	ldr	r3, [r4, #12]
   11a78:	e3a02000 	mov	r2, #0
   11a7c:	e1a0b000 	mov	fp, r0
   11a80:	e5c32000 	strb	r2, [r3]
   11a84:	e5941004 	ldr	r1, [r4, #4]
   11a88:	ebffebff 	bl	ca8c <strcpy>
   11a8c:	e5943004 	ldr	r3, [r4, #4]
   11a90:	e2530000 	subs	r0, r3, #0
   11a94:	0a000000 	beq	11a9c <CString::Replace(char const*, char const*)+0x108>
   11a98:	eb001b33 	bl	1876c <operator delete[](void*)>
   11a9c:	e08b3007 	add	r3, fp, r7
   11aa0:	e584b004 	str	fp, [r4, #4]
   11aa4:	e584a008 	str	sl, [r4, #8]
   11aa8:	eaffffe1 	b	11a34 <CString::Replace(char const*, char const*)+0xa0>
   11aac:	e2865001 	add	r5, r6, #1
   11ab0:	e1a07006 	mov	r7, r6
   11ab4:	e1d930d1 	ldrsb	r3, [r9, #1]
   11ab8:	e2891001 	add	r1, r9, #1
   11abc:	e3530000 	cmp	r3, #0
   11ac0:	0a00000c 	beq	11af8 <CString::Replace(char const*, char const*)+0x164>
   11ac4:	e1d620d1 	ldrsb	r2, [r6, #1]
   11ac8:	e1520003 	cmp	r2, r3
   11acc:	1a000017 	bne	11b30 <CString::Replace(char const*, char const*)+0x19c>
   11ad0:	e2863002 	add	r3, r6, #2
   11ad4:	ea000002 	b	11ae4 <CString::Replace(char const*, char const*)+0x150>
   11ad8:	e1d500d0 	ldrsb	r0, [r5]
   11adc:	e1500002 	cmp	r0, r2
   11ae0:	1a000012 	bne	11b30 <CString::Replace(char const*, char const*)+0x19c>
   11ae4:	e1f120d1 	ldrsb	r2, [r1, #1]!
   11ae8:	e1a05003 	mov	r5, r3
   11aec:	e2833001 	add	r3, r3, #1
   11af0:	e3520000 	cmp	r2, #0
   11af4:	1afffff7 	bne	11ad8 <CString::Replace(char const*, char const*)+0x144>
   11af8:	e59d0008 	ldr	r0, [sp, #8]
   11afc:	ebffeb78 	bl	c8e4 <strlen>
   11b00:	e2506000 	subs	r6, r0, #0
   11b04:	e594000c 	ldr	r0, [r4, #12]
   11b08:	1a000015 	bne	11b64 <CString::Replace(char const*, char const*)+0x1d0>
   11b0c:	e59d1008 	ldr	r1, [sp, #8]
   11b10:	ebffebdd 	bl	ca8c <strcpy>
   11b14:	e594300c 	ldr	r3, [r4, #12]
   11b18:	e59d2004 	ldr	r2, [sp, #4]
   11b1c:	e0833006 	add	r3, r3, r6
   11b20:	e584300c 	str	r3, [r4, #12]
   11b24:	e2822001 	add	r2, r2, #1
   11b28:	e58d2004 	str	r2, [sp, #4]
   11b2c:	eaffffb8 	b	11a14 <CString::Replace(char const*, char const*)+0x80>
   11b30:	e594300c 	ldr	r3, [r4, #12]
   11b34:	e5945004 	ldr	r5, [r4, #4]
   11b38:	e5942008 	ldr	r2, [r4, #8]
   11b3c:	e0435005 	sub	r5, r3, r5
   11b40:	e1d760d0 	ldrsb	r6, [r7]
   11b44:	e2851002 	add	r1, r5, #2
   11b48:	e1510002 	cmp	r1, r2
   11b4c:	8a000031 	bhi	11c18 <CString::Replace(char const*, char const*)+0x284>
   11b50:	e2832001 	add	r2, r3, #1
   11b54:	e2875001 	add	r5, r7, #1
   11b58:	e584200c 	str	r2, [r4, #12]
   11b5c:	e5c36000 	strb	r6, [r3]
   11b60:	eaffffab 	b	11a14 <CString::Replace(char const*, char const*)+0x80>
   11b64:	e594b004 	ldr	fp, [r4, #4]
   11b68:	e5943008 	ldr	r3, [r4, #8]
   11b6c:	e040b00b 	sub	fp, r0, fp
   11b70:	e086700b 	add	r7, r6, fp
   11b74:	e2872001 	add	r2, r7, #1
   11b78:	e1520003 	cmp	r2, r3
   11b7c:	9affffe2 	bls	11b0c <CString::Replace(char const*, char const*)+0x178>
   11b80:	e2877041 	add	r7, r7, #65	; 0x41
   11b84:	e1a00007 	mov	r0, r7
   11b88:	eb001af5 	bl	18764 <operator new[](unsigned int)>
   11b8c:	e594300c 	ldr	r3, [r4, #12]
   11b90:	e3a02000 	mov	r2, #0
   11b94:	e1a0a000 	mov	sl, r0
   11b98:	e5c32000 	strb	r2, [r3]
   11b9c:	e5941004 	ldr	r1, [r4, #4]
   11ba0:	ebffebb9 	bl	ca8c <strcpy>
   11ba4:	e5940004 	ldr	r0, [r4, #4]
   11ba8:	e3500000 	cmp	r0, #0
   11bac:	0a000000 	beq	11bb4 <CString::Replace(char const*, char const*)+0x220>
   11bb0:	eb001aed 	bl	1876c <operator delete[](void*)>
   11bb4:	e08a000b 	add	r0, sl, fp
   11bb8:	e584a004 	str	sl, [r4, #4]
   11bbc:	e584000c 	str	r0, [r4, #12]
   11bc0:	e5847008 	str	r7, [r4, #8]
   11bc4:	eaffffd0 	b	11b0c <CString::Replace(char const*, char const*)+0x178>
   11bc8:	e1a00005 	mov	r0, r5
   11bcc:	ebffeb44 	bl	c8e4 <strlen>
   11bd0:	e2507000 	subs	r7, r0, #0
   11bd4:	e594000c 	ldr	r0, [r4, #12]
   11bd8:	1a00001f 	bne	11c5c <CString::Replace(char const*, char const*)+0x2c8>
   11bdc:	e1a01005 	mov	r1, r5
   11be0:	ebffeba9 	bl	ca8c <strcpy>
   11be4:	e594300c 	ldr	r3, [r4, #12]
   11be8:	e59d000c 	ldr	r0, [sp, #12]
   11bec:	e3a02000 	mov	r2, #0
   11bf0:	e0831007 	add	r1, r3, r7
   11bf4:	e584100c 	str	r1, [r4, #12]
   11bf8:	e7c32007 	strb	r2, [r3, r7]
   11bfc:	eb001ada 	bl	1876c <operator delete[](void*)>
   11c00:	e59d0004 	ldr	r0, [sp, #4]
   11c04:	e28dd014 	add	sp, sp, #20
   11c08:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c0c:	e1a07005 	mov	r7, r5
   11c10:	e2865001 	add	r5, r6, #1
   11c14:	eaffffa6 	b	11ab4 <CString::Replace(char const*, char const*)+0x120>
   11c18:	e285a042 	add	sl, r5, #66	; 0x42
   11c1c:	e1a0000a 	mov	r0, sl
   11c20:	eb001acf 	bl	18764 <operator new[](unsigned int)>
   11c24:	e594300c 	ldr	r3, [r4, #12]
   11c28:	e3a02000 	mov	r2, #0
   11c2c:	e1a0b000 	mov	fp, r0
   11c30:	e5c32000 	strb	r2, [r3]
   11c34:	e5941004 	ldr	r1, [r4, #4]
   11c38:	ebffeb93 	bl	ca8c <strcpy>
   11c3c:	e5940004 	ldr	r0, [r4, #4]
   11c40:	e3500000 	cmp	r0, #0
   11c44:	0a000000 	beq	11c4c <CString::Replace(char const*, char const*)+0x2b8>
   11c48:	eb001ac7 	bl	1876c <operator delete[](void*)>
   11c4c:	e08b3005 	add	r3, fp, r5
   11c50:	e584b004 	str	fp, [r4, #4]
   11c54:	e584a008 	str	sl, [r4, #8]
   11c58:	eaffffbc 	b	11b50 <CString::Replace(char const*, char const*)+0x1bc>
   11c5c:	e5948004 	ldr	r8, [r4, #4]
   11c60:	e5942008 	ldr	r2, [r4, #8]
   11c64:	e0408008 	sub	r8, r0, r8
   11c68:	e0873008 	add	r3, r7, r8
   11c6c:	e2831001 	add	r1, r3, #1
   11c70:	e1510002 	cmp	r1, r2
   11c74:	9affffd8 	bls	11bdc <CString::Replace(char const*, char const*)+0x248>
   11c78:	e2839041 	add	r9, r3, #65	; 0x41
   11c7c:	e1a00009 	mov	r0, r9
   11c80:	eb001ab7 	bl	18764 <operator new[](unsigned int)>
   11c84:	e594300c 	ldr	r3, [r4, #12]
   11c88:	e1a0b000 	mov	fp, r0
   11c8c:	e5c36000 	strb	r6, [r3]
   11c90:	e5941004 	ldr	r1, [r4, #4]
   11c94:	ebffeb7c 	bl	ca8c <strcpy>
   11c98:	e5940004 	ldr	r0, [r4, #4]
   11c9c:	e3500000 	cmp	r0, #0
   11ca0:	0a000000 	beq	11ca8 <CString::Replace(char const*, char const*)+0x314>
   11ca4:	eb001ab0 	bl	1876c <operator delete[](void*)>
   11ca8:	e08b0008 	add	r0, fp, r8
   11cac:	e584b004 	str	fp, [r4, #4]
   11cb0:	e584000c 	str	r0, [r4, #12]
   11cb4:	e5849008 	str	r9, [r4, #8]
   11cb8:	eaffffc7 	b	11bdc <CString::Replace(char const*, char const*)+0x248>

00011cbc <CString::PutChar(char, unsigned int)>:
   11cbc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11cc0:	e2526000 	subs	r6, r2, #0
   11cc4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11cc8:	e590c00c 	ldr	ip, [r0, #12]
   11ccc:	e1a07001 	mov	r7, r1
   11cd0:	e5905004 	ldr	r5, [r0, #4]
   11cd4:	e1a04000 	mov	r4, r0
   11cd8:	e5902008 	ldr	r2, [r0, #8]
   11cdc:	e04c5005 	sub	r5, ip, r5
   11ce0:	e0863005 	add	r3, r6, r5
   11ce4:	e2831001 	add	r1, r3, #1
   11ce8:	e1510002 	cmp	r1, r2
   11cec:	8a000008 	bhi	11d14 <CString::PutChar(char, unsigned int)+0x58>
   11cf0:	e2463001 	sub	r3, r6, #1
   11cf4:	e2433001 	sub	r3, r3, #1
   11cf8:	e28c2001 	add	r2, ip, #1
   11cfc:	e3730001 	cmn	r3, #1
   11d00:	e584200c 	str	r2, [r4, #12]
   11d04:	e5cc7000 	strb	r7, [ip]
   11d08:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d0c:	e594c00c 	ldr	ip, [r4, #12]
   11d10:	eafffff7 	b	11cf4 <CString::PutChar(char, unsigned int)+0x38>
   11d14:	e2838041 	add	r8, r3, #65	; 0x41
   11d18:	e1a00008 	mov	r0, r8
   11d1c:	eb001a90 	bl	18764 <operator new[](unsigned int)>
   11d20:	e594300c 	ldr	r3, [r4, #12]
   11d24:	e3a02000 	mov	r2, #0
   11d28:	e1a09000 	mov	r9, r0
   11d2c:	e5c32000 	strb	r2, [r3]
   11d30:	e5941004 	ldr	r1, [r4, #4]
   11d34:	ebffeb54 	bl	ca8c <strcpy>
   11d38:	e5940004 	ldr	r0, [r4, #4]
   11d3c:	e3500000 	cmp	r0, #0
   11d40:	0a000000 	beq	11d48 <CString::PutChar(char, unsigned int)+0x8c>
   11d44:	eb001a88 	bl	1876c <operator delete[](void*)>
   11d48:	e089c005 	add	ip, r9, r5
   11d4c:	e5849004 	str	r9, [r4, #4]
   11d50:	e5848008 	str	r8, [r4, #8]
   11d54:	eaffffe5 	b	11cf0 <CString::PutChar(char, unsigned int)+0x34>

00011d58 <CString::PutString(char const*)>:
   11d58:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11d5c:	e1a04000 	mov	r4, r0
   11d60:	e1a00001 	mov	r0, r1
   11d64:	e1a05001 	mov	r5, r1
   11d68:	ebffeadd 	bl	c8e4 <strlen>
   11d6c:	e2506000 	subs	r6, r0, #0
   11d70:	e594000c 	ldr	r0, [r4, #12]
   11d74:	1a000005 	bne	11d90 <CString::PutString(char const*)+0x38>
   11d78:	e1a01005 	mov	r1, r5
   11d7c:	ebffeb42 	bl	ca8c <strcpy>
   11d80:	e594000c 	ldr	r0, [r4, #12]
   11d84:	e0800006 	add	r0, r0, r6
   11d88:	e584000c 	str	r0, [r4, #12]
   11d8c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d90:	e5947004 	ldr	r7, [r4, #4]
   11d94:	e5942008 	ldr	r2, [r4, #8]
   11d98:	e0407007 	sub	r7, r0, r7
   11d9c:	e0863007 	add	r3, r6, r7
   11da0:	e2831001 	add	r1, r3, #1
   11da4:	e1510002 	cmp	r1, r2
   11da8:	9afffff2 	bls	11d78 <CString::PutString(char const*)+0x20>
   11dac:	e2838041 	add	r8, r3, #65	; 0x41
   11db0:	e1a00008 	mov	r0, r8
   11db4:	eb001a6a 	bl	18764 <operator new[](unsigned int)>
   11db8:	e594300c 	ldr	r3, [r4, #12]
   11dbc:	e3a02000 	mov	r2, #0
   11dc0:	e1a09000 	mov	r9, r0
   11dc4:	e5c32000 	strb	r2, [r3]
   11dc8:	e5941004 	ldr	r1, [r4, #4]
   11dcc:	ebffeb2e 	bl	ca8c <strcpy>
   11dd0:	e5940004 	ldr	r0, [r4, #4]
   11dd4:	e3500000 	cmp	r0, #0
   11dd8:	0a000000 	beq	11de0 <CString::PutString(char const*)+0x88>
   11ddc:	eb001a62 	bl	1876c <operator delete[](void*)>
   11de0:	e0890007 	add	r0, r9, r7
   11de4:	e5849004 	str	r9, [r4, #4]
   11de8:	e584000c 	str	r0, [r4, #12]
   11dec:	e5848008 	str	r8, [r4, #8]
   11df0:	eaffffe0 	b	11d78 <CString::PutString(char const*)+0x20>

00011df4 <CString::ReserveSpace(unsigned int)>:
   11df4:	e3510000 	cmp	r1, #0
   11df8:	012fff1e 	bxeq	lr
   11dfc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11e00:	e990004c 	ldmib	r0, {r2, r3, r6}
   11e04:	e0466002 	sub	r6, r6, r2
   11e08:	e0811006 	add	r1, r1, r6
   11e0c:	e2812001 	add	r2, r1, #1
   11e10:	e1520003 	cmp	r2, r3
   11e14:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   11e18:	e1a04000 	mov	r4, r0
   11e1c:	e2815041 	add	r5, r1, #65	; 0x41
   11e20:	e1a00005 	mov	r0, r5
   11e24:	eb001a4e 	bl	18764 <operator new[](unsigned int)>
   11e28:	e3a02000 	mov	r2, #0
   11e2c:	e594300c 	ldr	r3, [r4, #12]
   11e30:	e1a07000 	mov	r7, r0
   11e34:	e5c32000 	strb	r2, [r3]
   11e38:	e5941004 	ldr	r1, [r4, #4]
   11e3c:	ebffeb12 	bl	ca8c <strcpy>
   11e40:	e5940004 	ldr	r0, [r4, #4]
   11e44:	e3500000 	cmp	r0, #0
   11e48:	0a000000 	beq	11e50 <CString::ReserveSpace(unsigned int)+0x5c>
   11e4c:	eb001a46 	bl	1876c <operator delete[](void*)>
   11e50:	e0876006 	add	r6, r7, r6
   11e54:	e5847004 	str	r7, [r4, #4]
   11e58:	e584600c 	str	r6, [r4, #12]
   11e5c:	e5845008 	str	r5, [r4, #8]
   11e60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00011e64 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   11e64:	e1510002 	cmp	r1, r2
   11e68:	e92d4070 	push	{r4, r5, r6, lr}
   11e6c:	23a0e001 	movcs	lr, #1
   11e70:	3a00001d 	bcc	11eec <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x88>
   11e74:	e00e0e92 	mul	lr, r2, lr
   11e78:	e734fe11 	udiv	r4, r1, lr
   11e7c:	e1540002 	cmp	r4, r2
   11e80:	e1a0c004 	mov	ip, r4
   11e84:	2afffffa 	bcs	11e74 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x10>
   11e88:	e3530000 	cmp	r3, #0
   11e8c:	e1a05000 	mov	r5, r0
   11e90:	13a06037 	movne	r6, #55	; 0x37
   11e94:	03a06057 	moveq	r6, #87	; 0x57
   11e98:	ea000006 	b	11eb8 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x54>
   11e9c:	e28cc030 	add	ip, ip, #48	; 0x30
   11ea0:	e35e0000 	cmp	lr, #0
   11ea4:	e4c3c001 	strb	ip, [r3], #1
   11ea8:	0a00000c 	beq	11ee0 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x7c>
   11eac:	e734fe11 	udiv	r4, r1, lr
   11eb0:	e1a05003 	mov	r5, r3
   11eb4:	e1a0c004 	mov	ip, r4
   11eb8:	e061149e 	mls	r1, lr, r4, r1
   11ebc:	e35c0009 	cmp	ip, #9
   11ec0:	e1a03005 	mov	r3, r5
   11ec4:	e6efc07c 	uxtb	ip, ip
   11ec8:	e73ef21e 	udiv	lr, lr, r2
   11ecc:	9afffff2 	bls	11e9c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x38>
   11ed0:	e08cc006 	add	ip, ip, r6
   11ed4:	e35e0000 	cmp	lr, #0
   11ed8:	e4c3c001 	strb	ip, [r3], #1
   11edc:	1afffff2 	bne	11eac <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x48>
   11ee0:	e3a03000 	mov	r3, #0
   11ee4:	e5c53001 	strb	r3, [r5, #1]
   11ee8:	e8bd8070 	pop	{r4, r5, r6, pc}
   11eec:	e1a0c001 	mov	ip, r1
   11ef0:	e3a0e001 	mov	lr, #1
   11ef4:	e1a04001 	mov	r4, r1
   11ef8:	eaffffe2 	b	11e88 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x24>

00011efc <CString::ftoa(char*, double, unsigned int)>:
   11efc:	eeb50bc0 	vcmpe.f64	d0, #0.0
   11f00:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f04:	eddf0bf7 	vldr	d16, [pc, #988]	; 122e8 <CString::ftoa(char*, double, unsigned int)+0x3ec>
   11f08:	ed2d8b02 	vpush	{d8}
   11f0c:	eeb08b40 	vmov.f64	d8, d0
   11f10:	e24dd01c 	sub	sp, sp, #28
   11f14:	e1a05000 	mov	r5, r0
   11f18:	e1a0a001 	mov	sl, r1
   11f1c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   11f20:	4eb18b40 	vnegmi.f64	d8, d0
   11f24:	43a0302d 	movmi	r3, #45	; 0x2d
   11f28:	42804001 	addmi	r4, r0, #1
   11f2c:	45c03000 	strbmi	r3, [r0]
   11f30:	51a04000 	movpl	r4, r0
   11f34:	eeb48be0 	vcmpe.f64	d8, d16
   11f38:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   11f3c:	ca0000e1 	bgt	122c8 <CString::ftoa(char*, double, unsigned int)+0x3cc>
   11f40:	eefc7bc8 	vcvt.u32.f64	s15, d8
   11f44:	ee179a90 	vmov	r9, s15
   11f48:	e3590009 	cmp	r9, #9
   11f4c:	83a02001 	movhi	r2, #1
   11f50:	83a0100a 	movhi	r1, #10
   11f54:	9a0000e5 	bls	122f0 <CString::ftoa(char*, double, unsigned int)+0x3f4>
   11f58:	e0020291 	mul	r2, r1, r2
   11f5c:	e733f219 	udiv	r3, r9, r2
   11f60:	e3530009 	cmp	r3, #9
   11f64:	8afffffb 	bhi	11f58 <CString::ftoa(char*, double, unsigned int)+0x5c>
   11f68:	e30ceccd 	movw	lr, #52429	; 0xcccd
   11f6c:	e34ceccc 	movt	lr, #52428	; 0xcccc
   11f70:	e1a0c004 	mov	ip, r4
   11f74:	e1a00009 	mov	r0, r9
   11f78:	e738f219 	udiv	r8, r9, r2
   11f7c:	ea000006 	b	11f9c <CString::ftoa(char*, double, unsigned int)+0xa0>
   11f80:	e2833030 	add	r3, r3, #48	; 0x30
   11f84:	e1b021a7 	lsrs	r2, r7, #3
   11f88:	e4c13001 	strb	r3, [r1], #1
   11f8c:	0a00000c 	beq	11fc4 <CString::ftoa(char*, double, unsigned int)+0xc8>
   11f90:	e738f210 	udiv	r8, r0, r2
   11f94:	e1a0c001 	mov	ip, r1
   11f98:	e1a03008 	mov	r3, r8
   11f9c:	e3530009 	cmp	r3, #9
   11fa0:	e1a0100c 	mov	r1, ip
   11fa4:	e087629e 	umull	r6, r7, lr, r2
   11fa8:	e6ef3073 	uxtb	r3, r3
   11fac:	e0600892 	mls	r0, r2, r8, r0
   11fb0:	9afffff2 	bls	11f80 <CString::ftoa(char*, double, unsigned int)+0x84>
   11fb4:	e2833057 	add	r3, r3, #87	; 0x57
   11fb8:	e1b021a7 	lsrs	r2, r7, #3
   11fbc:	e4c13001 	strb	r3, [r1], #1
   11fc0:	1afffff2 	bne	11f90 <CString::ftoa(char*, double, unsigned int)+0x94>
   11fc4:	e3a03000 	mov	r3, #0
   11fc8:	e35a0000 	cmp	sl, #0
   11fcc:	e5cc3001 	strb	r3, [ip, #1]
   11fd0:	1a000003 	bne	11fe4 <CString::ftoa(char*, double, unsigned int)+0xe8>
   11fd4:	e1a00005 	mov	r0, r5
   11fd8:	e28dd01c 	add	sp, sp, #28
   11fdc:	ecbd8b02 	vpop	{d8}
   11fe0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fe4:	e1a00004 	mov	r0, r4
   11fe8:	ebffea3d 	bl	c8e4 <strlen>
   11fec:	e35a0009 	cmp	sl, #9
   11ff0:	e0846000 	add	r6, r4, r0
   11ff4:	e1a08000 	mov	r8, r0
   11ff8:	e3a0302e 	mov	r3, #46	; 0x2e
   11ffc:	e7c43000 	strb	r3, [r4, r0]
   12000:	31a0000a 	movcc	r0, sl
   12004:	23a00009 	movcs	r0, #9
   12008:	e35a0001 	cmp	sl, #1
   1200c:	e2867001 	add	r7, r6, #1
   12010:	e58d0000 	str	r0, [sp]
   12014:	9ef21b04 	vmovls.f64	d17, #36	; 0x41200000  10.0
   12018:	9a000008 	bls	12040 <CString::ftoa(char*, double, unsigned int)+0x144>
   1201c:	e3a0300a 	mov	r3, #10
   12020:	e3a02002 	mov	r2, #2
   12024:	e1a01003 	mov	r1, r3
   12028:	e2822001 	add	r2, r2, #1
   1202c:	e0030391 	mul	r3, r1, r3
   12030:	e1500002 	cmp	r0, r2
   12034:	2afffffb 	bcs	12028 <CString::ftoa(char*, double, unsigned int)+0x12c>
   12038:	ee073a90 	vmov	s15, r3
   1203c:	eef81b67 	vcvt.f64.u32	d17, s15
   12040:	ee079a90 	vmov	s15, r9
   12044:	eef80b67 	vcvt.f64.u32	d16, s15
   12048:	ee388b60 	vsub.f64	d8, d8, d16
   1204c:	ee288b21 	vmul.f64	d8, d8, d17
   12050:	eefc7bc8 	vcvt.u32.f64	s15, d8
   12054:	ee171a90 	vmov	r1, s15
   12058:	e3510009 	cmp	r1, #9
   1205c:	83a02001 	movhi	r2, #1
   12060:	83a0c00a 	movhi	ip, #10
   12064:	9a0000a6 	bls	12304 <CString::ftoa(char*, double, unsigned int)+0x408>
   12068:	e002029c 	mul	r2, ip, r2
   1206c:	e730f211 	udiv	r0, r1, r2
   12070:	e3500009 	cmp	r0, #9
   12074:	e1a03000 	mov	r3, r0
   12078:	8afffffa 	bhi	12068 <CString::ftoa(char*, double, unsigned int)+0x16c>
   1207c:	e30c9ccd 	movw	r9, #52429	; 0xcccd
   12080:	e34c9ccc 	movt	r9, #52428	; 0xcccc
   12084:	e28de00c 	add	lr, sp, #12
   12088:	e58d4004 	str	r4, [sp, #4]
   1208c:	ea000006 	b	120ac <CString::ftoa(char*, double, unsigned int)+0x1b0>
   12090:	e2833030 	add	r3, r3, #48	; 0x30
   12094:	e1b021ab 	lsrs	r2, fp, #3
   12098:	e4cc3001 	strb	r3, [ip], #1
   1209c:	0a00000c 	beq	120d4 <CString::ftoa(char*, double, unsigned int)+0x1d8>
   120a0:	e730f211 	udiv	r0, r1, r2
   120a4:	e1a0e00c 	mov	lr, ip
   120a8:	e1a03000 	mov	r3, r0
   120ac:	e3530009 	cmp	r3, #9
   120b0:	e1a0c00e 	mov	ip, lr
   120b4:	e08ba299 	umull	sl, fp, r9, r2
   120b8:	e6ef3073 	uxtb	r3, r3
   120bc:	e0611092 	mls	r1, r2, r0, r1
   120c0:	9afffff2 	bls	12090 <CString::ftoa(char*, double, unsigned int)+0x194>
   120c4:	e2833057 	add	r3, r3, #87	; 0x57
   120c8:	e1b021ab 	lsrs	r2, fp, #3
   120cc:	e4cc3001 	strb	r3, [ip], #1
   120d0:	1afffff2 	bne	120a0 <CString::ftoa(char*, double, unsigned int)+0x1a4>
   120d4:	e3a03000 	mov	r3, #0
   120d8:	e28d000c 	add	r0, sp, #12
   120dc:	e5ce3001 	strb	r3, [lr, #1]
   120e0:	e59d4004 	ldr	r4, [sp, #4]
   120e4:	ebffe9fe 	bl	c8e4 <strlen>
   120e8:	e59d3000 	ldr	r3, [sp]
   120ec:	e0430000 	sub	r0, r3, r0
   120f0:	e3500000 	cmp	r0, #0
   120f4:	e2401001 	sub	r1, r0, #1
   120f8:	0a00006b 	beq	122ac <CString::ftoa(char*, double, unsigned int)+0x3b0>
   120fc:	e2888001 	add	r8, r8, #1
   12100:	e0842008 	add	r2, r4, r8
   12104:	e2022007 	and	r2, r2, #7
   12108:	e2622000 	rsb	r2, r2, #0
   1210c:	e202200f 	and	r2, r2, #15
   12110:	e282300f 	add	r3, r2, #15
   12114:	e3530011 	cmp	r3, #17
   12118:	33a03011 	movcc	r3, #17
   1211c:	e1510003 	cmp	r1, r3
   12120:	3a000075 	bcc	122fc <CString::ftoa(char*, double, unsigned int)+0x400>
   12124:	e3520000 	cmp	r2, #0
   12128:	0a000079 	beq	12314 <CString::ftoa(char*, double, unsigned int)+0x418>
   1212c:	e3a0c030 	mov	ip, #48	; 0x30
   12130:	e3520001 	cmp	r2, #1
   12134:	e2863002 	add	r3, r6, #2
   12138:	e5c6c001 	strb	ip, [r6, #1]
   1213c:	e2401002 	sub	r1, r0, #2
   12140:	0a000042 	beq	12250 <CString::ftoa(char*, double, unsigned int)+0x354>
   12144:	e5c6c002 	strb	ip, [r6, #2]
   12148:	e3520002 	cmp	r2, #2
   1214c:	e2863003 	add	r3, r6, #3
   12150:	e2401003 	sub	r1, r0, #3
   12154:	0a00003d 	beq	12250 <CString::ftoa(char*, double, unsigned int)+0x354>
   12158:	e5c6c003 	strb	ip, [r6, #3]
   1215c:	e3520003 	cmp	r2, #3
   12160:	e2863004 	add	r3, r6, #4
   12164:	e2401004 	sub	r1, r0, #4
   12168:	0a000038 	beq	12250 <CString::ftoa(char*, double, unsigned int)+0x354>
   1216c:	e5c6c004 	strb	ip, [r6, #4]
   12170:	e3520004 	cmp	r2, #4
   12174:	e2863005 	add	r3, r6, #5
   12178:	e2401005 	sub	r1, r0, #5
   1217c:	0a000033 	beq	12250 <CString::ftoa(char*, double, unsigned int)+0x354>
   12180:	e5c6c005 	strb	ip, [r6, #5]
   12184:	e3520005 	cmp	r2, #5
   12188:	e2863006 	add	r3, r6, #6
   1218c:	e2401006 	sub	r1, r0, #6
   12190:	0a00002e 	beq	12250 <CString::ftoa(char*, double, unsigned int)+0x354>
   12194:	e5c6c006 	strb	ip, [r6, #6]
   12198:	e3520006 	cmp	r2, #6
   1219c:	e2863007 	add	r3, r6, #7
   121a0:	e2401007 	sub	r1, r0, #7
   121a4:	0a000029 	beq	12250 <CString::ftoa(char*, double, unsigned int)+0x354>
   121a8:	e5c6c007 	strb	ip, [r6, #7]
   121ac:	e3520007 	cmp	r2, #7
   121b0:	e2863008 	add	r3, r6, #8
   121b4:	e2401008 	sub	r1, r0, #8
   121b8:	0a000024 	beq	12250 <CString::ftoa(char*, double, unsigned int)+0x354>
   121bc:	e3520008 	cmp	r2, #8
   121c0:	e2863009 	add	r3, r6, #9
   121c4:	e5c6c008 	strb	ip, [r6, #8]
   121c8:	e2401009 	sub	r1, r0, #9
   121cc:	0a00001f 	beq	12250 <CString::ftoa(char*, double, unsigned int)+0x354>
   121d0:	e5c6c009 	strb	ip, [r6, #9]
   121d4:	e3520009 	cmp	r2, #9
   121d8:	e286300a 	add	r3, r6, #10
   121dc:	e240100a 	sub	r1, r0, #10
   121e0:	0a00001a 	beq	12250 <CString::ftoa(char*, double, unsigned int)+0x354>
   121e4:	e5c6c00a 	strb	ip, [r6, #10]
   121e8:	e352000a 	cmp	r2, #10
   121ec:	e286300b 	add	r3, r6, #11
   121f0:	e240100b 	sub	r1, r0, #11
   121f4:	0a000015 	beq	12250 <CString::ftoa(char*, double, unsigned int)+0x354>
   121f8:	e5c6c00b 	strb	ip, [r6, #11]
   121fc:	e352000b 	cmp	r2, #11
   12200:	e286300c 	add	r3, r6, #12
   12204:	e240100c 	sub	r1, r0, #12
   12208:	0a000010 	beq	12250 <CString::ftoa(char*, double, unsigned int)+0x354>
   1220c:	e5c6c00c 	strb	ip, [r6, #12]
   12210:	e352000c 	cmp	r2, #12
   12214:	e286300d 	add	r3, r6, #13
   12218:	e240100d 	sub	r1, r0, #13
   1221c:	0a00000b 	beq	12250 <CString::ftoa(char*, double, unsigned int)+0x354>
   12220:	e5c6c00d 	strb	ip, [r6, #13]
   12224:	e352000d 	cmp	r2, #13
   12228:	e286300e 	add	r3, r6, #14
   1222c:	e240100e 	sub	r1, r0, #14
   12230:	0a000006 	beq	12250 <CString::ftoa(char*, double, unsigned int)+0x354>
   12234:	e5c6c00e 	strb	ip, [r6, #14]
   12238:	e352000f 	cmp	r2, #15
   1223c:	e286300f 	add	r3, r6, #15
   12240:	e240100f 	sub	r1, r0, #15
   12244:	02863010 	addeq	r3, r6, #16
   12248:	02401010 	subeq	r1, r0, #16
   1224c:	05c6c00f 	strbeq	ip, [r6, #15]
   12250:	f2c30e50 	vmov.i8	q8, #48	; 0x30
   12254:	e0828008 	add	r8, r2, r8
   12258:	e0402002 	sub	r2, r0, r2
   1225c:	e0844008 	add	r4, r4, r8
   12260:	e1a0e222 	lsr	lr, r2, #4
   12264:	e3a0c000 	mov	ip, #0
   12268:	e28cc001 	add	ip, ip, #1
   1226c:	f4440adf 	vst1.64	{d16-d17}, [r4 :64]
   12270:	e15e000c 	cmp	lr, ip
   12274:	e2844010 	add	r4, r4, #16
   12278:	8afffffa 	bhi	12268 <CString::ftoa(char*, double, unsigned int)+0x36c>
   1227c:	e3c2c00f 	bic	ip, r2, #15
   12280:	e083300c 	add	r3, r3, ip
   12284:	e041100c 	sub	r1, r1, ip
   12288:	e152000c 	cmp	r2, ip
   1228c:	0a000005 	beq	122a8 <CString::ftoa(char*, double, unsigned int)+0x3ac>
   12290:	e2811001 	add	r1, r1, #1
   12294:	e3a02030 	mov	r2, #48	; 0x30
   12298:	e0831001 	add	r1, r3, r1
   1229c:	e4c32001 	strb	r2, [r3], #1
   122a0:	e1530001 	cmp	r3, r1
   122a4:	1afffffc 	bne	1229c <CString::ftoa(char*, double, unsigned int)+0x3a0>
   122a8:	e0877000 	add	r7, r7, r0
   122ac:	e28d100c 	add	r1, sp, #12
   122b0:	e1a00007 	mov	r0, r7
   122b4:	ebffe9f4 	bl	ca8c <strcpy>
   122b8:	e1a00005 	mov	r0, r5
   122bc:	e28dd01c 	add	sp, sp, #28
   122c0:	ecbd8b02 	vpop	{d8}
   122c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122c8:	e1a00004 	mov	r0, r4
   122cc:	e30b126c 	movw	r1, #45676	; 0xb26c
   122d0:	e3401001 	movt	r1, #1
   122d4:	ebffe9ec 	bl	ca8c <strcpy>
   122d8:	e1a00005 	mov	r0, r5
   122dc:	e28dd01c 	add	sp, sp, #28
   122e0:	ecbd8b02 	vpop	{d8}
   122e4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122e8:	ffe00000 	.word	0xffe00000
   122ec:	41efffff 	.word	0x41efffff
   122f0:	ee173a90 	vmov	r3, s15
   122f4:	e3a02001 	mov	r2, #1
   122f8:	eaffff1a 	b	11f68 <CString::ftoa(char*, double, unsigned int)+0x6c>
   122fc:	e1a03007 	mov	r3, r7
   12300:	eaffffe2 	b	12290 <CString::ftoa(char*, double, unsigned int)+0x394>
   12304:	ee173a90 	vmov	r3, s15
   12308:	e3a02001 	mov	r2, #1
   1230c:	ee170a90 	vmov	r0, s15
   12310:	eaffff59 	b	1207c <CString::ftoa(char*, double, unsigned int)+0x180>
   12314:	e1a03007 	mov	r3, r7
   12318:	eaffffcc 	b	12250 <CString::ftoa(char*, double, unsigned int)+0x354>

0001231c <CString::FormatV(char const*, std::__va_list)>:
   1231c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12320:	e1a0b000 	mov	fp, r0
   12324:	e5900004 	ldr	r0, [r0, #4]
   12328:	e24dd034 	sub	sp, sp, #52	; 0x34
   1232c:	e1a09001 	mov	r9, r1
   12330:	e1a05002 	mov	r5, r2
   12334:	e3500000 	cmp	r0, #0
   12338:	0a000000 	beq	12340 <CString::FormatV(char const*, std::__va_list)+0x24>
   1233c:	eb00190a 	bl	1876c <operator delete[](void*)>
   12340:	e3a00040 	mov	r0, #64	; 0x40
   12344:	e58b0008 	str	r0, [fp, #8]
   12348:	e30c3ccd 	movw	r3, #52429	; 0xcccd
   1234c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
   12350:	e58d3008 	str	r3, [sp, #8]
   12354:	eb001902 	bl	18764 <operator new[](unsigned int)>
   12358:	e58b0004 	str	r0, [fp, #4]
   1235c:	e58b000c 	str	r0, [fp, #12]
   12360:	e1d940d0 	ldrsb	r4, [r9]
   12364:	e3540000 	cmp	r4, #0
   12368:	0a00005f 	beq	124ec <CString::FormatV(char const*, std::__va_list)+0x1d0>
   1236c:	e3540025 	cmp	r4, #37	; 0x25
   12370:	e2896001 	add	r6, r9, #1
   12374:	1a00004e 	bne	124b4 <CString::FormatV(char const*, std::__va_list)+0x198>
   12378:	e1d900d1 	ldrsb	r0, [r9, #1]
   1237c:	e3500025 	cmp	r0, #37	; 0x25
   12380:	0a000189 	beq	129ac <CString::FormatV(char const*, std::__va_list)+0x690>
   12384:	e350002d 	cmp	r0, #45	; 0x2d
   12388:	02896002 	addeq	r6, r9, #2
   1238c:	03a07001 	moveq	r7, #1
   12390:	13a07000 	movne	r7, #0
   12394:	01d900d2 	ldrsbeq	r0, [r9, #2]
   12398:	e2869001 	add	r9, r6, #1
   1239c:	e3500030 	cmp	r0, #48	; 0x30
   123a0:	02863002 	addeq	r3, r6, #2
   123a4:	13a03000 	movne	r3, #0
   123a8:	158d3004 	strne	r3, [sp, #4]
   123ac:	03a02001 	moveq	r2, #1
   123b0:	01d600d1 	ldrsbeq	r0, [r6, #1]
   123b4:	01a06009 	moveq	r6, r9
   123b8:	01a09003 	moveq	r9, r3
   123bc:	058d2004 	streq	r2, [sp, #4]
   123c0:	e2403030 	sub	r3, r0, #48	; 0x30
   123c4:	e6ef3073 	uxtb	r3, r3
   123c8:	e3530009 	cmp	r3, #9
   123cc:	8a000071 	bhi	12598 <CString::FormatV(char const*, std::__va_list)+0x27c>
   123d0:	e3a04000 	mov	r4, #0
   123d4:	e3a0200a 	mov	r2, #10
   123d8:	ea000000 	b	123e0 <CString::FormatV(char const*, std::__va_list)+0xc4>
   123dc:	e1a06008 	mov	r6, r8
   123e0:	e0240492 	mla	r4, r2, r4, r0
   123e4:	e1d600d1 	ldrsb	r0, [r6, #1]
   123e8:	e2868001 	add	r8, r6, #1
   123ec:	e2403030 	sub	r3, r0, #48	; 0x30
   123f0:	e2444030 	sub	r4, r4, #48	; 0x30
   123f4:	e6ef3073 	uxtb	r3, r3
   123f8:	e3530009 	cmp	r3, #9
   123fc:	9afffff6 	bls	123dc <CString::FormatV(char const*, std::__va_list)+0xc0>
   12400:	e2869002 	add	r9, r6, #2
   12404:	e350002e 	cmp	r0, #46	; 0x2e
   12408:	13a01006 	movne	r1, #6
   1240c:	0a00003a 	beq	124fc <CString::FormatV(char const*, std::__va_list)+0x1e0>
   12410:	e350006c 	cmp	r0, #108	; 0x6c
   12414:	01d800d1 	ldrsbeq	r0, [r8, #1]
   12418:	01a08009 	moveq	r8, r9
   1241c:	02899001 	addeq	r9, r9, #1
   12420:	e2403058 	sub	r3, r0, #88	; 0x58
   12424:	e3530020 	cmp	r3, #32
   12428:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1242c:	ea00014b 	b	12960 <CString::FormatV(char const*, std::__va_list)+0x644>
   12430:	000128e4 	.word	0x000128e4
   12434:	00012960 	.word	0x00012960
   12438:	00012960 	.word	0x00012960
   1243c:	00012960 	.word	0x00012960
   12440:	00012960 	.word	0x00012960
   12444:	00012960 	.word	0x00012960
   12448:	00012960 	.word	0x00012960
   1244c:	00012960 	.word	0x00012960
   12450:	00012960 	.word	0x00012960
   12454:	00012960 	.word	0x00012960
   12458:	00012960 	.word	0x00012960
   1245c:	0001289c 	.word	0x0001289c
   12460:	00012734 	.word	0x00012734
   12464:	00012960 	.word	0x00012960
   12468:	00012684 	.word	0x00012684
   1246c:	00012960 	.word	0x00012960
   12470:	00012960 	.word	0x00012960
   12474:	00012734 	.word	0x00012734
   12478:	00012960 	.word	0x00012960
   1247c:	00012960 	.word	0x00012960
   12480:	00012960 	.word	0x00012960
   12484:	00012960 	.word	0x00012960
   12488:	00012960 	.word	0x00012960
   1248c:	000125a4 	.word	0x000125a4
   12490:	000128e4 	.word	0x000128e4
   12494:	00012960 	.word	0x00012960
   12498:	00012960 	.word	0x00012960
   1249c:	000128ec 	.word	0x000128ec
   124a0:	00012960 	.word	0x00012960
   124a4:	0001267c 	.word	0x0001267c
   124a8:	00012960 	.word	0x00012960
   124ac:	00012960 	.word	0x00012960
   124b0:	000128e4 	.word	0x000128e4
   124b4:	e59b300c 	ldr	r3, [fp, #12]
   124b8:	e59b7004 	ldr	r7, [fp, #4]
   124bc:	e59b2008 	ldr	r2, [fp, #8]
   124c0:	e0437007 	sub	r7, r3, r7
   124c4:	e2871002 	add	r1, r7, #2
   124c8:	e1510002 	cmp	r1, r2
   124cc:	8a000020 	bhi	12554 <CString::FormatV(char const*, std::__va_list)+0x238>
   124d0:	e1a09006 	mov	r9, r6
   124d4:	e2832001 	add	r2, r3, #1
   124d8:	e58b200c 	str	r2, [fp, #12]
   124dc:	e5c34000 	strb	r4, [r3]
   124e0:	e1d940d0 	ldrsb	r4, [r9]
   124e4:	e3540000 	cmp	r4, #0
   124e8:	1affff9f 	bne	1236c <CString::FormatV(char const*, std::__va_list)+0x50>
   124ec:	e59b300c 	ldr	r3, [fp, #12]
   124f0:	e5c34000 	strb	r4, [r3]
   124f4:	e28dd034 	add	sp, sp, #52	; 0x34
   124f8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124fc:	e1d800d1 	ldrsb	r0, [r8, #1]
   12500:	e2403030 	sub	r3, r0, #48	; 0x30
   12504:	e6ef3073 	uxtb	r3, r3
   12508:	e3530009 	cmp	r3, #9
   1250c:	81a08009 	movhi	r8, r9
   12510:	83a01000 	movhi	r1, #0
   12514:	82899001 	addhi	r9, r9, #1
   12518:	8affffbc 	bhi	12410 <CString::FormatV(char const*, std::__va_list)+0xf4>
   1251c:	e3a01000 	mov	r1, #0
   12520:	e3a0200a 	mov	r2, #10
   12524:	ea000000 	b	1252c <CString::FormatV(char const*, std::__va_list)+0x210>
   12528:	e1a09008 	mov	r9, r8
   1252c:	e0210192 	mla	r1, r2, r1, r0
   12530:	e1d900d1 	ldrsb	r0, [r9, #1]
   12534:	e2898001 	add	r8, r9, #1
   12538:	e2403030 	sub	r3, r0, #48	; 0x30
   1253c:	e2411030 	sub	r1, r1, #48	; 0x30
   12540:	e6ef3073 	uxtb	r3, r3
   12544:	e3530009 	cmp	r3, #9
   12548:	9afffff6 	bls	12528 <CString::FormatV(char const*, std::__va_list)+0x20c>
   1254c:	e2899002 	add	r9, r9, #2
   12550:	eaffffae 	b	12410 <CString::FormatV(char const*, std::__va_list)+0xf4>
   12554:	e2878042 	add	r8, r7, #66	; 0x42
   12558:	e1a00008 	mov	r0, r8
   1255c:	eb001880 	bl	18764 <operator new[](unsigned int)>
   12560:	e59b300c 	ldr	r3, [fp, #12]
   12564:	e3a02000 	mov	r2, #0
   12568:	e1a09000 	mov	r9, r0
   1256c:	e5c32000 	strb	r2, [r3]
   12570:	e59b1004 	ldr	r1, [fp, #4]
   12574:	ebffe944 	bl	ca8c <strcpy>
   12578:	e59b0004 	ldr	r0, [fp, #4]
   1257c:	e3500000 	cmp	r0, #0
   12580:	0a000000 	beq	12588 <CString::FormatV(char const*, std::__va_list)+0x26c>
   12584:	eb001878 	bl	1876c <operator delete[](void*)>
   12588:	e0893007 	add	r3, r9, r7
   1258c:	e58b9004 	str	r9, [fp, #4]
   12590:	e58b8008 	str	r8, [fp, #8]
   12594:	eaffffcd 	b	124d0 <CString::FormatV(char const*, std::__va_list)+0x1b4>
   12598:	e1a08006 	mov	r8, r6
   1259c:	e3a04000 	mov	r4, #0
   125a0:	eaffff97 	b	12404 <CString::FormatV(char const*, std::__va_list)+0xe8>
   125a4:	e3a0e008 	mov	lr, #8
   125a8:	e595c000 	ldr	ip, [r5]
   125ac:	e2855004 	add	r5, r5, #4
   125b0:	e15c000e 	cmp	ip, lr
   125b4:	23a02001 	movcs	r2, #1
   125b8:	3a0001ba 	bcc	12ca8 <CString::FormatV(char const*, std::__va_list)+0x98c>
   125bc:	e002029e 	mul	r2, lr, r2
   125c0:	e731f21c 	udiv	r1, ip, r2
   125c4:	e15e0001 	cmp	lr, r1
   125c8:	e1a03001 	mov	r3, r1
   125cc:	9afffffa 	bls	125bc <CString::FormatV(char const*, std::__va_list)+0x2a0>
   125d0:	e3500058 	cmp	r0, #88	; 0x58
   125d4:	e28d6018 	add	r6, sp, #24
   125d8:	13a0a057 	movne	sl, #87	; 0x57
   125dc:	03a0a037 	moveq	sl, #55	; 0x37
   125e0:	e1a08006 	mov	r8, r6
   125e4:	ea000006 	b	12604 <CString::FormatV(char const*, std::__va_list)+0x2e8>
   125e8:	e2833030 	add	r3, r3, #48	; 0x30
   125ec:	e3520000 	cmp	r2, #0
   125f0:	e4c03001 	strb	r3, [r0], #1
   125f4:	0a00000c 	beq	1262c <CString::FormatV(char const*, std::__va_list)+0x310>
   125f8:	e731f21c 	udiv	r1, ip, r2
   125fc:	e1a08000 	mov	r8, r0
   12600:	e1a03001 	mov	r3, r1
   12604:	e06cc192 	mls	ip, r2, r1, ip
   12608:	e3530009 	cmp	r3, #9
   1260c:	e1a00008 	mov	r0, r8
   12610:	e6ef3073 	uxtb	r3, r3
   12614:	e732fe12 	udiv	r2, r2, lr
   12618:	9afffff2 	bls	125e8 <CString::FormatV(char const*, std::__va_list)+0x2cc>
   1261c:	e083300a 	add	r3, r3, sl
   12620:	e3520000 	cmp	r2, #0
   12624:	e4c03001 	strb	r3, [r0], #1
   12628:	1afffff2 	bne	125f8 <CString::FormatV(char const*, std::__va_list)+0x2dc>
   1262c:	e3a03000 	mov	r3, #0
   12630:	e1a00006 	mov	r0, r6
   12634:	e5c83001 	strb	r3, [r8, #1]
   12638:	ebffe8a9 	bl	c8e4 <strlen>
   1263c:	e3570000 	cmp	r7, #0
   12640:	e1a08000 	mov	r8, r0
   12644:	1a0000e3 	bne	129d8 <CString::FormatV(char const*, std::__va_list)+0x6bc>
   12648:	e1500004 	cmp	r0, r4
   1264c:	3a00011a 	bcc	12abc <CString::FormatV(char const*, std::__va_list)+0x7a0>
   12650:	e1a00006 	mov	r0, r6
   12654:	ebffe8a2 	bl	c8e4 <strlen>
   12658:	e2504000 	subs	r4, r0, #0
   1265c:	1a0000fc 	bne	12a54 <CString::FormatV(char const*, std::__va_list)+0x738>
   12660:	e59b000c 	ldr	r0, [fp, #12]
   12664:	e1a01006 	mov	r1, r6
   12668:	ebffe907 	bl	ca8c <strcpy>
   1266c:	e59b300c 	ldr	r3, [fp, #12]
   12670:	e0833004 	add	r3, r3, r4
   12674:	e58b300c 	str	r3, [fp, #12]
   12678:	eaffff38 	b	12360 <CString::FormatV(char const*, std::__va_list)+0x44>
   1267c:	e3a0e00a 	mov	lr, #10
   12680:	eaffffc8 	b	125a8 <CString::FormatV(char const*, std::__va_list)+0x28c>
   12684:	e2855007 	add	r5, r5, #7
   12688:	e28d6018 	add	r6, sp, #24
   1268c:	e3c53007 	bic	r3, r5, #7
   12690:	e1a00006 	mov	r0, r6
   12694:	e2835008 	add	r5, r3, #8
   12698:	ed930b00 	vldr	d0, [r3]
   1269c:	ebfffe16 	bl	11efc <CString::ftoa(char*, double, unsigned int)>
   126a0:	e1a00006 	mov	r0, r6
   126a4:	ebffe88e 	bl	c8e4 <strlen>
   126a8:	e3570000 	cmp	r7, #0
   126ac:	e1a0a000 	mov	sl, r0
   126b0:	1a0001fc 	bne	12ea8 <CString::FormatV(char const*, std::__va_list)+0xb8c>
   126b4:	e1500004 	cmp	r0, r4
   126b8:	3a00021c 	bcc	12f30 <CString::FormatV(char const*, std::__va_list)+0xc14>
   126bc:	e1a00006 	mov	r0, r6
   126c0:	ebffe887 	bl	c8e4 <strlen>
   126c4:	e2504000 	subs	r4, r0, #0
   126c8:	0affffe4 	beq	12660 <CString::FormatV(char const*, std::__va_list)+0x344>
   126cc:	e59b000c 	ldr	r0, [fp, #12]
   126d0:	e59ba004 	ldr	sl, [fp, #4]
   126d4:	e59b3008 	ldr	r3, [fp, #8]
   126d8:	e040a00a 	sub	sl, r0, sl
   126dc:	e084700a 	add	r7, r4, sl
   126e0:	e2872001 	add	r2, r7, #1
   126e4:	e1520003 	cmp	r2, r3
   126e8:	9affffdd 	bls	12664 <CString::FormatV(char const*, std::__va_list)+0x348>
   126ec:	e2877041 	add	r7, r7, #65	; 0x41
   126f0:	e1a00007 	mov	r0, r7
   126f4:	eb00181a 	bl	18764 <operator new[](unsigned int)>
   126f8:	e59b300c 	ldr	r3, [fp, #12]
   126fc:	e3a02000 	mov	r2, #0
   12700:	e1a08000 	mov	r8, r0
   12704:	e5c32000 	strb	r2, [r3]
   12708:	e59b1004 	ldr	r1, [fp, #4]
   1270c:	ebffe8de 	bl	ca8c <strcpy>
   12710:	e59b0004 	ldr	r0, [fp, #4]
   12714:	e3500000 	cmp	r0, #0
   12718:	0a000000 	beq	12720 <CString::FormatV(char const*, std::__va_list)+0x404>
   1271c:	eb001812 	bl	1876c <operator delete[](void*)>
   12720:	e088000a 	add	r0, r8, sl
   12724:	e58b8004 	str	r8, [fp, #4]
   12728:	e58b000c 	str	r0, [fp, #12]
   1272c:	e58b7008 	str	r7, [fp, #8]
   12730:	eaffffcb 	b	12664 <CString::FormatV(char const*, std::__va_list)+0x348>
   12734:	e5951000 	ldr	r1, [r5]
   12738:	e2853004 	add	r3, r5, #4
   1273c:	e58d300c 	str	r3, [sp, #12]
   12740:	e3510000 	cmp	r1, #0
   12744:	b2611000 	rsblt	r1, r1, #0
   12748:	b3a0a001 	movlt	sl, #1
   1274c:	a3a0a000 	movge	sl, #0
   12750:	e3510009 	cmp	r1, #9
   12754:	e1a0c001 	mov	ip, r1
   12758:	c3a02001 	movgt	r2, #1
   1275c:	c3a0000a 	movgt	r0, #10
   12760:	da0001ef 	ble	12f24 <CString::FormatV(char const*, std::__va_list)+0xc08>
   12764:	e0020290 	mul	r2, r0, r2
   12768:	e733f211 	udiv	r3, r1, r2
   1276c:	e3530009 	cmp	r3, #9
   12770:	8afffffb 	bhi	12764 <CString::FormatV(char const*, std::__va_list)+0x448>
   12774:	e28d6018 	add	r6, sp, #24
   12778:	e58d7010 	str	r7, [sp, #16]
   1277c:	e731f211 	udiv	r1, r1, r2
   12780:	e1a0e006 	mov	lr, r6
   12784:	e58d4014 	str	r4, [sp, #20]
   12788:	e59d5008 	ldr	r5, [sp, #8]
   1278c:	ea000006 	b	127ac <CString::FormatV(char const*, std::__va_list)+0x490>
   12790:	e2833030 	add	r3, r3, #48	; 0x30
   12794:	e1b021a8 	lsrs	r2, r8, #3
   12798:	e4c03001 	strb	r3, [r0], #1
   1279c:	0a00000c 	beq	127d4 <CString::FormatV(char const*, std::__va_list)+0x4b8>
   127a0:	e731f21c 	udiv	r1, ip, r2
   127a4:	e1a0e000 	mov	lr, r0
   127a8:	e1a03001 	mov	r3, r1
   127ac:	e3530009 	cmp	r3, #9
   127b0:	e1a0000e 	mov	r0, lr
   127b4:	e0887295 	umull	r7, r8, r5, r2
   127b8:	e6ef3073 	uxtb	r3, r3
   127bc:	e06cc192 	mls	ip, r2, r1, ip
   127c0:	9afffff2 	bls	12790 <CString::FormatV(char const*, std::__va_list)+0x474>
   127c4:	e2833057 	add	r3, r3, #87	; 0x57
   127c8:	e1b021a8 	lsrs	r2, r8, #3
   127cc:	e4c03001 	strb	r3, [r0], #1
   127d0:	1afffff2 	bne	127a0 <CString::FormatV(char const*, std::__va_list)+0x484>
   127d4:	e3a03000 	mov	r3, #0
   127d8:	e1a00006 	mov	r0, r6
   127dc:	e5ce3001 	strb	r3, [lr, #1]
   127e0:	e59d7010 	ldr	r7, [sp, #16]
   127e4:	e59d4014 	ldr	r4, [sp, #20]
   127e8:	ebffe83d 	bl	c8e4 <strlen>
   127ec:	e35a0000 	cmp	sl, #0
   127f0:	e1a05000 	mov	r5, r0
   127f4:	0a0000c7 	beq	12b18 <CString::FormatV(char const*, std::__va_list)+0x7fc>
   127f8:	e2805001 	add	r5, r0, #1
   127fc:	e3570000 	cmp	r7, #0
   12800:	1a00023a 	bne	130f0 <CString::FormatV(char const*, std::__va_list)+0xdd4>
   12804:	e59d3004 	ldr	r3, [sp, #4]
   12808:	e3530000 	cmp	r3, #0
   1280c:	1a0002d8 	bne	13374 <CString::FormatV(char const*, std::__va_list)+0x1058>
   12810:	e1540005 	cmp	r4, r5
   12814:	9a000014 	bls	1286c <CString::FormatV(char const*, std::__va_list)+0x550>
   12818:	e59b200c 	ldr	r2, [fp, #12]
   1281c:	e0444005 	sub	r4, r4, r5
   12820:	e59b8004 	ldr	r8, [fp, #4]
   12824:	e59b3008 	ldr	r3, [fp, #8]
   12828:	e0428008 	sub	r8, r2, r8
   1282c:	e0847008 	add	r7, r4, r8
   12830:	e2871001 	add	r1, r7, #1
   12834:	e1510003 	cmp	r1, r3
   12838:	8a00026d 	bhi	131f4 <CString::FormatV(char const*, std::__va_list)+0xed8>
   1283c:	e2444001 	sub	r4, r4, #1
   12840:	e3a01020 	mov	r1, #32
   12844:	ea000000 	b	1284c <CString::FormatV(char const*, std::__va_list)+0x530>
   12848:	e59b200c 	ldr	r2, [fp, #12]
   1284c:	e2444001 	sub	r4, r4, #1
   12850:	e2823001 	add	r3, r2, #1
   12854:	e3740001 	cmn	r4, #1
   12858:	e58b300c 	str	r3, [fp, #12]
   1285c:	e5c21000 	strb	r1, [r2]
   12860:	1afffff8 	bne	12848 <CString::FormatV(char const*, std::__va_list)+0x52c>
   12864:	e35a0000 	cmp	sl, #0
   12868:	0a000214 	beq	130c0 <CString::FormatV(char const*, std::__va_list)+0xda4>
   1286c:	e59b300c 	ldr	r3, [fp, #12]
   12870:	e59b4004 	ldr	r4, [fp, #4]
   12874:	e59b2008 	ldr	r2, [fp, #8]
   12878:	e0434004 	sub	r4, r3, r4
   1287c:	e2841002 	add	r1, r4, #2
   12880:	e1510002 	cmp	r1, r2
   12884:	8a00032f 	bhi	13548 <CString::FormatV(char const*, std::__va_list)+0x122c>
   12888:	e2832001 	add	r2, r3, #1
   1288c:	e58b200c 	str	r2, [fp, #12]
   12890:	e3a0202d 	mov	r2, #45	; 0x2d
   12894:	e5c32000 	strb	r2, [r3]
   12898:	ea000208 	b	130c0 <CString::FormatV(char const*, std::__va_list)+0xda4>
   1289c:	e59b300c 	ldr	r3, [fp, #12]
   128a0:	e3570000 	cmp	r7, #0
   128a4:	e59b2004 	ldr	r2, [fp, #4]
   128a8:	e2858004 	add	r8, r5, #4
   128ac:	e1d560d0 	ldrsb	r6, [r5]
   128b0:	e043a002 	sub	sl, r3, r2
   128b4:	e59b0008 	ldr	r0, [fp, #8]
   128b8:	1a000151 	bne	12e04 <CString::FormatV(char const*, std::__va_list)+0xae8>
   128bc:	e3540001 	cmp	r4, #1
   128c0:	8a0000cc 	bhi	12bf8 <CString::FormatV(char const*, std::__va_list)+0x8dc>
   128c4:	e28a1002 	add	r1, sl, #2
   128c8:	e1510000 	cmp	r1, r0
   128cc:	8a0000b4 	bhi	12ba4 <CString::FormatV(char const*, std::__va_list)+0x888>
   128d0:	e2832001 	add	r2, r3, #1
   128d4:	e1a05008 	mov	r5, r8
   128d8:	e58b200c 	str	r2, [fp, #12]
   128dc:	e5c36000 	strb	r6, [r3]
   128e0:	eafffe9e 	b	12360 <CString::FormatV(char const*, std::__va_list)+0x44>
   128e4:	e3a0e010 	mov	lr, #16
   128e8:	eaffff2e 	b	125a8 <CString::FormatV(char const*, std::__va_list)+0x28c>
   128ec:	e5956000 	ldr	r6, [r5]
   128f0:	e2855004 	add	r5, r5, #4
   128f4:	e1a00006 	mov	r0, r6
   128f8:	ebffe7f9 	bl	c8e4 <strlen>
   128fc:	e3570000 	cmp	r7, #0
   12900:	e1a0a000 	mov	sl, r0
   12904:	1a000148 	bne	12e2c <CString::FormatV(char const*, std::__va_list)+0xb10>
   12908:	e1500004 	cmp	r0, r4
   1290c:	2affff6a 	bcs	126bc <CString::FormatV(char const*, std::__va_list)+0x3a0>
   12910:	e59b000c 	ldr	r0, [fp, #12]
   12914:	e044400a 	sub	r4, r4, sl
   12918:	e59b3004 	ldr	r3, [fp, #4]
   1291c:	e59b2008 	ldr	r2, [fp, #8]
   12920:	e040a003 	sub	sl, r0, r3
   12924:	e084800a 	add	r8, r4, sl
   12928:	e2881001 	add	r1, r8, #1
   1292c:	e1510002 	cmp	r1, r2
   12930:	8a00021e 	bhi	131b0 <CString::FormatV(char const*, std::__va_list)+0xe94>
   12934:	e2443001 	sub	r3, r4, #1
   12938:	e3a01020 	mov	r1, #32
   1293c:	ea000000 	b	12944 <CString::FormatV(char const*, std::__va_list)+0x628>
   12940:	e59b000c 	ldr	r0, [fp, #12]
   12944:	e2433001 	sub	r3, r3, #1
   12948:	e2802001 	add	r2, r0, #1
   1294c:	e3730001 	cmn	r3, #1
   12950:	e58b200c 	str	r2, [fp, #12]
   12954:	e5c01000 	strb	r1, [r0]
   12958:	1afffff8 	bne	12940 <CString::FormatV(char const*, std::__va_list)+0x624>
   1295c:	eaffff56 	b	126bc <CString::FormatV(char const*, std::__va_list)+0x3a0>
   12960:	e99b000e 	ldmib	fp, {r1, r2, r3}
   12964:	e0434001 	sub	r4, r3, r1
   12968:	e2841002 	add	r1, r4, #2
   1296c:	e1510002 	cmp	r1, r2
   12970:	8a0000f2 	bhi	12d40 <CString::FormatV(char const*, std::__va_list)+0xa24>
   12974:	e2831001 	add	r1, r3, #1
   12978:	e3a02025 	mov	r2, #37	; 0x25
   1297c:	e58b100c 	str	r1, [fp, #12]
   12980:	e5c32000 	strb	r2, [r3]
   12984:	e99b000e 	ldmib	fp, {r1, r2, r3}
   12988:	e1d860d0 	ldrsb	r6, [r8]
   1298c:	e0434001 	sub	r4, r3, r1
   12990:	e2841002 	add	r1, r4, #2
   12994:	e1510002 	cmp	r1, r2
   12998:	8a0000d7 	bhi	12cfc <CString::FormatV(char const*, std::__va_list)+0x9e0>
   1299c:	e2832001 	add	r2, r3, #1
   129a0:	e58b200c 	str	r2, [fp, #12]
   129a4:	e5c36000 	strb	r6, [r3]
   129a8:	eafffe6c 	b	12360 <CString::FormatV(char const*, std::__va_list)+0x44>
   129ac:	e99b000e 	ldmib	fp, {r1, r2, r3}
   129b0:	e0434001 	sub	r4, r3, r1
   129b4:	e2841002 	add	r1, r4, #2
   129b8:	e1510002 	cmp	r1, r2
   129bc:	8a0000bd 	bhi	12cb8 <CString::FormatV(char const*, std::__va_list)+0x99c>
   129c0:	e2832001 	add	r2, r3, #1
   129c4:	e2899002 	add	r9, r9, #2
   129c8:	e58b200c 	str	r2, [fp, #12]
   129cc:	e3a02025 	mov	r2, #37	; 0x25
   129d0:	e5c32000 	strb	r2, [r3]
   129d4:	eafffe61 	b	12360 <CString::FormatV(char const*, std::__va_list)+0x44>
   129d8:	e1a00006 	mov	r0, r6
   129dc:	ebffe7c0 	bl	c8e4 <strlen>
   129e0:	e2507000 	subs	r7, r0, #0
   129e4:	e59b000c 	ldr	r0, [fp, #12]
   129e8:	1a0000e5 	bne	12d84 <CString::FormatV(char const*, std::__va_list)+0xa68>
   129ec:	e1a01006 	mov	r1, r6
   129f0:	ebffe825 	bl	ca8c <strcpy>
   129f4:	e59b300c 	ldr	r3, [fp, #12]
   129f8:	e1580004 	cmp	r8, r4
   129fc:	e0833007 	add	r3, r3, r7
   12a00:	e58b300c 	str	r3, [fp, #12]
   12a04:	2afffe55 	bcs	12360 <CString::FormatV(char const*, std::__va_list)+0x44>
   12a08:	e59b6004 	ldr	r6, [fp, #4]
   12a0c:	e0444008 	sub	r4, r4, r8
   12a10:	e59b1008 	ldr	r1, [fp, #8]
   12a14:	e0436006 	sub	r6, r3, r6
   12a18:	e0842006 	add	r2, r4, r6
   12a1c:	e2820001 	add	r0, r2, #1
   12a20:	e1500001 	cmp	r0, r1
   12a24:	8a000230 	bhi	132ec <CString::FormatV(char const*, std::__va_list)+0xfd0>
   12a28:	e2442001 	sub	r2, r4, #1
   12a2c:	e3a00020 	mov	r0, #32
   12a30:	ea000000 	b	12a38 <CString::FormatV(char const*, std::__va_list)+0x71c>
   12a34:	e59b300c 	ldr	r3, [fp, #12]
   12a38:	e2422001 	sub	r2, r2, #1
   12a3c:	e2831001 	add	r1, r3, #1
   12a40:	e3720001 	cmn	r2, #1
   12a44:	e58b100c 	str	r1, [fp, #12]
   12a48:	e5c30000 	strb	r0, [r3]
   12a4c:	1afffff8 	bne	12a34 <CString::FormatV(char const*, std::__va_list)+0x718>
   12a50:	eafffe42 	b	12360 <CString::FormatV(char const*, std::__va_list)+0x44>
   12a54:	e59b3004 	ldr	r3, [fp, #4]
   12a58:	e59b000c 	ldr	r0, [fp, #12]
   12a5c:	e59b2008 	ldr	r2, [fp, #8]
   12a60:	e0407003 	sub	r7, r0, r3
   12a64:	e0843007 	add	r3, r4, r7
   12a68:	e2831001 	add	r1, r3, #1
   12a6c:	e1510002 	cmp	r1, r2
   12a70:	9afffefb 	bls	12664 <CString::FormatV(char const*, std::__va_list)+0x348>
   12a74:	e2838041 	add	r8, r3, #65	; 0x41
   12a78:	e1a00008 	mov	r0, r8
   12a7c:	eb001738 	bl	18764 <operator new[](unsigned int)>
   12a80:	e59b300c 	ldr	r3, [fp, #12]
   12a84:	e3a02000 	mov	r2, #0
   12a88:	e1a0a000 	mov	sl, r0
   12a8c:	e5c32000 	strb	r2, [r3]
   12a90:	e59b1004 	ldr	r1, [fp, #4]
   12a94:	ebffe7fc 	bl	ca8c <strcpy>
   12a98:	e59b0004 	ldr	r0, [fp, #4]
   12a9c:	e3500000 	cmp	r0, #0
   12aa0:	0a000000 	beq	12aa8 <CString::FormatV(char const*, std::__va_list)+0x78c>
   12aa4:	eb001730 	bl	1876c <operator delete[](void*)>
   12aa8:	e08a0007 	add	r0, sl, r7
   12aac:	e58ba004 	str	sl, [fp, #4]
   12ab0:	e58b000c 	str	r0, [fp, #12]
   12ab4:	e58b8008 	str	r8, [fp, #8]
   12ab8:	eafffee9 	b	12664 <CString::FormatV(char const*, std::__va_list)+0x348>
   12abc:	e59b200c 	ldr	r2, [fp, #12]
   12ac0:	e0444000 	sub	r4, r4, r0
   12ac4:	e59b8004 	ldr	r8, [fp, #4]
   12ac8:	e59d3004 	ldr	r3, [sp, #4]
   12acc:	e0428008 	sub	r8, r2, r8
   12ad0:	e59b1008 	ldr	r1, [fp, #8]
   12ad4:	e3530000 	cmp	r3, #0
   12ad8:	e0843008 	add	r3, r4, r8
   12adc:	e2830001 	add	r0, r3, #1
   12ae0:	03a07020 	moveq	r7, #32
   12ae4:	13a07030 	movne	r7, #48	; 0x30
   12ae8:	e1500001 	cmp	r0, r1
   12aec:	8a000019 	bhi	12b58 <CString::FormatV(char const*, std::__va_list)+0x83c>
   12af0:	e2443001 	sub	r3, r4, #1
   12af4:	ea000000 	b	12afc <CString::FormatV(char const*, std::__va_list)+0x7e0>
   12af8:	e59b200c 	ldr	r2, [fp, #12]
   12afc:	e2433001 	sub	r3, r3, #1
   12b00:	e2821001 	add	r1, r2, #1
   12b04:	e3730001 	cmn	r3, #1
   12b08:	e58b100c 	str	r1, [fp, #12]
   12b0c:	e5c27000 	strb	r7, [r2]
   12b10:	1afffff8 	bne	12af8 <CString::FormatV(char const*, std::__va_list)+0x7dc>
   12b14:	eafffecd 	b	12650 <CString::FormatV(char const*, std::__va_list)+0x334>
   12b18:	e3570000 	cmp	r7, #0
   12b1c:	0a000162 	beq	130ac <CString::FormatV(char const*, std::__va_list)+0xd90>
   12b20:	e1a00006 	mov	r0, r6
   12b24:	ebffe76e 	bl	c8e4 <strlen>
   12b28:	e2507000 	subs	r7, r0, #0
   12b2c:	e59b000c 	ldr	r0, [fp, #12]
   12b30:	1a000042 	bne	12c40 <CString::FormatV(char const*, std::__va_list)+0x924>
   12b34:	e1a01006 	mov	r1, r6
   12b38:	ebffe7d3 	bl	ca8c <strcpy>
   12b3c:	e59b300c 	ldr	r3, [fp, #12]
   12b40:	e1540005 	cmp	r4, r5
   12b44:	e0837007 	add	r7, r3, r7
   12b48:	e58b700c 	str	r7, [fp, #12]
   12b4c:	8a000173 	bhi	13120 <CString::FormatV(char const*, std::__va_list)+0xe04>
   12b50:	e59d500c 	ldr	r5, [sp, #12]
   12b54:	eafffe01 	b	12360 <CString::FormatV(char const*, std::__va_list)+0x44>
   12b58:	e283a041 	add	sl, r3, #65	; 0x41
   12b5c:	e1a0000a 	mov	r0, sl
   12b60:	eb0016ff 	bl	18764 <operator new[](unsigned int)>
   12b64:	e59b300c 	ldr	r3, [fp, #12]
   12b68:	e3a02000 	mov	r2, #0
   12b6c:	e58d0004 	str	r0, [sp, #4]
   12b70:	e5c32000 	strb	r2, [r3]
   12b74:	e59b1004 	ldr	r1, [fp, #4]
   12b78:	ebffe7c3 	bl	ca8c <strcpy>
   12b7c:	e59b0004 	ldr	r0, [fp, #4]
   12b80:	e59d2004 	ldr	r2, [sp, #4]
   12b84:	e3500000 	cmp	r0, #0
   12b88:	0a000001 	beq	12b94 <CString::FormatV(char const*, std::__va_list)+0x878>
   12b8c:	eb0016f6 	bl	1876c <operator delete[](void*)>
   12b90:	e59d2004 	ldr	r2, [sp, #4]
   12b94:	e58b2004 	str	r2, [fp, #4]
   12b98:	e0822008 	add	r2, r2, r8
   12b9c:	e58ba008 	str	sl, [fp, #8]
   12ba0:	eaffffd2 	b	12af0 <CString::FormatV(char const*, std::__va_list)+0x7d4>
   12ba4:	e28a4042 	add	r4, sl, #66	; 0x42
   12ba8:	e1a00004 	mov	r0, r4
   12bac:	eb0016ec 	bl	18764 <operator new[](unsigned int)>
   12bb0:	e59b300c 	ldr	r3, [fp, #12]
   12bb4:	e3a02000 	mov	r2, #0
   12bb8:	e1a05000 	mov	r5, r0
   12bbc:	e5c32000 	strb	r2, [r3]
   12bc0:	e59b1004 	ldr	r1, [fp, #4]
   12bc4:	ebffe7b0 	bl	ca8c <strcpy>
   12bc8:	e59b0004 	ldr	r0, [fp, #4]
   12bcc:	e3500000 	cmp	r0, #0
   12bd0:	0a000000 	beq	12bd8 <CString::FormatV(char const*, std::__va_list)+0x8bc>
   12bd4:	eb0016e4 	bl	1876c <operator delete[](void*)>
   12bd8:	e085300a 	add	r3, r5, sl
   12bdc:	e58b5004 	str	r5, [fp, #4]
   12be0:	e58b4008 	str	r4, [fp, #8]
   12be4:	e2832001 	add	r2, r3, #1
   12be8:	e1a05008 	mov	r5, r8
   12bec:	e58b200c 	str	r2, [fp, #12]
   12bf0:	e5c36000 	strb	r6, [r3]
   12bf4:	eafffdd9 	b	12360 <CString::FormatV(char const*, std::__va_list)+0x44>
   12bf8:	e2445001 	sub	r5, r4, #1
   12bfc:	e085500a 	add	r5, r5, sl
   12c00:	e2851001 	add	r1, r5, #1
   12c04:	e1510000 	cmp	r1, r0
   12c08:	8a0001c8 	bhi	13330 <CString::FormatV(char const*, std::__va_list)+0x1014>
   12c0c:	e2444002 	sub	r4, r4, #2
   12c10:	e3a01020 	mov	r1, #32
   12c14:	e2832001 	add	r2, r3, #1
   12c18:	e2444001 	sub	r4, r4, #1
   12c1c:	e58b200c 	str	r2, [fp, #12]
   12c20:	e3740001 	cmn	r4, #1
   12c24:	e5c31000 	strb	r1, [r3]
   12c28:	e59b300c 	ldr	r3, [fp, #12]
   12c2c:	1afffff8 	bne	12c14 <CString::FormatV(char const*, std::__va_list)+0x8f8>
   12c30:	e59b2004 	ldr	r2, [fp, #4]
   12c34:	e59b0008 	ldr	r0, [fp, #8]
   12c38:	e043a002 	sub	sl, r3, r2
   12c3c:	eaffff20 	b	128c4 <CString::FormatV(char const*, std::__va_list)+0x5a8>
   12c40:	e59b3004 	ldr	r3, [fp, #4]
   12c44:	e59b2008 	ldr	r2, [fp, #8]
   12c48:	e0408003 	sub	r8, r0, r3
   12c4c:	e087a008 	add	sl, r7, r8
   12c50:	e28a1001 	add	r1, sl, #1
   12c54:	e1510002 	cmp	r1, r2
   12c58:	9affffb5 	bls	12b34 <CString::FormatV(char const*, std::__va_list)+0x818>
   12c5c:	e28aa041 	add	sl, sl, #65	; 0x41
   12c60:	e1a0000a 	mov	r0, sl
   12c64:	eb0016be 	bl	18764 <operator new[](unsigned int)>
   12c68:	e59b200c 	ldr	r2, [fp, #12]
   12c6c:	e3a03000 	mov	r3, #0
   12c70:	e58d0004 	str	r0, [sp, #4]
   12c74:	e5c23000 	strb	r3, [r2]
   12c78:	e59b1004 	ldr	r1, [fp, #4]
   12c7c:	ebffe782 	bl	ca8c <strcpy>
   12c80:	e59b0004 	ldr	r0, [fp, #4]
   12c84:	e3500000 	cmp	r0, #0
   12c88:	0a000000 	beq	12c90 <CString::FormatV(char const*, std::__va_list)+0x974>
   12c8c:	eb0016b6 	bl	1876c <operator delete[](void*)>
   12c90:	e59d3004 	ldr	r3, [sp, #4]
   12c94:	e58b3004 	str	r3, [fp, #4]
   12c98:	e0830008 	add	r0, r3, r8
   12c9c:	e58ba008 	str	sl, [fp, #8]
   12ca0:	e58b000c 	str	r0, [fp, #12]
   12ca4:	eaffffa2 	b	12b34 <CString::FormatV(char const*, std::__va_list)+0x818>
   12ca8:	e1a0300c 	mov	r3, ip
   12cac:	e3a02001 	mov	r2, #1
   12cb0:	e1a0100c 	mov	r1, ip
   12cb4:	eafffe45 	b	125d0 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   12cb8:	e2846042 	add	r6, r4, #66	; 0x42
   12cbc:	e1a00006 	mov	r0, r6
   12cc0:	eb0016a7 	bl	18764 <operator new[](unsigned int)>
   12cc4:	e59b300c 	ldr	r3, [fp, #12]
   12cc8:	e3a02000 	mov	r2, #0
   12ccc:	e1a07000 	mov	r7, r0
   12cd0:	e5c32000 	strb	r2, [r3]
   12cd4:	e59b1004 	ldr	r1, [fp, #4]
   12cd8:	ebffe76b 	bl	ca8c <strcpy>
   12cdc:	e59b0004 	ldr	r0, [fp, #4]
   12ce0:	e3500000 	cmp	r0, #0
   12ce4:	0a000000 	beq	12cec <CString::FormatV(char const*, std::__va_list)+0x9d0>
   12ce8:	eb00169f 	bl	1876c <operator delete[](void*)>
   12cec:	e0873004 	add	r3, r7, r4
   12cf0:	e58b7004 	str	r7, [fp, #4]
   12cf4:	e58b6008 	str	r6, [fp, #8]
   12cf8:	eaffff30 	b	129c0 <CString::FormatV(char const*, std::__va_list)+0x6a4>
   12cfc:	e2847042 	add	r7, r4, #66	; 0x42
   12d00:	e1a00007 	mov	r0, r7
   12d04:	eb001696 	bl	18764 <operator new[](unsigned int)>
   12d08:	e59b300c 	ldr	r3, [fp, #12]
   12d0c:	e3a02000 	mov	r2, #0
   12d10:	e1a08000 	mov	r8, r0
   12d14:	e5c32000 	strb	r2, [r3]
   12d18:	e59b1004 	ldr	r1, [fp, #4]
   12d1c:	ebffe75a 	bl	ca8c <strcpy>
   12d20:	e59b0004 	ldr	r0, [fp, #4]
   12d24:	e3500000 	cmp	r0, #0
   12d28:	0a000000 	beq	12d30 <CString::FormatV(char const*, std::__va_list)+0xa14>
   12d2c:	eb00168e 	bl	1876c <operator delete[](void*)>
   12d30:	e0883004 	add	r3, r8, r4
   12d34:	e58b8004 	str	r8, [fp, #4]
   12d38:	e58b7008 	str	r7, [fp, #8]
   12d3c:	eaffff16 	b	1299c <CString::FormatV(char const*, std::__va_list)+0x680>
   12d40:	e2846042 	add	r6, r4, #66	; 0x42
   12d44:	e1a00006 	mov	r0, r6
   12d48:	eb001685 	bl	18764 <operator new[](unsigned int)>
   12d4c:	e59b300c 	ldr	r3, [fp, #12]
   12d50:	e3a02000 	mov	r2, #0
   12d54:	e1a07000 	mov	r7, r0
   12d58:	e5c32000 	strb	r2, [r3]
   12d5c:	e59b1004 	ldr	r1, [fp, #4]
   12d60:	ebffe749 	bl	ca8c <strcpy>
   12d64:	e59b0004 	ldr	r0, [fp, #4]
   12d68:	e3500000 	cmp	r0, #0
   12d6c:	0a000000 	beq	12d74 <CString::FormatV(char const*, std::__va_list)+0xa58>
   12d70:	eb00167d 	bl	1876c <operator delete[](void*)>
   12d74:	e0873004 	add	r3, r7, r4
   12d78:	e58b7004 	str	r7, [fp, #4]
   12d7c:	e58b6008 	str	r6, [fp, #8]
   12d80:	eafffefb 	b	12974 <CString::FormatV(char const*, std::__va_list)+0x658>
   12d84:	e59ba004 	ldr	sl, [fp, #4]
   12d88:	e59b2008 	ldr	r2, [fp, #8]
   12d8c:	e040a00a 	sub	sl, r0, sl
   12d90:	e087300a 	add	r3, r7, sl
   12d94:	e2831001 	add	r1, r3, #1
   12d98:	e1510002 	cmp	r1, r2
   12d9c:	9affff12 	bls	129ec <CString::FormatV(char const*, std::__va_list)+0x6d0>
   12da0:	e2833041 	add	r3, r3, #65	; 0x41
   12da4:	e58d300c 	str	r3, [sp, #12]
   12da8:	e1a00003 	mov	r0, r3
   12dac:	eb00166c 	bl	18764 <operator new[](unsigned int)>
   12db0:	e59b100c 	ldr	r1, [fp, #12]
   12db4:	e3a03000 	mov	r3, #0
   12db8:	e58d0004 	str	r0, [sp, #4]
   12dbc:	e5c13000 	strb	r3, [r1]
   12dc0:	e59b1004 	ldr	r1, [fp, #4]
   12dc4:	ebffe730 	bl	ca8c <strcpy>
   12dc8:	e59b0004 	ldr	r0, [fp, #4]
   12dcc:	e59d2004 	ldr	r2, [sp, #4]
   12dd0:	e3500000 	cmp	r0, #0
   12dd4:	e59d300c 	ldr	r3, [sp, #12]
   12dd8:	0a000004 	beq	12df0 <CString::FormatV(char const*, std::__va_list)+0xad4>
   12ddc:	e58d200c 	str	r2, [sp, #12]
   12de0:	e58d3004 	str	r3, [sp, #4]
   12de4:	eb001660 	bl	1876c <operator delete[](void*)>
   12de8:	e59d200c 	ldr	r2, [sp, #12]
   12dec:	e59d3004 	ldr	r3, [sp, #4]
   12df0:	e082000a 	add	r0, r2, sl
   12df4:	e58b2004 	str	r2, [fp, #4]
   12df8:	e58b000c 	str	r0, [fp, #12]
   12dfc:	e58b3008 	str	r3, [fp, #8]
   12e00:	eafffef9 	b	129ec <CString::FormatV(char const*, std::__va_list)+0x6d0>
   12e04:	e28a1002 	add	r1, sl, #2
   12e08:	e1510000 	cmp	r1, r0
   12e0c:	8a000078 	bhi	12ff4 <CString::FormatV(char const*, std::__va_list)+0xcd8>
   12e10:	e2832001 	add	r2, r3, #1
   12e14:	e3540001 	cmp	r4, #1
   12e18:	e58b200c 	str	r2, [fp, #12]
   12e1c:	e5c36000 	strb	r6, [r3]
   12e20:	8a00011d 	bhi	1329c <CString::FormatV(char const*, std::__va_list)+0xf80>
   12e24:	e1a05008 	mov	r5, r8
   12e28:	eafffd4c 	b	12360 <CString::FormatV(char const*, std::__va_list)+0x44>
   12e2c:	e1a00006 	mov	r0, r6
   12e30:	ebffe6ab 	bl	c8e4 <strlen>
   12e34:	e2507000 	subs	r7, r0, #0
   12e38:	e59b000c 	ldr	r0, [fp, #12]
   12e3c:	1a00004f 	bne	12f80 <CString::FormatV(char const*, std::__va_list)+0xc64>
   12e40:	e1a01006 	mov	r1, r6
   12e44:	ebffe710 	bl	ca8c <strcpy>
   12e48:	e59b200c 	ldr	r2, [fp, #12]
   12e4c:	e15a0004 	cmp	sl, r4
   12e50:	e0827007 	add	r7, r2, r7
   12e54:	e58b700c 	str	r7, [fp, #12]
   12e58:	2afffd40 	bcs	12360 <CString::FormatV(char const*, std::__va_list)+0x44>
   12e5c:	e59b8004 	ldr	r8, [fp, #4]
   12e60:	e044400a 	sub	r4, r4, sl
   12e64:	e59b3008 	ldr	r3, [fp, #8]
   12e68:	e0478008 	sub	r8, r7, r8
   12e6c:	e0846008 	add	r6, r4, r8
   12e70:	e2862001 	add	r2, r6, #1
   12e74:	e1520003 	cmp	r2, r3
   12e78:	8a00016b 	bhi	1342c <CString::FormatV(char const*, std::__va_list)+0x1110>
   12e7c:	e2443001 	sub	r3, r4, #1
   12e80:	e3a01020 	mov	r1, #32
   12e84:	ea000000 	b	12e8c <CString::FormatV(char const*, std::__va_list)+0xb70>
   12e88:	e59b700c 	ldr	r7, [fp, #12]
   12e8c:	e2433001 	sub	r3, r3, #1
   12e90:	e2872001 	add	r2, r7, #1
   12e94:	e3730001 	cmn	r3, #1
   12e98:	e58b200c 	str	r2, [fp, #12]
   12e9c:	e5c71000 	strb	r1, [r7]
   12ea0:	1afffff8 	bne	12e88 <CString::FormatV(char const*, std::__va_list)+0xb6c>
   12ea4:	eafffd2d 	b	12360 <CString::FormatV(char const*, std::__va_list)+0x44>
   12ea8:	e1a00006 	mov	r0, r6
   12eac:	ebffe68c 	bl	c8e4 <strlen>
   12eb0:	e2507000 	subs	r7, r0, #0
   12eb4:	e59b000c 	ldr	r0, [fp, #12]
   12eb8:	1a00005e 	bne	13038 <CString::FormatV(char const*, std::__va_list)+0xd1c>
   12ebc:	e1a01006 	mov	r1, r6
   12ec0:	ebffe6f1 	bl	ca8c <strcpy>
   12ec4:	e59b200c 	ldr	r2, [fp, #12]
   12ec8:	e15a0004 	cmp	sl, r4
   12ecc:	e0827007 	add	r7, r2, r7
   12ed0:	e58b700c 	str	r7, [fp, #12]
   12ed4:	2afffd21 	bcs	12360 <CString::FormatV(char const*, std::__va_list)+0x44>
   12ed8:	e59b8004 	ldr	r8, [fp, #4]
   12edc:	e044400a 	sub	r4, r4, sl
   12ee0:	e59b3008 	ldr	r3, [fp, #8]
   12ee4:	e0478008 	sub	r8, r7, r8
   12ee8:	e0846008 	add	r6, r4, r8
   12eec:	e2862001 	add	r2, r6, #1
   12ef0:	e1520003 	cmp	r2, r3
   12ef4:	8a00015d 	bhi	13470 <CString::FormatV(char const*, std::__va_list)+0x1154>
   12ef8:	e2443001 	sub	r3, r4, #1
   12efc:	e3a01020 	mov	r1, #32
   12f00:	ea000000 	b	12f08 <CString::FormatV(char const*, std::__va_list)+0xbec>
   12f04:	e59b700c 	ldr	r7, [fp, #12]
   12f08:	e2433001 	sub	r3, r3, #1
   12f0c:	e2872001 	add	r2, r7, #1
   12f10:	e3730001 	cmn	r3, #1
   12f14:	e58b200c 	str	r2, [fp, #12]
   12f18:	e5c71000 	strb	r1, [r7]
   12f1c:	1afffff8 	bne	12f04 <CString::FormatV(char const*, std::__va_list)+0xbe8>
   12f20:	eafffd0e 	b	12360 <CString::FormatV(char const*, std::__va_list)+0x44>
   12f24:	e1a03001 	mov	r3, r1
   12f28:	e3a02001 	mov	r2, #1
   12f2c:	eafffe10 	b	12774 <CString::FormatV(char const*, std::__va_list)+0x458>
   12f30:	e59b000c 	ldr	r0, [fp, #12]
   12f34:	e044400a 	sub	r4, r4, sl
   12f38:	e59b3004 	ldr	r3, [fp, #4]
   12f3c:	e59b2008 	ldr	r2, [fp, #8]
   12f40:	e040a003 	sub	sl, r0, r3
   12f44:	e084800a 	add	r8, r4, sl
   12f48:	e2881001 	add	r1, r8, #1
   12f4c:	e1510002 	cmp	r1, r2
   12f50:	8a000085 	bhi	1316c <CString::FormatV(char const*, std::__va_list)+0xe50>
   12f54:	e2443001 	sub	r3, r4, #1
   12f58:	e3a01020 	mov	r1, #32
   12f5c:	ea000000 	b	12f64 <CString::FormatV(char const*, std::__va_list)+0xc48>
   12f60:	e59b000c 	ldr	r0, [fp, #12]
   12f64:	e2433001 	sub	r3, r3, #1
   12f68:	e2802001 	add	r2, r0, #1
   12f6c:	e3730001 	cmn	r3, #1
   12f70:	e58b200c 	str	r2, [fp, #12]
   12f74:	e5c01000 	strb	r1, [r0]
   12f78:	1afffff8 	bne	12f60 <CString::FormatV(char const*, std::__va_list)+0xc44>
   12f7c:	eafffdce 	b	126bc <CString::FormatV(char const*, std::__va_list)+0x3a0>
   12f80:	e59b2004 	ldr	r2, [fp, #4]
   12f84:	e59b1008 	ldr	r1, [fp, #8]
   12f88:	e0402002 	sub	r2, r0, r2
   12f8c:	e0878002 	add	r8, r7, r2
   12f90:	e288c001 	add	ip, r8, #1
   12f94:	e15c0001 	cmp	ip, r1
   12f98:	9affffa8 	bls	12e40 <CString::FormatV(char const*, std::__va_list)+0xb24>
   12f9c:	e2888041 	add	r8, r8, #65	; 0x41
   12fa0:	e58d200c 	str	r2, [sp, #12]
   12fa4:	e1a00008 	mov	r0, r8
   12fa8:	eb0015ed 	bl	18764 <operator new[](unsigned int)>
   12fac:	e59b100c 	ldr	r1, [fp, #12]
   12fb0:	e3a03000 	mov	r3, #0
   12fb4:	e58d0004 	str	r0, [sp, #4]
   12fb8:	e5c13000 	strb	r3, [r1]
   12fbc:	e59b1004 	ldr	r1, [fp, #4]
   12fc0:	ebffe6b1 	bl	ca8c <strcpy>
   12fc4:	e59b0004 	ldr	r0, [fp, #4]
   12fc8:	e59d200c 	ldr	r2, [sp, #12]
   12fcc:	e3500000 	cmp	r0, #0
   12fd0:	0a000001 	beq	12fdc <CString::FormatV(char const*, std::__va_list)+0xcc0>
   12fd4:	eb0015e4 	bl	1876c <operator delete[](void*)>
   12fd8:	e59d200c 	ldr	r2, [sp, #12]
   12fdc:	e59d3004 	ldr	r3, [sp, #4]
   12fe0:	e58b3004 	str	r3, [fp, #4]
   12fe4:	e0830002 	add	r0, r3, r2
   12fe8:	e58b8008 	str	r8, [fp, #8]
   12fec:	e58b000c 	str	r0, [fp, #12]
   12ff0:	eaffff92 	b	12e40 <CString::FormatV(char const*, std::__va_list)+0xb24>
   12ff4:	e28a5042 	add	r5, sl, #66	; 0x42
   12ff8:	e1a00005 	mov	r0, r5
   12ffc:	eb0015d8 	bl	18764 <operator new[](unsigned int)>
   13000:	e59b300c 	ldr	r3, [fp, #12]
   13004:	e3a02000 	mov	r2, #0
   13008:	e1a07000 	mov	r7, r0
   1300c:	e5c32000 	strb	r2, [r3]
   13010:	e59b1004 	ldr	r1, [fp, #4]
   13014:	ebffe69c 	bl	ca8c <strcpy>
   13018:	e59b0004 	ldr	r0, [fp, #4]
   1301c:	e3500000 	cmp	r0, #0
   13020:	0a000000 	beq	13028 <CString::FormatV(char const*, std::__va_list)+0xd0c>
   13024:	eb0015d0 	bl	1876c <operator delete[](void*)>
   13028:	e087300a 	add	r3, r7, sl
   1302c:	e58b7004 	str	r7, [fp, #4]
   13030:	e58b5008 	str	r5, [fp, #8]
   13034:	eaffff75 	b	12e10 <CString::FormatV(char const*, std::__va_list)+0xaf4>
   13038:	e59b2004 	ldr	r2, [fp, #4]
   1303c:	e59b1008 	ldr	r1, [fp, #8]
   13040:	e0402002 	sub	r2, r0, r2
   13044:	e0878002 	add	r8, r7, r2
   13048:	e288c001 	add	ip, r8, #1
   1304c:	e15c0001 	cmp	ip, r1
   13050:	9affff99 	bls	12ebc <CString::FormatV(char const*, std::__va_list)+0xba0>
   13054:	e2888041 	add	r8, r8, #65	; 0x41
   13058:	e58d200c 	str	r2, [sp, #12]
   1305c:	e1a00008 	mov	r0, r8
   13060:	eb0015bf 	bl	18764 <operator new[](unsigned int)>
   13064:	e59b100c 	ldr	r1, [fp, #12]
   13068:	e3a03000 	mov	r3, #0
   1306c:	e58d0004 	str	r0, [sp, #4]
   13070:	e5c13000 	strb	r3, [r1]
   13074:	e59b1004 	ldr	r1, [fp, #4]
   13078:	ebffe683 	bl	ca8c <strcpy>
   1307c:	e59b0004 	ldr	r0, [fp, #4]
   13080:	e59d200c 	ldr	r2, [sp, #12]
   13084:	e3500000 	cmp	r0, #0
   13088:	0a000001 	beq	13094 <CString::FormatV(char const*, std::__va_list)+0xd78>
   1308c:	eb0015b6 	bl	1876c <operator delete[](void*)>
   13090:	e59d200c 	ldr	r2, [sp, #12]
   13094:	e59d3004 	ldr	r3, [sp, #4]
   13098:	e58b3004 	str	r3, [fp, #4]
   1309c:	e0830002 	add	r0, r3, r2
   130a0:	e58b8008 	str	r8, [fp, #8]
   130a4:	e58b000c 	str	r0, [fp, #12]
   130a8:	eaffff83 	b	12ebc <CString::FormatV(char const*, std::__va_list)+0xba0>
   130ac:	e59d3004 	ldr	r3, [sp, #4]
   130b0:	e3530000 	cmp	r3, #0
   130b4:	0a000157 	beq	13618 <CString::FormatV(char const*, std::__va_list)+0x12fc>
   130b8:	e1550004 	cmp	r5, r4
   130bc:	3a0000fc 	bcc	134b4 <CString::FormatV(char const*, std::__va_list)+0x1198>
   130c0:	e1a00006 	mov	r0, r6
   130c4:	ebffe606 	bl	c8e4 <strlen>
   130c8:	e2504000 	subs	r4, r0, #0
   130cc:	e59b000c 	ldr	r0, [fp, #12]
   130d0:	1a000058 	bne	13238 <CString::FormatV(char const*, std::__va_list)+0xf1c>
   130d4:	e1a01006 	mov	r1, r6
   130d8:	ebffe66b 	bl	ca8c <strcpy>
   130dc:	e59b300c 	ldr	r3, [fp, #12]
   130e0:	e59d500c 	ldr	r5, [sp, #12]
   130e4:	e0833004 	add	r3, r3, r4
   130e8:	e58b300c 	str	r3, [fp, #12]
   130ec:	eafffc9b 	b	12360 <CString::FormatV(char const*, std::__va_list)+0x44>
   130f0:	e59b300c 	ldr	r3, [fp, #12]
   130f4:	e59ba004 	ldr	sl, [fp, #4]
   130f8:	e59b2008 	ldr	r2, [fp, #8]
   130fc:	e043a00a 	sub	sl, r3, sl
   13100:	e28a1002 	add	r1, sl, #2
   13104:	e1510002 	cmp	r1, r2
   13108:	8a0000b6 	bhi	133e8 <CString::FormatV(char const*, std::__va_list)+0x10cc>
   1310c:	e2832001 	add	r2, r3, #1
   13110:	e58b200c 	str	r2, [fp, #12]
   13114:	e3a0202d 	mov	r2, #45	; 0x2d
   13118:	e5c32000 	strb	r2, [r3]
   1311c:	eafffe7f 	b	12b20 <CString::FormatV(char const*, std::__va_list)+0x804>
   13120:	e59b3004 	ldr	r3, [fp, #4]
   13124:	e0444005 	sub	r4, r4, r5
   13128:	e59b2008 	ldr	r2, [fp, #8]
   1312c:	e0475003 	sub	r5, r7, r3
   13130:	e0853004 	add	r3, r5, r4
   13134:	e2831001 	add	r1, r3, #1
   13138:	e1510002 	cmp	r1, r2
   1313c:	8a0000f0 	bhi	13504 <CString::FormatV(char const*, std::__va_list)+0x11e8>
   13140:	e2443001 	sub	r3, r4, #1
   13144:	e3a01020 	mov	r1, #32
   13148:	ea000000 	b	13150 <CString::FormatV(char const*, std::__va_list)+0xe34>
   1314c:	e59b700c 	ldr	r7, [fp, #12]
   13150:	e2433001 	sub	r3, r3, #1
   13154:	e2872001 	add	r2, r7, #1
   13158:	e3730001 	cmn	r3, #1
   1315c:	e58b200c 	str	r2, [fp, #12]
   13160:	e5c71000 	strb	r1, [r7]
   13164:	1afffff8 	bne	1314c <CString::FormatV(char const*, std::__va_list)+0xe30>
   13168:	eafffe78 	b	12b50 <CString::FormatV(char const*, std::__va_list)+0x834>
   1316c:	e2888041 	add	r8, r8, #65	; 0x41
   13170:	e1a00008 	mov	r0, r8
   13174:	eb00157a 	bl	18764 <operator new[](unsigned int)>
   13178:	e59b200c 	ldr	r2, [fp, #12]
   1317c:	e58d0004 	str	r0, [sp, #4]
   13180:	e5c27000 	strb	r7, [r2]
   13184:	e59b1004 	ldr	r1, [fp, #4]
   13188:	ebffe63f 	bl	ca8c <strcpy>
   1318c:	e59b0004 	ldr	r0, [fp, #4]
   13190:	e3500000 	cmp	r0, #0
   13194:	0a000000 	beq	1319c <CString::FormatV(char const*, std::__va_list)+0xe80>
   13198:	eb001573 	bl	1876c <operator delete[](void*)>
   1319c:	e59d3004 	ldr	r3, [sp, #4]
   131a0:	e58b3004 	str	r3, [fp, #4]
   131a4:	e083000a 	add	r0, r3, sl
   131a8:	e58b8008 	str	r8, [fp, #8]
   131ac:	eaffff68 	b	12f54 <CString::FormatV(char const*, std::__va_list)+0xc38>
   131b0:	e2888041 	add	r8, r8, #65	; 0x41
   131b4:	e1a00008 	mov	r0, r8
   131b8:	eb001569 	bl	18764 <operator new[](unsigned int)>
   131bc:	e59b200c 	ldr	r2, [fp, #12]
   131c0:	e58d0004 	str	r0, [sp, #4]
   131c4:	e5c27000 	strb	r7, [r2]
   131c8:	e59b1004 	ldr	r1, [fp, #4]
   131cc:	ebffe62e 	bl	ca8c <strcpy>
   131d0:	e59b0004 	ldr	r0, [fp, #4]
   131d4:	e3500000 	cmp	r0, #0
   131d8:	0a000000 	beq	131e0 <CString::FormatV(char const*, std::__va_list)+0xec4>
   131dc:	eb001562 	bl	1876c <operator delete[](void*)>
   131e0:	e59d3004 	ldr	r3, [sp, #4]
   131e4:	e58b3004 	str	r3, [fp, #4]
   131e8:	e083000a 	add	r0, r3, sl
   131ec:	e58b8008 	str	r8, [fp, #8]
   131f0:	eafffdcf 	b	12934 <CString::FormatV(char const*, std::__va_list)+0x618>
   131f4:	e2877041 	add	r7, r7, #65	; 0x41
   131f8:	e1a00007 	mov	r0, r7
   131fc:	eb001558 	bl	18764 <operator new[](unsigned int)>
   13200:	e59b300c 	ldr	r3, [fp, #12]
   13204:	e3a02000 	mov	r2, #0
   13208:	e1a05000 	mov	r5, r0
   1320c:	e5c32000 	strb	r2, [r3]
   13210:	e59b1004 	ldr	r1, [fp, #4]
   13214:	ebffe61c 	bl	ca8c <strcpy>
   13218:	e59b0004 	ldr	r0, [fp, #4]
   1321c:	e3500000 	cmp	r0, #0
   13220:	0a000000 	beq	13228 <CString::FormatV(char const*, std::__va_list)+0xf0c>
   13224:	eb001550 	bl	1876c <operator delete[](void*)>
   13228:	e58b5004 	str	r5, [fp, #4]
   1322c:	e0852008 	add	r2, r5, r8
   13230:	e58b7008 	str	r7, [fp, #8]
   13234:	eafffd80 	b	1283c <CString::FormatV(char const*, std::__va_list)+0x520>
   13238:	e59b8004 	ldr	r8, [fp, #4]
   1323c:	e59b2008 	ldr	r2, [fp, #8]
   13240:	e0408008 	sub	r8, r0, r8
   13244:	e0843008 	add	r3, r4, r8
   13248:	e2831001 	add	r1, r3, #1
   1324c:	e1510002 	cmp	r1, r2
   13250:	9affff9f 	bls	130d4 <CString::FormatV(char const*, std::__va_list)+0xdb8>
   13254:	e2835041 	add	r5, r3, #65	; 0x41
   13258:	e1a00005 	mov	r0, r5
   1325c:	eb001540 	bl	18764 <operator new[](unsigned int)>
   13260:	e59b300c 	ldr	r3, [fp, #12]
   13264:	e3a02000 	mov	r2, #0
   13268:	e1a07000 	mov	r7, r0
   1326c:	e5c32000 	strb	r2, [r3]
   13270:	e59b1004 	ldr	r1, [fp, #4]
   13274:	ebffe604 	bl	ca8c <strcpy>
   13278:	e59b0004 	ldr	r0, [fp, #4]
   1327c:	e3500000 	cmp	r0, #0
   13280:	0a000000 	beq	13288 <CString::FormatV(char const*, std::__va_list)+0xf6c>
   13284:	eb001538 	bl	1876c <operator delete[](void*)>
   13288:	e0870008 	add	r0, r7, r8
   1328c:	e58b7004 	str	r7, [fp, #4]
   13290:	e58b000c 	str	r0, [fp, #12]
   13294:	e58b5008 	str	r5, [fp, #8]
   13298:	eaffff8d 	b	130d4 <CString::FormatV(char const*, std::__va_list)+0xdb8>
   1329c:	e59b300c 	ldr	r3, [fp, #12]
   132a0:	e2442001 	sub	r2, r4, #1
   132a4:	e59b6004 	ldr	r6, [fp, #4]
   132a8:	e59b1008 	ldr	r1, [fp, #8]
   132ac:	e0436006 	sub	r6, r3, r6
   132b0:	e0822006 	add	r2, r2, r6
   132b4:	e2820001 	add	r0, r2, #1
   132b8:	e1500001 	cmp	r0, r1
   132bc:	8a000038 	bhi	133a4 <CString::FormatV(char const*, std::__va_list)+0x1088>
   132c0:	e2444002 	sub	r4, r4, #2
   132c4:	e3a01020 	mov	r1, #32
   132c8:	ea000000 	b	132d0 <CString::FormatV(char const*, std::__va_list)+0xfb4>
   132cc:	e59b300c 	ldr	r3, [fp, #12]
   132d0:	e2444001 	sub	r4, r4, #1
   132d4:	e2832001 	add	r2, r3, #1
   132d8:	e3740001 	cmn	r4, #1
   132dc:	e58b200c 	str	r2, [fp, #12]
   132e0:	e5c31000 	strb	r1, [r3]
   132e4:	1afffff8 	bne	132cc <CString::FormatV(char const*, std::__va_list)+0xfb0>
   132e8:	eafffecd 	b	12e24 <CString::FormatV(char const*, std::__va_list)+0xb08>
   132ec:	e2827041 	add	r7, r2, #65	; 0x41
   132f0:	e1a00007 	mov	r0, r7
   132f4:	eb00151a 	bl	18764 <operator new[](unsigned int)>
   132f8:	e59b300c 	ldr	r3, [fp, #12]
   132fc:	e3a02000 	mov	r2, #0
   13300:	e1a08000 	mov	r8, r0
   13304:	e5c32000 	strb	r2, [r3]
   13308:	e59b1004 	ldr	r1, [fp, #4]
   1330c:	ebffe5de 	bl	ca8c <strcpy>
   13310:	e59b0004 	ldr	r0, [fp, #4]
   13314:	e3500000 	cmp	r0, #0
   13318:	0a000000 	beq	13320 <CString::FormatV(char const*, std::__va_list)+0x1004>
   1331c:	eb001512 	bl	1876c <operator delete[](void*)>
   13320:	e58b8004 	str	r8, [fp, #4]
   13324:	e0883006 	add	r3, r8, r6
   13328:	e58b7008 	str	r7, [fp, #8]
   1332c:	eafffdbd 	b	12a28 <CString::FormatV(char const*, std::__va_list)+0x70c>
   13330:	e2855041 	add	r5, r5, #65	; 0x41
   13334:	e1a00005 	mov	r0, r5
   13338:	eb001509 	bl	18764 <operator new[](unsigned int)>
   1333c:	e59b300c 	ldr	r3, [fp, #12]
   13340:	e58d0004 	str	r0, [sp, #4]
   13344:	e5c37000 	strb	r7, [r3]
   13348:	e59b1004 	ldr	r1, [fp, #4]
   1334c:	ebffe5ce 	bl	ca8c <strcpy>
   13350:	e59b0004 	ldr	r0, [fp, #4]
   13354:	e3500000 	cmp	r0, #0
   13358:	0a000000 	beq	13360 <CString::FormatV(char const*, std::__va_list)+0x1044>
   1335c:	eb001502 	bl	1876c <operator delete[](void*)>
   13360:	e59d3004 	ldr	r3, [sp, #4]
   13364:	e58b3004 	str	r3, [fp, #4]
   13368:	e58b5008 	str	r5, [fp, #8]
   1336c:	e083300a 	add	r3, r3, sl
   13370:	eafffe25 	b	12c0c <CString::FormatV(char const*, std::__va_list)+0x8f0>
   13374:	e59b200c 	ldr	r2, [fp, #12]
   13378:	e59b3004 	ldr	r3, [fp, #4]
   1337c:	e59b1008 	ldr	r1, [fp, #8]
   13380:	e0428003 	sub	r8, r2, r3
   13384:	e2880002 	add	r0, r8, #2
   13388:	e1500001 	cmp	r0, r1
   1338c:	8a00007e 	bhi	1358c <CString::FormatV(char const*, std::__va_list)+0x1270>
   13390:	e2823001 	add	r3, r2, #1
   13394:	e58b300c 	str	r3, [fp, #12]
   13398:	e3a0302d 	mov	r3, #45	; 0x2d
   1339c:	e5c23000 	strb	r3, [r2]
   133a0:	eaffff44 	b	130b8 <CString::FormatV(char const*, std::__va_list)+0xd9c>
   133a4:	e2827041 	add	r7, r2, #65	; 0x41
   133a8:	e1a00007 	mov	r0, r7
   133ac:	eb0014ec 	bl	18764 <operator new[](unsigned int)>
   133b0:	e59b300c 	ldr	r3, [fp, #12]
   133b4:	e3a02000 	mov	r2, #0
   133b8:	e1a05000 	mov	r5, r0
   133bc:	e5c32000 	strb	r2, [r3]
   133c0:	e59b1004 	ldr	r1, [fp, #4]
   133c4:	ebffe5b0 	bl	ca8c <strcpy>
   133c8:	e59b0004 	ldr	r0, [fp, #4]
   133cc:	e3500000 	cmp	r0, #0
   133d0:	0a000000 	beq	133d8 <CString::FormatV(char const*, std::__va_list)+0x10bc>
   133d4:	eb0014e4 	bl	1876c <operator delete[](void*)>
   133d8:	e58b5004 	str	r5, [fp, #4]
   133dc:	e0853006 	add	r3, r5, r6
   133e0:	e58b7008 	str	r7, [fp, #8]
   133e4:	eaffffb5 	b	132c0 <CString::FormatV(char const*, std::__va_list)+0xfa4>
   133e8:	e28a7042 	add	r7, sl, #66	; 0x42
   133ec:	e1a00007 	mov	r0, r7
   133f0:	eb0014db 	bl	18764 <operator new[](unsigned int)>
   133f4:	e59b300c 	ldr	r3, [fp, #12]
   133f8:	e3a02000 	mov	r2, #0
   133fc:	e1a08000 	mov	r8, r0
   13400:	e5c32000 	strb	r2, [r3]
   13404:	e59b1004 	ldr	r1, [fp, #4]
   13408:	ebffe59f 	bl	ca8c <strcpy>
   1340c:	e59b0004 	ldr	r0, [fp, #4]
   13410:	e3500000 	cmp	r0, #0
   13414:	0a000000 	beq	1341c <CString::FormatV(char const*, std::__va_list)+0x1100>
   13418:	eb0014d3 	bl	1876c <operator delete[](void*)>
   1341c:	e088300a 	add	r3, r8, sl
   13420:	e58b8004 	str	r8, [fp, #4]
   13424:	e58b7008 	str	r7, [fp, #8]
   13428:	eaffff37 	b	1310c <CString::FormatV(char const*, std::__va_list)+0xdf0>
   1342c:	e2866041 	add	r6, r6, #65	; 0x41
   13430:	e1a00006 	mov	r0, r6
   13434:	eb0014ca 	bl	18764 <operator new[](unsigned int)>
   13438:	e59b300c 	ldr	r3, [fp, #12]
   1343c:	e3a02000 	mov	r2, #0
   13440:	e1a07000 	mov	r7, r0
   13444:	e5c32000 	strb	r2, [r3]
   13448:	e59b1004 	ldr	r1, [fp, #4]
   1344c:	ebffe58e 	bl	ca8c <strcpy>
   13450:	e59b0004 	ldr	r0, [fp, #4]
   13454:	e3500000 	cmp	r0, #0
   13458:	0a000000 	beq	13460 <CString::FormatV(char const*, std::__va_list)+0x1144>
   1345c:	eb0014c2 	bl	1876c <operator delete[](void*)>
   13460:	e58b7004 	str	r7, [fp, #4]
   13464:	e0877008 	add	r7, r7, r8
   13468:	e58b6008 	str	r6, [fp, #8]
   1346c:	eafffe82 	b	12e7c <CString::FormatV(char const*, std::__va_list)+0xb60>
   13470:	e2866041 	add	r6, r6, #65	; 0x41
   13474:	e1a00006 	mov	r0, r6
   13478:	eb0014b9 	bl	18764 <operator new[](unsigned int)>
   1347c:	e59b300c 	ldr	r3, [fp, #12]
   13480:	e3a02000 	mov	r2, #0
   13484:	e1a07000 	mov	r7, r0
   13488:	e5c32000 	strb	r2, [r3]
   1348c:	e59b1004 	ldr	r1, [fp, #4]
   13490:	ebffe57d 	bl	ca8c <strcpy>
   13494:	e59b0004 	ldr	r0, [fp, #4]
   13498:	e3500000 	cmp	r0, #0
   1349c:	0a000000 	beq	134a4 <CString::FormatV(char const*, std::__va_list)+0x1188>
   134a0:	eb0014b1 	bl	1876c <operator delete[](void*)>
   134a4:	e58b7004 	str	r7, [fp, #4]
   134a8:	e0877008 	add	r7, r7, r8
   134ac:	e58b6008 	str	r6, [fp, #8]
   134b0:	eafffe90 	b	12ef8 <CString::FormatV(char const*, std::__va_list)+0xbdc>
   134b4:	e59b000c 	ldr	r0, [fp, #12]
   134b8:	e0445005 	sub	r5, r4, r5
   134bc:	e59b8004 	ldr	r8, [fp, #4]
   134c0:	e59b3008 	ldr	r3, [fp, #8]
   134c4:	e0408008 	sub	r8, r0, r8
   134c8:	e0887005 	add	r7, r8, r5
   134cc:	e2872001 	add	r2, r7, #1
   134d0:	e1520003 	cmp	r2, r3
   134d4:	8a00003e 	bhi	135d4 <CString::FormatV(char const*, std::__va_list)+0x12b8>
   134d8:	e2453001 	sub	r3, r5, #1
   134dc:	e3a01030 	mov	r1, #48	; 0x30
   134e0:	ea000000 	b	134e8 <CString::FormatV(char const*, std::__va_list)+0x11cc>
   134e4:	e59b000c 	ldr	r0, [fp, #12]
   134e8:	e2433001 	sub	r3, r3, #1
   134ec:	e2802001 	add	r2, r0, #1
   134f0:	e3730001 	cmn	r3, #1
   134f4:	e58b200c 	str	r2, [fp, #12]
   134f8:	e5c01000 	strb	r1, [r0]
   134fc:	1afffff8 	bne	134e4 <CString::FormatV(char const*, std::__va_list)+0x11c8>
   13500:	eafffeee 	b	130c0 <CString::FormatV(char const*, std::__va_list)+0xda4>
   13504:	e2836041 	add	r6, r3, #65	; 0x41
   13508:	e1a00006 	mov	r0, r6
   1350c:	eb001494 	bl	18764 <operator new[](unsigned int)>
   13510:	e59b300c 	ldr	r3, [fp, #12]
   13514:	e3a02000 	mov	r2, #0
   13518:	e1a07000 	mov	r7, r0
   1351c:	e5c32000 	strb	r2, [r3]
   13520:	e59b1004 	ldr	r1, [fp, #4]
   13524:	ebffe558 	bl	ca8c <strcpy>
   13528:	e59b0004 	ldr	r0, [fp, #4]
   1352c:	e3500000 	cmp	r0, #0
   13530:	0a000000 	beq	13538 <CString::FormatV(char const*, std::__va_list)+0x121c>
   13534:	eb00148c 	bl	1876c <operator delete[](void*)>
   13538:	e58b7004 	str	r7, [fp, #4]
   1353c:	e0877005 	add	r7, r7, r5
   13540:	e58b6008 	str	r6, [fp, #8]
   13544:	eafffefd 	b	13140 <CString::FormatV(char const*, std::__va_list)+0xe24>
   13548:	e2845042 	add	r5, r4, #66	; 0x42
   1354c:	e1a00005 	mov	r0, r5
   13550:	eb001483 	bl	18764 <operator new[](unsigned int)>
   13554:	e59b300c 	ldr	r3, [fp, #12]
   13558:	e3a02000 	mov	r2, #0
   1355c:	e1a07000 	mov	r7, r0
   13560:	e5c32000 	strb	r2, [r3]
   13564:	e59b1004 	ldr	r1, [fp, #4]
   13568:	ebffe547 	bl	ca8c <strcpy>
   1356c:	e59b0004 	ldr	r0, [fp, #4]
   13570:	e3500000 	cmp	r0, #0
   13574:	0a000000 	beq	1357c <CString::FormatV(char const*, std::__va_list)+0x1260>
   13578:	eb00147b 	bl	1876c <operator delete[](void*)>
   1357c:	e0873004 	add	r3, r7, r4
   13580:	e58b7004 	str	r7, [fp, #4]
   13584:	e58b5008 	str	r5, [fp, #8]
   13588:	eafffcbe 	b	12888 <CString::FormatV(char const*, std::__va_list)+0x56c>
   1358c:	e2883042 	add	r3, r8, #66	; 0x42
   13590:	e58d3004 	str	r3, [sp, #4]
   13594:	e1a00003 	mov	r0, r3
   13598:	eb001471 	bl	18764 <operator new[](unsigned int)>
   1359c:	e59b200c 	ldr	r2, [fp, #12]
   135a0:	e1a0a000 	mov	sl, r0
   135a4:	e5c27000 	strb	r7, [r2]
   135a8:	e59b1004 	ldr	r1, [fp, #4]
   135ac:	ebffe536 	bl	ca8c <strcpy>
   135b0:	e59b0004 	ldr	r0, [fp, #4]
   135b4:	e3500000 	cmp	r0, #0
   135b8:	0a000000 	beq	135c0 <CString::FormatV(char const*, std::__va_list)+0x12a4>
   135bc:	eb00146a 	bl	1876c <operator delete[](void*)>
   135c0:	e59d3004 	ldr	r3, [sp, #4]
   135c4:	e08a2008 	add	r2, sl, r8
   135c8:	e58ba004 	str	sl, [fp, #4]
   135cc:	e58b3008 	str	r3, [fp, #8]
   135d0:	eaffff6e 	b	13390 <CString::FormatV(char const*, std::__va_list)+0x1074>
   135d4:	e2877041 	add	r7, r7, #65	; 0x41
   135d8:	e1a00007 	mov	r0, r7
   135dc:	eb001460 	bl	18764 <operator new[](unsigned int)>
   135e0:	e59b300c 	ldr	r3, [fp, #12]
   135e4:	e3a02000 	mov	r2, #0
   135e8:	e1a04000 	mov	r4, r0
   135ec:	e5c32000 	strb	r2, [r3]
   135f0:	e59b1004 	ldr	r1, [fp, #4]
   135f4:	ebffe524 	bl	ca8c <strcpy>
   135f8:	e59b0004 	ldr	r0, [fp, #4]
   135fc:	e3500000 	cmp	r0, #0
   13600:	0a000000 	beq	13608 <CString::FormatV(char const*, std::__va_list)+0x12ec>
   13604:	eb001458 	bl	1876c <operator delete[](void*)>
   13608:	e58b4004 	str	r4, [fp, #4]
   1360c:	e0840008 	add	r0, r4, r8
   13610:	e58b7008 	str	r7, [fp, #8]
   13614:	eaffffaf 	b	134d8 <CString::FormatV(char const*, std::__va_list)+0x11bc>
   13618:	e1500004 	cmp	r0, r4
   1361c:	2afffea7 	bcs	130c0 <CString::FormatV(char const*, std::__va_list)+0xda4>
   13620:	eafffc7c 	b	12818 <CString::FormatV(char const*, std::__va_list)+0x4fc>

00013624 <CString::Format(char const*, ...)>:
   13624:	e92d000e 	push	{r1, r2, r3}
   13628:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1362c:	e24dd008 	sub	sp, sp, #8
   13630:	e28d3010 	add	r3, sp, #16
   13634:	e1a02003 	mov	r2, r3
   13638:	e59d100c 	ldr	r1, [sp, #12]
   1363c:	e58d3004 	str	r3, [sp, #4]
   13640:	ebfffb35 	bl	1231c <CString::FormatV(char const*, std::__va_list)>
   13644:	e28dd008 	add	sp, sp, #8
   13648:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1364c:	e28dd00c 	add	sp, sp, #12
   13650:	e12fff1e 	bx	lr
   13654:	00000000 	andeq	r0, r0, r0

00013658 <DelayLoop>:
   13658:	e2500001 	subs	r0, r0, #1
   1365c:	8afffffd 	bhi	13658 <DelayLoop>
   13660:	e1a0f00e 	mov	pc, lr

00013664 <CExceptionHandler::CExceptionHandler()>:
   13664:	e92d4070 	push	{r4, r5, r6, lr}
   13668:	e30c57e4 	movw	r5, #51172	; 0xc7e4
   1366c:	e3405001 	movt	r5, #1
   13670:	e1a04000 	mov	r4, r0
   13674:	e5953000 	ldr	r3, [r5]
   13678:	e3530000 	cmp	r3, #0
   1367c:	0a000005 	beq	13698 <CExceptionHandler::CExceptionHandler()+0x34>
   13680:	e30b1280 	movw	r1, #45696	; 0xb280
   13684:	e3401001 	movt	r1, #1
   13688:	e3090958 	movw	r0, #39256	; 0x9958
   1368c:	e3400001 	movt	r0, #1
   13690:	e3a0202f 	mov	r2, #47	; 0x2f
   13694:	ebfff0fb 	bl	fa88 <assertion_failed>
   13698:	e59f1048 	ldr	r1, [pc, #72]	; 136e8 <CExceptionHandler::CExceptionHandler()+0x84>
   1369c:	e3a00000 	mov	r0, #0
   136a0:	e59f2044 	ldr	r2, [pc, #68]	; 136ec <CExceptionHandler::CExceptionHandler()+0x88>
   136a4:	e59f3044 	ldr	r3, [pc, #68]	; 136f0 <CExceptionHandler::CExceptionHandler()+0x8c>
   136a8:	e1a01141 	asr	r1, r1, #2
   136ac:	e5854000 	str	r4, [r5]
   136b0:	e1a02142 	asr	r2, r2, #2
   136b4:	e2411002 	sub	r1, r1, #2
   136b8:	e1a03143 	asr	r3, r3, #2
   136bc:	e2422002 	sub	r2, r2, #2
   136c0:	e2433002 	sub	r3, r3, #2
   136c4:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   136c8:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   136cc:	e5801004 	str	r1, [r0, #4]
   136d0:	e580200c 	str	r2, [r0, #12]
   136d4:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   136d8:	e5803010 	str	r3, [r0, #16]
   136dc:	ebffdfa0 	bl	b564 <SyncDataAndInstructionCache>
   136e0:	e1a00004 	mov	r0, r4
   136e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   136e8:	00013aa4 	.word	0x00013aa4
   136ec:	00013a1c 	.word	0x00013a1c
   136f0:	00013a58 	.word	0x00013a58

000136f4 <CExceptionHandler::~CExceptionHandler()>:
   136f4:	e30c37e4 	movw	r3, #51172	; 0xc7e4
   136f8:	e3403001 	movt	r3, #1
   136fc:	e3a02000 	mov	r2, #0
   13700:	e5832000 	str	r2, [r3]
   13704:	e12fff1e 	bx	lr

00013708 <CExceptionHandler::Throw(unsigned int)>:
   13708:	e92d4010 	push	{r4, lr}
   1370c:	e1a04001 	mov	r4, r1
   13710:	e24dd008 	sub	sp, sp, #8
   13714:	ebfff337 	bl	103f8 <CLogger::Get()>
   13718:	e30c2698 	movw	r2, #50840	; 0xc698
   1371c:	e3402001 	movt	r2, #1
   13720:	e30b3298 	movw	r3, #45720	; 0xb298
   13724:	e3403001 	movt	r3, #1
   13728:	e30b1278 	movw	r1, #45688	; 0xb278
   1372c:	e3401001 	movt	r1, #1
   13730:	e792c104 	ldr	ip, [r2, r4, lsl #2]
   13734:	e3a02000 	mov	r2, #0
   13738:	e58dc000 	str	ip, [sp]
   1373c:	ebfff4b8 	bl	10a24 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13740:	e28dd008 	add	sp, sp, #8
   13744:	e8bd8010 	pop	{r4, pc}

00013748 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   13748:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1374c:	e3510002 	cmp	r1, #2
   13750:	e1a05001 	mov	r5, r1
   13754:	e24dd024 	sub	sp, sp, #36	; 0x24
   13758:	e1a04002 	mov	r4, r2
   1375c:	0a00002f 	beq	13820 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xd8>
   13760:	e3510003 	cmp	r1, #3
   13764:	0a000022 	beq	137f4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xac>
   13768:	e3a07000 	mov	r7, #0
   1376c:	e1a08007 	mov	r8, r7
   13770:	e3540000 	cmp	r4, #0
   13774:	0a000022 	beq	13804 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xbc>
   13778:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   1377c:	e30b1278 	movw	r1, #45688	; 0xb278
   13780:	e3401001 	movt	r1, #1
   13784:	e203301f 	and	r3, r3, #31
   13788:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
   1378c:	e3530012 	cmp	r3, #18
   13790:	e5949040 	ldr	r9, [r4, #64]	; 0x40
   13794:	08940240 	ldmeq	r4, {r6, r9}
   13798:	e1a00006 	mov	r0, r6
   1379c:	ebfff149 	bl	fcc8 <debug_stacktrace(unsigned int const*, char const*)>
   137a0:	ebfff314 	bl	103f8 <CLogger::Get()>
   137a4:	e30c3698 	movw	r3, #50840	; 0xc698
   137a8:	e3403001 	movt	r3, #1
   137ac:	e594e044 	ldr	lr, [r4, #68]	; 0x44
   137b0:	e3a02000 	mov	r2, #0
   137b4:	e594c048 	ldr	ip, [r4, #72]	; 0x48
   137b8:	e30b1278 	movw	r1, #45688	; 0xb278
   137bc:	e3401001 	movt	r1, #1
   137c0:	e7934105 	ldr	r4, [r3, r5, lsl #2]
   137c4:	e30b32b4 	movw	r3, #45748	; 0xb2b4
   137c8:	e3403001 	movt	r3, #1
   137cc:	e58d9014 	str	r9, [sp, #20]
   137d0:	e58d6010 	str	r6, [sp, #16]
   137d4:	e58d700c 	str	r7, [sp, #12]
   137d8:	e58d8008 	str	r8, [sp, #8]
   137dc:	e58d4000 	str	r4, [sp]
   137e0:	e58de018 	str	lr, [sp, #24]
   137e4:	e58dc004 	str	ip, [sp, #4]
   137e8:	ebfff48d 	bl	10a24 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   137ec:	e28dd024 	add	sp, sp, #36	; 0x24
   137f0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   137f4:	ee158f10 	mrc	15, 0, r8, cr5, cr0, {0}
   137f8:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
   137fc:	e3540000 	cmp	r4, #0
   13800:	1affffdc 	bne	13778 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   13804:	e30b1280 	movw	r1, #45696	; 0xb280
   13808:	e3401001 	movt	r1, #1
   1380c:	e30b02a8 	movw	r0, #45736	; 0xb2a8
   13810:	e3400001 	movt	r0, #1
   13814:	e3a02068 	mov	r2, #104	; 0x68
   13818:	ebfff09a 	bl	fa88 <assertion_failed>
   1381c:	eaffffd5 	b	13778 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   13820:	ee158f30 	mrc	15, 0, r8, cr5, cr0, {1}
   13824:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
   13828:	eaffffd0 	b	13770 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>

0001382c <CExceptionHandler::Get()>:
   1382c:	e92d4010 	push	{r4, lr}
   13830:	e30c47e4 	movw	r4, #51172	; 0xc7e4
   13834:	e3404001 	movt	r4, #1
   13838:	e5940000 	ldr	r0, [r4]
   1383c:	e3500000 	cmp	r0, #0
   13840:	18bd8010 	popne	{r4, pc}
   13844:	e3a0207f 	mov	r2, #127	; 0x7f
   13848:	e30b1280 	movw	r1, #45696	; 0xb280
   1384c:	e3401001 	movt	r1, #1
   13850:	e3090a84 	movw	r0, #39556	; 0x9a84
   13854:	e3400001 	movt	r0, #1
   13858:	ebfff08a 	bl	fa88 <assertion_failed>
   1385c:	e5940000 	ldr	r0, [r4]
   13860:	e8bd8010 	pop	{r4, pc}

00013864 <ExceptionHandler>:
   13864:	e30c37e4 	movw	r3, #51172	; 0xc7e4
   13868:	e3403001 	movt	r3, #1
   1386c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   13870:	e1a05000 	mov	r5, r0
   13874:	e1a04001 	mov	r4, r1
   13878:	e5933000 	ldr	r3, [r3]
   1387c:	e24dd024 	sub	sp, sp, #36	; 0x24
   13880:	e3530000 	cmp	r3, #0
   13884:	0a000034 	beq	1395c <ExceptionHandler+0xf8>
   13888:	e3550002 	cmp	r5, #2
   1388c:	0a00002f 	beq	13950 <ExceptionHandler+0xec>
   13890:	e3550003 	cmp	r5, #3
   13894:	0a000022 	beq	13924 <ExceptionHandler+0xc0>
   13898:	e3a07000 	mov	r7, #0
   1389c:	e1a08007 	mov	r8, r7
   138a0:	e3540000 	cmp	r4, #0
   138a4:	0a000022 	beq	13934 <ExceptionHandler+0xd0>
   138a8:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   138ac:	e30b1278 	movw	r1, #45688	; 0xb278
   138b0:	e3401001 	movt	r1, #1
   138b4:	e203301f 	and	r3, r3, #31
   138b8:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
   138bc:	e3530012 	cmp	r3, #18
   138c0:	e5949040 	ldr	r9, [r4, #64]	; 0x40
   138c4:	08940240 	ldmeq	r4, {r6, r9}
   138c8:	e1a00006 	mov	r0, r6
   138cc:	ebfff0fd 	bl	fcc8 <debug_stacktrace(unsigned int const*, char const*)>
   138d0:	ebfff2c8 	bl	103f8 <CLogger::Get()>
   138d4:	e30c3698 	movw	r3, #50840	; 0xc698
   138d8:	e3403001 	movt	r3, #1
   138dc:	e594e044 	ldr	lr, [r4, #68]	; 0x44
   138e0:	e3a02000 	mov	r2, #0
   138e4:	e594c048 	ldr	ip, [r4, #72]	; 0x48
   138e8:	e30b1278 	movw	r1, #45688	; 0xb278
   138ec:	e3401001 	movt	r1, #1
   138f0:	e7934105 	ldr	r4, [r3, r5, lsl #2]
   138f4:	e30b32b4 	movw	r3, #45748	; 0xb2b4
   138f8:	e3403001 	movt	r3, #1
   138fc:	e58d9014 	str	r9, [sp, #20]
   13900:	e58d6010 	str	r6, [sp, #16]
   13904:	e58d700c 	str	r7, [sp, #12]
   13908:	e58d8008 	str	r8, [sp, #8]
   1390c:	e58d4000 	str	r4, [sp]
   13910:	e58de018 	str	lr, [sp, #24]
   13914:	e58dc004 	str	ip, [sp, #4]
   13918:	ebfff441 	bl	10a24 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1391c:	e28dd024 	add	sp, sp, #36	; 0x24
   13920:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13924:	ee158f10 	mrc	15, 0, r8, cr5, cr0, {0}
   13928:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
   1392c:	e3540000 	cmp	r4, #0
   13930:	1affffdc 	bne	138a8 <ExceptionHandler+0x44>
   13934:	e30b1280 	movw	r1, #45696	; 0xb280
   13938:	e3401001 	movt	r1, #1
   1393c:	e30b02a8 	movw	r0, #45736	; 0xb2a8
   13940:	e3400001 	movt	r0, #1
   13944:	e3a02068 	mov	r2, #104	; 0x68
   13948:	ebfff04e 	bl	fa88 <assertion_failed>
   1394c:	eaffffd5 	b	138a8 <ExceptionHandler+0x44>
   13950:	ee158f30 	mrc	15, 0, r8, cr5, cr0, {1}
   13954:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
   13958:	eaffffd0 	b	138a0 <ExceptionHandler+0x3c>
   1395c:	e30b1280 	movw	r1, #45696	; 0xb280
   13960:	e3401001 	movt	r1, #1
   13964:	e3090a84 	movw	r0, #39556	; 0x9a84
   13968:	e3400001 	movt	r0, #1
   1396c:	e3a0207f 	mov	r2, #127	; 0x7f
   13970:	ebfff044 	bl	fa88 <assertion_failed>
   13974:	eaffffc3 	b	13888 <ExceptionHandler+0x24>

00013978 <raise>:
   13978:	e30c37e4 	movw	r3, #51172	; 0xc7e4
   1397c:	e3403001 	movt	r3, #1
   13980:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   13984:	e5933000 	ldr	r3, [r3]
   13988:	e24dd00c 	sub	sp, sp, #12
   1398c:	e3530000 	cmp	r3, #0
   13990:	0a00000d 	beq	139cc <raise+0x54>
   13994:	ebfff297 	bl	103f8 <CLogger::Get()>
   13998:	e30c2698 	movw	r2, #50840	; 0xc698
   1399c:	e3402001 	movt	r2, #1
   139a0:	e30b3298 	movw	r3, #45720	; 0xb298
   139a4:	e3403001 	movt	r3, #1
   139a8:	e30b1278 	movw	r1, #45688	; 0xb278
   139ac:	e3401001 	movt	r1, #1
   139b0:	e592c010 	ldr	ip, [r2, #16]
   139b4:	e3a02000 	mov	r2, #0
   139b8:	e58dc000 	str	ip, [sp]
   139bc:	ebfff418 	bl	10a24 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   139c0:	e3a00000 	mov	r0, #0
   139c4:	e28dd00c 	add	sp, sp, #12
   139c8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   139cc:	e30b1280 	movw	r1, #45696	; 0xb280
   139d0:	e3401001 	movt	r1, #1
   139d4:	e3090a84 	movw	r0, #39556	; 0x9a84
   139d8:	e3400001 	movt	r0, #1
   139dc:	e3a0207f 	mov	r2, #127	; 0x7f
   139e0:	ebfff028 	bl	fa88 <assertion_failed>
   139e4:	eaffffea 	b	13994 <raise+0x1c>

000139e8 <UndefinedInstructionInternal>:
   139e8:	e24ee004 	sub	lr, lr, #4
   139ec:	e92d4000 	stmfd	sp!, {lr}
   139f0:	e14fe000 	mrs	lr, SPSR
   139f4:	e92d4000 	stmfd	sp!, {lr}
   139f8:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   139fc:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   13a00:	e1a0100d 	mov	r1, sp
   13a04:	f1020012 	cps	#18
   13a08:	e1a0200d 	mov	r2, sp
   13a0c:	e1a0300e 	mov	r3, lr
   13a10:	f102001f 	cps	#31
   13a14:	e1a0d001 	mov	sp, r1
   13a18:	e92d000c 	push	{r2, r3}
   13a1c:	e1a0100d 	mov	r1, sp
   13a20:	e3a00001 	mov	r0, #1
   13a24:	eaffff8e 	b	13864 <ExceptionHandler>

00013a28 <PrefetchAbortStub>:
   13a28:	e24ee004 	sub	lr, lr, #4
   13a2c:	e92d4000 	stmfd	sp!, {lr}
   13a30:	e14fe000 	mrs	lr, SPSR
   13a34:	e92d4000 	stmfd	sp!, {lr}
   13a38:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   13a3c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   13a40:	e1a0100d 	mov	r1, sp
   13a44:	f1020012 	cps	#18
   13a48:	e1a0200d 	mov	r2, sp
   13a4c:	e1a0300e 	mov	r3, lr
   13a50:	f102001f 	cps	#31
   13a54:	e1a0d001 	mov	sp, r1
   13a58:	e92d000c 	push	{r2, r3}
   13a5c:	e1a0100d 	mov	r1, sp
   13a60:	e3a00002 	mov	r0, #2
   13a64:	eaffff7e 	b	13864 <ExceptionHandler>

00013a68 <DataAbortStub>:
   13a68:	e24ee008 	sub	lr, lr, #8
   13a6c:	e92d4000 	stmfd	sp!, {lr}
   13a70:	e14fe000 	mrs	lr, SPSR
   13a74:	e92d4000 	stmfd	sp!, {lr}
   13a78:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   13a7c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   13a80:	e1a0100d 	mov	r1, sp
   13a84:	f1020012 	cps	#18
   13a88:	e1a0200d 	mov	r2, sp
   13a8c:	e1a0300e 	mov	r3, lr
   13a90:	f102001f 	cps	#31
   13a94:	e1a0d001 	mov	sp, r1
   13a98:	e92d000c 	push	{r2, r3}
   13a9c:	e1a0100d 	mov	r1, sp
   13aa0:	e3a00003 	mov	r0, #3
   13aa4:	eaffff6e 	b	13864 <ExceptionHandler>

00013aa8 <UndefinedInstructionStub>:
   13aa8:	e92d4001 	push	{r0, lr}
   13aac:	eef80a10 	vmrs	r0, fpexc
   13ab0:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   13ab4:	0affffcb 	beq	139e8 <UndefinedInstructionInternal>
   13ab8:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   13abc:	eee80a10 	vmsr	fpexc, r0
   13ac0:	e8fd8001 	ldm	sp!, {r0, pc}^

00013ac4 <IRQStub>:
   13ac4:	e24ee004 	sub	lr, lr, #4
   13ac8:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   13acc:	eb000205 	bl	142e8 <InterruptHandler>
   13ad0:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

00013ad4 <FIQStub>:
   13ad4:	e24ee004 	sub	lr, lr, #4
   13ad8:	e92d400f 	push	{r0, r1, r2, r3, lr}
   13adc:	e59f2024 	ldr	r2, [pc, #36]	; 13b08 <FIQStub+0x34>
   13ae0:	e5921000 	ldr	r1, [r2]
   13ae4:	e3510000 	cmp	r1, #0
   13ae8:	0a000002 	beq	13af8 <FIQStub+0x24>
   13aec:	e5920004 	ldr	r0, [r2, #4]
   13af0:	e12fff31 	blx	r1
   13af4:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
   13af8:	e59f100c 	ldr	r1, [pc, #12]	; 13b0c <FIQStub+0x38>
   13afc:	e3a00000 	mov	r0, #0
   13b00:	e5810000 	str	r0, [r1]
   13b04:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
   13b08:	0001c6ac 	.word	0x0001c6ac
   13b0c:	3f00b20c 	.word	0x3f00b20c

00013b10 <CInterruptSystem::CInterruptSystem()>:
   13b10:	e7a02150 	sbfx	r2, r0, #2, #1
   13b14:	e92d4030 	push	{r4, r5, lr}
   13b18:	e1a0c000 	mov	ip, r0
   13b1c:	e2122003 	ands	r2, r2, #3
   13b20:	0a000037 	beq	13c04 <CInterruptSystem::CInterruptSystem()+0xf4>
   13b24:	e3a03000 	mov	r3, #0
   13b28:	e3520001 	cmp	r2, #1
   13b2c:	e5803000 	str	r3, [r0]
   13b30:	e5803120 	str	r3, [r0, #288]	; 0x120
   13b34:	0a00002f 	beq	13bf8 <CInterruptSystem::CInterruptSystem()+0xe8>
   13b38:	e5803004 	str	r3, [r0, #4]
   13b3c:	e3520002 	cmp	r2, #2
   13b40:	e5803124 	str	r3, [r0, #292]	; 0x124
   13b44:	0a000031 	beq	13c10 <CInterruptSystem::CInterruptSystem()+0x100>
   13b48:	e3a05045 	mov	r5, #69	; 0x45
   13b4c:	e3a04003 	mov	r4, #3
   13b50:	e5803008 	str	r3, [r0, #8]
   13b54:	e5803128 	str	r3, [r0, #296]	; 0x128
   13b58:	e1a03102 	lsl	r3, r2, #2
   13b5c:	e262e048 	rsb	lr, r2, #72	; 0x48
   13b60:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   13b64:	e2832e12 	add	r2, r3, #288	; 0x120
   13b68:	e08c2002 	add	r2, ip, r2
   13b6c:	e08c3003 	add	r3, ip, r3
   13b70:	e1a0012e 	lsr	r0, lr, #2
   13b74:	e3a01000 	mov	r1, #0
   13b78:	e2811001 	add	r1, r1, #1
   13b7c:	f4430adf 	vst1.64	{d16-d17}, [r3 :64]
   13b80:	e1500001 	cmp	r0, r1
   13b84:	f4420a8f 	vst1.32	{d16-d17}, [r2]
   13b88:	e2833010 	add	r3, r3, #16
   13b8c:	e2822010 	add	r2, r2, #16
   13b90:	8afffff8 	bhi	13b78 <CInterruptSystem::CInterruptSystem()+0x68>
   13b94:	e3ce2003 	bic	r2, lr, #3
   13b98:	e0843002 	add	r3, r4, r2
   13b9c:	e0451002 	sub	r1, r5, r2
   13ba0:	e15e0002 	cmp	lr, r2
   13ba4:	0a00000e 	beq	13be4 <CInterruptSystem::CInterruptSystem()+0xd4>
   13ba8:	e08c0103 	add	r0, ip, r3, lsl #2
   13bac:	e3a02000 	mov	r2, #0
   13bb0:	e3510001 	cmp	r1, #1
   13bb4:	e78c2103 	str	r2, [ip, r3, lsl #2]
   13bb8:	e283e001 	add	lr, r3, #1
   13bbc:	e5802120 	str	r2, [r0, #288]	; 0x120
   13bc0:	0a000007 	beq	13be4 <CInterruptSystem::CInterruptSystem()+0xd4>
   13bc4:	e3510002 	cmp	r1, #2
   13bc8:	e2833002 	add	r3, r3, #2
   13bcc:	e08c010e 	add	r0, ip, lr, lsl #2
   13bd0:	108c1103 	addne	r1, ip, r3, lsl #2
   13bd4:	e78c210e 	str	r2, [ip, lr, lsl #2]
   13bd8:	e5802120 	str	r2, [r0, #288]	; 0x120
   13bdc:	178c2103 	strne	r2, [ip, r3, lsl #2]
   13be0:	15812120 	strne	r2, [r1, #288]	; 0x120
   13be4:	e30c37e8 	movw	r3, #51176	; 0xc7e8
   13be8:	e3403001 	movt	r3, #1
   13bec:	e1a0000c 	mov	r0, ip
   13bf0:	e583c000 	str	ip, [r3]
   13bf4:	e8bd8030 	pop	{r4, r5, pc}
   13bf8:	e1a04002 	mov	r4, r2
   13bfc:	e3a05047 	mov	r5, #71	; 0x47
   13c00:	eaffffd4 	b	13b58 <CInterruptSystem::CInterruptSystem()+0x48>
   13c04:	e1a04002 	mov	r4, r2
   13c08:	e3a05048 	mov	r5, #72	; 0x48
   13c0c:	eaffffd1 	b	13b58 <CInterruptSystem::CInterruptSystem()+0x48>
   13c10:	e1a04002 	mov	r4, r2
   13c14:	e3a05046 	mov	r5, #70	; 0x46
   13c18:	eaffffce 	b	13b58 <CInterruptSystem::CInterruptSystem()+0x48>

00013c1c <CInterruptSystem::~CInterruptSystem()>:
   13c1c:	e30c37e8 	movw	r3, #51176	; 0xc7e8
   13c20:	e3403001 	movt	r3, #1
   13c24:	e3a02000 	mov	r2, #0
   13c28:	e5832000 	str	r2, [r3]
   13c2c:	e12fff1e 	bx	lr

00013c30 <CInterruptSystem::Initialize()>:
   13c30:	e59f2050 	ldr	r2, [pc, #80]	; 13c88 <CInterruptSystem::Initialize()+0x58>
   13c34:	e59f3050 	ldr	r3, [pc, #80]	; 13c8c <CInterruptSystem::Initialize()+0x5c>
   13c38:	e92d4010 	push	{r4, lr}
   13c3c:	e3a04000 	mov	r4, #0
   13c40:	e1a02142 	asr	r2, r2, #2
   13c44:	e1a03143 	asr	r3, r3, #2
   13c48:	e2422002 	sub	r2, r2, #2
   13c4c:	e2433002 	sub	r3, r3, #2
   13c50:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   13c54:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   13c58:	e1c421f8 	strd	r2, [r4, #24]
   13c5c:	ebffde40 	bl	b564 <SyncDataAndInstructionCache>
   13c60:	e3a03a0b 	mov	r3, #45056	; 0xb000
   13c64:	e3433f00 	movt	r3, #16128	; 0x3f00
   13c68:	e3e02000 	mvn	r2, #0
   13c6c:	e583420c 	str	r4, [r3, #524]	; 0x20c
   13c70:	e583221c 	str	r2, [r3, #540]	; 0x21c
   13c74:	e5832220 	str	r2, [r3, #544]	; 0x220
   13c78:	e5832224 	str	r2, [r3, #548]	; 0x224
   13c7c:	f1080080 	cpsie	i
   13c80:	e3a00001 	mov	r0, #1
   13c84:	e8bd8010 	pop	{r4, pc}
   13c88:	00013aac 	.word	0x00013aac
   13c8c:	00013ab8 	.word	0x00013ab8

00013c90 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   13c90:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13c94:	e3510047 	cmp	r1, #71	; 0x47
   13c98:	e1a04001 	mov	r4, r1
   13c9c:	e1a05000 	mov	r5, r0
   13ca0:	e1a07002 	mov	r7, r2
   13ca4:	e1a06003 	mov	r6, r3
   13ca8:	8a00001a 	bhi	13d18 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x88>
   13cac:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   13cb0:	e0808101 	add	r8, r0, r1, lsl #2
   13cb4:	e3530000 	cmp	r3, #0
   13cb8:	1a00000a 	bne	13ce8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
   13cbc:	e354001f 	cmp	r4, #31
   13cc0:	e7857104 	str	r7, [r5, r4, lsl #2]
   13cc4:	e5886120 	str	r6, [r8, #288]	; 0x120
   13cc8:	930b2210 	movwls	r2, #45584	; 0xb210
   13ccc:	93432f00 	movtls	r2, #16128	; 0x3f00
   13cd0:	8a00000b 	bhi	13d04 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x74>
   13cd4:	e204401f 	and	r4, r4, #31
   13cd8:	e3a03001 	mov	r3, #1
   13cdc:	e1a04413 	lsl	r4, r3, r4
   13ce0:	e5824000 	str	r4, [r2]
   13ce4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13ce8:	e30b133c 	movw	r1, #45884	; 0xb33c
   13cec:	e3401001 	movt	r1, #1
   13cf0:	e30b0360 	movw	r0, #45920	; 0xb360
   13cf4:	e3400001 	movt	r0, #1
   13cf8:	e3a02060 	mov	r2, #96	; 0x60
   13cfc:	ebffef61 	bl	fa88 <assertion_failed>
   13d00:	eaffffed 	b	13cbc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x2c>
   13d04:	e354003f 	cmp	r4, #63	; 0x3f
   13d08:	930b2214 	movwls	r2, #45588	; 0xb214
   13d0c:	93432f00 	movtls	r2, #16128	; 0x3f00
   13d10:	9affffef 	bls	13cd4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x44>
   13d14:	ea000017 	b	13d78 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xe8>
   13d18:	e30b133c 	movw	r1, #45884	; 0xb33c
   13d1c:	e3401001 	movt	r1, #1
   13d20:	e30b034c 	movw	r0, #45900	; 0xb34c
   13d24:	e3400001 	movt	r0, #1
   13d28:	e3a0205f 	mov	r2, #95	; 0x5f
   13d2c:	e0858104 	add	r8, r5, r4, lsl #2
   13d30:	ebffef54 	bl	fa88 <assertion_failed>
   13d34:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   13d38:	e3530000 	cmp	r3, #0
   13d3c:	0a000005 	beq	13d58 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xc8>
   13d40:	e30b133c 	movw	r1, #45884	; 0xb33c
   13d44:	e3401001 	movt	r1, #1
   13d48:	e30b0360 	movw	r0, #45920	; 0xb360
   13d4c:	e3400001 	movt	r0, #1
   13d50:	e3a02060 	mov	r2, #96	; 0x60
   13d54:	ebffef4b 	bl	fa88 <assertion_failed>
   13d58:	e7857104 	str	r7, [r5, r4, lsl #2]
   13d5c:	e30b133c 	movw	r1, #45884	; 0xb33c
   13d60:	e3401001 	movt	r1, #1
   13d64:	e30b034c 	movw	r0, #45900	; 0xb34c
   13d68:	e3400001 	movt	r0, #1
   13d6c:	e5886120 	str	r6, [r8, #288]	; 0x120
   13d70:	e3a02090 	mov	r2, #144	; 0x90
   13d74:	ebffef43 	bl	fa88 <assertion_failed>
   13d78:	e30b2218 	movw	r2, #45592	; 0xb218
   13d7c:	e3432f00 	movt	r2, #16128	; 0x3f00
   13d80:	eaffffd3 	b	13cd4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x44>

00013d84 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   13d84:	e92d4070 	push	{r4, r5, r6, lr}
   13d88:	e3510047 	cmp	r1, #71	; 0x47
   13d8c:	e1a04001 	mov	r4, r1
   13d90:	e1a05000 	mov	r5, r0
   13d94:	8a000014 	bhi	13dec <CInterruptSystem::DisconnectIRQ(unsigned int)+0x68>
   13d98:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   13d9c:	e3530000 	cmp	r3, #0
   13da0:	0a000029 	beq	13e4c <CInterruptSystem::DisconnectIRQ(unsigned int)+0xc8>
   13da4:	e354001f 	cmp	r4, #31
   13da8:	930b121c 	movwls	r1, #45596	; 0xb21c
   13dac:	93431f00 	movtls	r1, #16128	; 0x3f00
   13db0:	8a000008 	bhi	13dd8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x54>
   13db4:	e0850104 	add	r0, r5, r4, lsl #2
   13db8:	e204c01f 	and	ip, r4, #31
   13dbc:	e3a03001 	mov	r3, #1
   13dc0:	e3a02000 	mov	r2, #0
   13dc4:	e1a03c13 	lsl	r3, r3, ip
   13dc8:	e5813000 	str	r3, [r1]
   13dcc:	e7852104 	str	r2, [r5, r4, lsl #2]
   13dd0:	e5802120 	str	r2, [r0, #288]	; 0x120
   13dd4:	e8bd8070 	pop	{r4, r5, r6, pc}
   13dd8:	e354003f 	cmp	r4, #63	; 0x3f
   13ddc:	930b1220 	movwls	r1, #45600	; 0xb220
   13de0:	93431f00 	movtls	r1, #16128	; 0x3f00
   13de4:	9afffff2 	bls	13db4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x30>
   13de8:	ea000014 	b	13e40 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xbc>
   13dec:	e30b133c 	movw	r1, #45884	; 0xb33c
   13df0:	e3401001 	movt	r1, #1
   13df4:	e30b034c 	movw	r0, #45900	; 0xb34c
   13df8:	e3400001 	movt	r0, #1
   13dfc:	e3a0206a 	mov	r2, #106	; 0x6a
   13e00:	ebffef20 	bl	fa88 <assertion_failed>
   13e04:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   13e08:	e3530000 	cmp	r3, #0
   13e0c:	1a000005 	bne	13e28 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xa4>
   13e10:	e30b133c 	movw	r1, #45884	; 0xb33c
   13e14:	e3401001 	movt	r1, #1
   13e18:	e30b037c 	movw	r0, #45948	; 0xb37c
   13e1c:	e3400001 	movt	r0, #1
   13e20:	e3a0206b 	mov	r2, #107	; 0x6b
   13e24:	ebffef17 	bl	fa88 <assertion_failed>
   13e28:	e30b133c 	movw	r1, #45884	; 0xb33c
   13e2c:	e3401001 	movt	r1, #1
   13e30:	e30b034c 	movw	r0, #45900	; 0xb34c
   13e34:	e3400001 	movt	r0, #1
   13e38:	e3a0209b 	mov	r2, #155	; 0x9b
   13e3c:	ebffef11 	bl	fa88 <assertion_failed>
   13e40:	e30b1224 	movw	r1, #45604	; 0xb224
   13e44:	e3431f00 	movt	r1, #16128	; 0x3f00
   13e48:	eaffffd9 	b	13db4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x30>
   13e4c:	e30b133c 	movw	r1, #45884	; 0xb33c
   13e50:	e3401001 	movt	r1, #1
   13e54:	e30b037c 	movw	r0, #45948	; 0xb37c
   13e58:	e3400001 	movt	r0, #1
   13e5c:	e3a0206b 	mov	r2, #107	; 0x6b
   13e60:	ebffef08 	bl	fa88 <assertion_failed>
   13e64:	eaffffce 	b	13da4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x20>

00013e68 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   13e68:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13e6c:	e3510047 	cmp	r1, #71	; 0x47
   13e70:	e1a04001 	mov	r4, r1
   13e74:	e1a06002 	mov	r6, r2
   13e78:	e1a07003 	mov	r7, r3
   13e7c:	8a00001b 	bhi	13ef0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x88>
   13e80:	e3560000 	cmp	r6, #0
   13e84:	0a000021 	beq	13f10 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa8>
   13e88:	e30c56ac 	movw	r5, #50860	; 0xc6ac
   13e8c:	e3405001 	movt	r5, #1
   13e90:	e5953000 	ldr	r3, [r5]
   13e94:	e3530000 	cmp	r3, #0
   13e98:	0a000005 	beq	13eb4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x4c>
   13e9c:	e30b133c 	movw	r1, #45884	; 0xb33c
   13ea0:	e3401001 	movt	r1, #1
   13ea4:	e30b03ac 	movw	r0, #45996	; 0xb3ac
   13ea8:	e3400001 	movt	r0, #1
   13eac:	e3a0207a 	mov	r2, #122	; 0x7a
   13eb0:	ebffeef4 	bl	fa88 <assertion_failed>
   13eb4:	e5856000 	str	r6, [r5]
   13eb8:	e3540047 	cmp	r4, #71	; 0x47
   13ebc:	e5857004 	str	r7, [r5, #4]
   13ec0:	9a000005 	bls	13edc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x74>
   13ec4:	e30b133c 	movw	r1, #45884	; 0xb33c
   13ec8:	e3401001 	movt	r1, #1
   13ecc:	e30b0398 	movw	r0, #45976	; 0xb398
   13ed0:	e3400001 	movt	r0, #1
   13ed4:	e3a020a6 	mov	r2, #166	; 0xa6
   13ed8:	ebffeeea 	bl	fa88 <assertion_failed>
   13edc:	e3a03a0b 	mov	r3, #45056	; 0xb000
   13ee0:	e3433f00 	movt	r3, #16128	; 0x3f00
   13ee4:	e3844080 	orr	r4, r4, #128	; 0x80
   13ee8:	e583420c 	str	r4, [r3, #524]	; 0x20c
   13eec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13ef0:	e30b133c 	movw	r1, #45884	; 0xb33c
   13ef4:	e3401001 	movt	r1, #1
   13ef8:	e30b0398 	movw	r0, #45976	; 0xb398
   13efc:	e3400001 	movt	r0, #1
   13f00:	e3a02078 	mov	r2, #120	; 0x78
   13f04:	ebffeedf 	bl	fa88 <assertion_failed>
   13f08:	e3560000 	cmp	r6, #0
   13f0c:	1affffdd 	bne	13e88 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>
   13f10:	e30b133c 	movw	r1, #45884	; 0xb33c
   13f14:	e3401001 	movt	r1, #1
   13f18:	e30b03cc 	movw	r0, #46028	; 0xb3cc
   13f1c:	e3400001 	movt	r0, #1
   13f20:	e3a02079 	mov	r2, #121	; 0x79
   13f24:	ebffeed7 	bl	fa88 <assertion_failed>
   13f28:	eaffffd6 	b	13e88 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>

00013f2c <CInterruptSystem::DisconnectFIQ()>:
   13f2c:	e92d4010 	push	{r4, lr}
   13f30:	e30c46ac 	movw	r4, #50860	; 0xc6ac
   13f34:	e3404001 	movt	r4, #1
   13f38:	e5943000 	ldr	r3, [r4]
   13f3c:	e3530000 	cmp	r3, #0
   13f40:	0a000006 	beq	13f60 <CInterruptSystem::DisconnectFIQ()+0x34>
   13f44:	e3a02a0b 	mov	r2, #45056	; 0xb000
   13f48:	e3432f00 	movt	r2, #16128	; 0x3f00
   13f4c:	e3a03000 	mov	r3, #0
   13f50:	e582320c 	str	r3, [r2, #524]	; 0x20c
   13f54:	e5843000 	str	r3, [r4]
   13f58:	e5843004 	str	r3, [r4, #4]
   13f5c:	e8bd8010 	pop	{r4, pc}
   13f60:	e30b133c 	movw	r1, #45884	; 0xb33c
   13f64:	e3401001 	movt	r1, #1
   13f68:	e30b03c4 	movw	r0, #46020	; 0xb3c4
   13f6c:	e3400001 	movt	r0, #1
   13f70:	e3a02084 	mov	r2, #132	; 0x84
   13f74:	ebffeec3 	bl	fa88 <assertion_failed>
   13f78:	eafffff1 	b	13f44 <CInterruptSystem::DisconnectFIQ()+0x18>

00013f7c <CInterruptSystem::EnableIRQ(unsigned int)>:
   13f7c:	e92d4010 	push	{r4, lr}
   13f80:	e3500047 	cmp	r0, #71	; 0x47
   13f84:	e1a04000 	mov	r4, r0
   13f88:	8a00000d 	bhi	13fc4 <CInterruptSystem::EnableIRQ(unsigned int)+0x48>
   13f8c:	e350001f 	cmp	r0, #31
   13f90:	930b2210 	movwls	r2, #45584	; 0xb210
   13f94:	93432f00 	movtls	r2, #16128	; 0x3f00
   13f98:	8a000004 	bhi	13fb0 <CInterruptSystem::EnableIRQ(unsigned int)+0x34>
   13f9c:	e204401f 	and	r4, r4, #31
   13fa0:	e3a03001 	mov	r3, #1
   13fa4:	e1a04413 	lsl	r4, r3, r4
   13fa8:	e5824000 	str	r4, [r2]
   13fac:	e8bd8010 	pop	{r4, pc}
   13fb0:	e350003f 	cmp	r0, #63	; 0x3f
   13fb4:	930b2214 	movwls	r2, #45588	; 0xb214
   13fb8:	93432f00 	movtls	r2, #16128	; 0x3f00
   13fbc:	9afffff6 	bls	13f9c <CInterruptSystem::EnableIRQ(unsigned int)+0x20>
   13fc0:	ea000005 	b	13fdc <CInterruptSystem::EnableIRQ(unsigned int)+0x60>
   13fc4:	e30b133c 	movw	r1, #45884	; 0xb33c
   13fc8:	e3401001 	movt	r1, #1
   13fcc:	e30b034c 	movw	r0, #45900	; 0xb34c
   13fd0:	e3400001 	movt	r0, #1
   13fd4:	e3a02090 	mov	r2, #144	; 0x90
   13fd8:	ebffeeaa 	bl	fa88 <assertion_failed>
   13fdc:	e30b2218 	movw	r2, #45592	; 0xb218
   13fe0:	e3432f00 	movt	r2, #16128	; 0x3f00
   13fe4:	eaffffec 	b	13f9c <CInterruptSystem::EnableIRQ(unsigned int)+0x20>

00013fe8 <CInterruptSystem::DisableIRQ(unsigned int)>:
   13fe8:	e92d4010 	push	{r4, lr}
   13fec:	e3500047 	cmp	r0, #71	; 0x47
   13ff0:	e1a04000 	mov	r4, r0
   13ff4:	8a00000d 	bhi	14030 <CInterruptSystem::DisableIRQ(unsigned int)+0x48>
   13ff8:	e350001f 	cmp	r0, #31
   13ffc:	930b221c 	movwls	r2, #45596	; 0xb21c
   14000:	93432f00 	movtls	r2, #16128	; 0x3f00
   14004:	8a000004 	bhi	1401c <CInterruptSystem::DisableIRQ(unsigned int)+0x34>
   14008:	e204401f 	and	r4, r4, #31
   1400c:	e3a03001 	mov	r3, #1
   14010:	e1a04413 	lsl	r4, r3, r4
   14014:	e5824000 	str	r4, [r2]
   14018:	e8bd8010 	pop	{r4, pc}
   1401c:	e350003f 	cmp	r0, #63	; 0x3f
   14020:	930b2220 	movwls	r2, #45600	; 0xb220
   14024:	93432f00 	movtls	r2, #16128	; 0x3f00
   14028:	9afffff6 	bls	14008 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>
   1402c:	ea000005 	b	14048 <CInterruptSystem::DisableIRQ(unsigned int)+0x60>
   14030:	e30b133c 	movw	r1, #45884	; 0xb33c
   14034:	e3401001 	movt	r1, #1
   14038:	e30b034c 	movw	r0, #45900	; 0xb34c
   1403c:	e3400001 	movt	r0, #1
   14040:	e3a0209b 	mov	r2, #155	; 0x9b
   14044:	ebffee8f 	bl	fa88 <assertion_failed>
   14048:	e30b2224 	movw	r2, #45604	; 0xb224
   1404c:	e3432f00 	movt	r2, #16128	; 0x3f00
   14050:	eaffffec 	b	14008 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>

00014054 <CInterruptSystem::EnableFIQ(unsigned int)>:
   14054:	e92d4010 	push	{r4, lr}
   14058:	e3500047 	cmp	r0, #71	; 0x47
   1405c:	e1a04000 	mov	r4, r0
   14060:	9a000005 	bls	1407c <CInterruptSystem::EnableFIQ(unsigned int)+0x28>
   14064:	e30b133c 	movw	r1, #45884	; 0xb33c
   14068:	e3401001 	movt	r1, #1
   1406c:	e30b0398 	movw	r0, #45976	; 0xb398
   14070:	e3400001 	movt	r0, #1
   14074:	e3a020a6 	mov	r2, #166	; 0xa6
   14078:	ebffee82 	bl	fa88 <assertion_failed>
   1407c:	e3a03a0b 	mov	r3, #45056	; 0xb000
   14080:	e3433f00 	movt	r3, #16128	; 0x3f00
   14084:	e3844080 	orr	r4, r4, #128	; 0x80
   14088:	e583420c 	str	r4, [r3, #524]	; 0x20c
   1408c:	e8bd8010 	pop	{r4, pc}

00014090 <CInterruptSystem::DisableFIQ()>:
   14090:	e3a03a0b 	mov	r3, #45056	; 0xb000
   14094:	e3433f00 	movt	r3, #16128	; 0x3f00
   14098:	e3a02000 	mov	r2, #0
   1409c:	e583220c 	str	r2, [r3, #524]	; 0x20c
   140a0:	e12fff1e 	bx	lr

000140a4 <CInterruptSystem::Get()>:
   140a4:	e92d4010 	push	{r4, lr}
   140a8:	e30c47e8 	movw	r4, #51176	; 0xc7e8
   140ac:	e3404001 	movt	r4, #1
   140b0:	e5940000 	ldr	r0, [r4]
   140b4:	e3500000 	cmp	r0, #0
   140b8:	18bd8010 	popne	{r4, pc}
   140bc:	e3a020b8 	mov	r2, #184	; 0xb8
   140c0:	e30b133c 	movw	r1, #45884	; 0xb33c
   140c4:	e3401001 	movt	r1, #1
   140c8:	e3090a84 	movw	r0, #39556	; 0x9a84
   140cc:	e3400001 	movt	r0, #1
   140d0:	ebffee6c 	bl	fa88 <assertion_failed>
   140d4:	e5940000 	ldr	r0, [r4]
   140d8:	e8bd8010 	pop	{r4, pc}

000140dc <CInterruptSystem::CallIRQHandler(unsigned int)>:
   140dc:	e92d4070 	push	{r4, r5, r6, lr}
   140e0:	e3510047 	cmp	r1, #71	; 0x47
   140e4:	e1a04001 	mov	r4, r1
   140e8:	e1a05000 	mov	r5, r0
   140ec:	8a000007 	bhi	14110 <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
   140f0:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   140f4:	e3530000 	cmp	r3, #0
   140f8:	0a00001b 	beq	1416c <CInterruptSystem::CallIRQHandler(unsigned int)+0x90>
   140fc:	e2844048 	add	r4, r4, #72	; 0x48
   14100:	e7950104 	ldr	r0, [r5, r4, lsl #2]
   14104:	e12fff33 	blx	r3
   14108:	e3a00001 	mov	r0, #1
   1410c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14110:	e30b133c 	movw	r1, #45884	; 0xb33c
   14114:	e3401001 	movt	r1, #1
   14118:	e30b034c 	movw	r0, #45900	; 0xb34c
   1411c:	e3400001 	movt	r0, #1
   14120:	e3a020be 	mov	r2, #190	; 0xbe
   14124:	ebffee57 	bl	fa88 <assertion_failed>
   14128:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   1412c:	e3530000 	cmp	r3, #0
   14130:	1afffff1 	bne	140fc <CInterruptSystem::CallIRQHandler(unsigned int)+0x20>
   14134:	e30b133c 	movw	r1, #45884	; 0xb33c
   14138:	e3401001 	movt	r1, #1
   1413c:	e30b034c 	movw	r0, #45900	; 0xb34c
   14140:	e3400001 	movt	r0, #1
   14144:	e3a0209b 	mov	r2, #155	; 0x9b
   14148:	ebffee4e 	bl	fa88 <assertion_failed>
   1414c:	e30b2224 	movw	r2, #45604	; 0xb224
   14150:	e3432f00 	movt	r2, #16128	; 0x3f00
   14154:	e3a03001 	mov	r3, #1
   14158:	e204401f 	and	r4, r4, #31
   1415c:	e3a00000 	mov	r0, #0
   14160:	e1a04413 	lsl	r4, r3, r4
   14164:	e5824000 	str	r4, [r2]
   14168:	e8bd8070 	pop	{r4, r5, r6, pc}
   1416c:	e354001f 	cmp	r4, #31
   14170:	930b221c 	movwls	r2, #45596	; 0xb21c
   14174:	93432f00 	movtls	r2, #16128	; 0x3f00
   14178:	9afffff5 	bls	14154 <CInterruptSystem::CallIRQHandler(unsigned int)+0x78>
   1417c:	e354003f 	cmp	r4, #63	; 0x3f
   14180:	930b2220 	movwls	r2, #45600	; 0xb220
   14184:	93432f00 	movtls	r2, #16128	; 0x3f00
   14188:	9afffff1 	bls	14154 <CInterruptSystem::CallIRQHandler(unsigned int)+0x78>
   1418c:	eaffffee 	b	1414c <CInterruptSystem::CallIRQHandler(unsigned int)+0x70>

00014190 <CInterruptSystem::InterruptHandler()>:
   14190:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14194:	e30c87e8 	movw	r8, #51176	; 0xc7e8
   14198:	e3408001 	movt	r8, #1
   1419c:	e24dd01c 	sub	sp, sp, #28
   141a0:	e5983000 	ldr	r3, [r8]
   141a4:	e3530000 	cmp	r3, #0
   141a8:	0a000040 	beq	142b0 <CInterruptSystem::InterruptHandler()+0x120>
   141ac:	e3a02a0b 	mov	r2, #45056	; 0xb000
   141b0:	e3432f00 	movt	r2, #16128	; 0x3f00
   141b4:	e30ba21c 	movw	sl, #45596	; 0xb21c
   141b8:	e343af00 	movt	sl, #16128	; 0x3f00
   141bc:	e30bb224 	movw	fp, #45604	; 0xb224
   141c0:	e343bf00 	movt	fp, #16128	; 0x3f00
   141c4:	e5921204 	ldr	r1, [r2, #516]	; 0x204
   141c8:	e30b933c 	movw	r9, #45884	; 0xb33c
   141cc:	e3409001 	movt	r9, #1
   141d0:	e58d100c 	str	r1, [sp, #12]
   141d4:	e3a06000 	mov	r6, #0
   141d8:	e30b3220 	movw	r3, #45600	; 0xb220
   141dc:	e3433f00 	movt	r3, #16128	; 0x3f00
   141e0:	e5921208 	ldr	r1, [r2, #520]	; 0x208
   141e4:	e58d1010 	str	r1, [sp, #16]
   141e8:	e5922200 	ldr	r2, [r2, #512]	; 0x200
   141ec:	e58d3004 	str	r3, [sp, #4]
   141f0:	e6ef2072 	uxtb	r2, r2
   141f4:	e58d2014 	str	r2, [sp, #20]
   141f8:	e28d300c 	add	r3, sp, #12
   141fc:	e7934106 	ldr	r4, [r3, r6, lsl #2]
   14200:	e3540000 	cmp	r4, #0
   14204:	1a000004 	bne	1421c <CInterruptSystem::InterruptHandler()+0x8c>
   14208:	e2866001 	add	r6, r6, #1
   1420c:	e3560003 	cmp	r6, #3
   14210:	1afffff8 	bne	141f8 <CInterruptSystem::InterruptHandler()+0x68>
   14214:	e28dd01c 	add	sp, sp, #28
   14218:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1421c:	e1a05286 	lsl	r5, r6, #5
   14220:	ea000002 	b	14230 <CInterruptSystem::InterruptHandler()+0xa0>
   14224:	e2855001 	add	r5, r5, #1
   14228:	e1b040a4 	lsrs	r4, r4, #1
   1422c:	0afffff5 	beq	14208 <CInterruptSystem::InterruptHandler()+0x78>
   14230:	e3140001 	tst	r4, #1
   14234:	0afffffa 	beq	14224 <CInterruptSystem::InterruptHandler()+0x94>
   14238:	e3550047 	cmp	r5, #71	; 0x47
   1423c:	e5987000 	ldr	r7, [r8]
   14240:	8a000007 	bhi	14264 <CInterruptSystem::InterruptHandler()+0xd4>
   14244:	e7972105 	ldr	r2, [r7, r5, lsl #2]
   14248:	e3520000 	cmp	r2, #0
   1424c:	0a00001e 	beq	142cc <CInterruptSystem::InterruptHandler()+0x13c>
   14250:	e2855048 	add	r5, r5, #72	; 0x48
   14254:	e7970105 	ldr	r0, [r7, r5, lsl #2]
   14258:	e28dd01c 	add	sp, sp, #28
   1425c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14260:	e12fff12 	bx	r2
   14264:	e3a020be 	mov	r2, #190	; 0xbe
   14268:	e30b034c 	movw	r0, #45900	; 0xb34c
   1426c:	e3400001 	movt	r0, #1
   14270:	e1a01009 	mov	r1, r9
   14274:	ebffee03 	bl	fa88 <assertion_failed>
   14278:	e7972105 	ldr	r2, [r7, r5, lsl #2]
   1427c:	e3520000 	cmp	r2, #0
   14280:	1afffff2 	bne	14250 <CInterruptSystem::InterruptHandler()+0xc0>
   14284:	e30b034c 	movw	r0, #45900	; 0xb34c
   14288:	e3400001 	movt	r0, #1
   1428c:	e3a0209b 	mov	r2, #155	; 0x9b
   14290:	e1a01009 	mov	r1, r9
   14294:	ebffedfb 	bl	fa88 <assertion_failed>
   14298:	e1a0100b 	mov	r1, fp
   1429c:	e205201f 	and	r2, r5, #31
   142a0:	e3a03001 	mov	r3, #1
   142a4:	e1a03213 	lsl	r3, r3, r2
   142a8:	e5813000 	str	r3, [r1]
   142ac:	eaffffdc 	b	14224 <CInterruptSystem::InterruptHandler()+0x94>
   142b0:	e30b133c 	movw	r1, #45884	; 0xb33c
   142b4:	e3401001 	movt	r1, #1
   142b8:	e3090a84 	movw	r0, #39556	; 0x9a84
   142bc:	e3400001 	movt	r0, #1
   142c0:	e3a020d1 	mov	r2, #209	; 0xd1
   142c4:	ebffedef 	bl	fa88 <assertion_failed>
   142c8:	eaffffb7 	b	141ac <CInterruptSystem::InterruptHandler()+0x1c>
   142cc:	e355001f 	cmp	r5, #31
   142d0:	91a0100a 	movls	r1, sl
   142d4:	9afffff0 	bls	1429c <CInterruptSystem::InterruptHandler()+0x10c>
   142d8:	e355003f 	cmp	r5, #63	; 0x3f
   142dc:	959d1004 	ldrls	r1, [sp, #4]
   142e0:	9affffed 	bls	1429c <CInterruptSystem::InterruptHandler()+0x10c>
   142e4:	eaffffeb 	b	14298 <CInterruptSystem::InterruptHandler()+0x108>

000142e8 <InterruptHandler>:
   142e8:	eaffffa8 	b	14190 <CInterruptSystem::InterruptHandler()>

000142ec <CGPIOManager::InterruptStub(void*)>:
   142ec:	e92d4070 	push	{r4, r5, r6, lr}
   142f0:	e2505000 	subs	r5, r0, #0
   142f4:	0a000025 	beq	14390 <CGPIOManager::InterruptStub(void*)+0xa4>
   142f8:	e5d53004 	ldrb	r3, [r5, #4]
   142fc:	e3530000 	cmp	r3, #0
   14300:	0a00001b 	beq	14374 <CGPIOManager::InterruptStub(void*)+0x88>
   14304:	e3a03000 	mov	r3, #0
   14308:	e3433f20 	movt	r3, #16160	; 0x3f20
   1430c:	e1a02003 	mov	r2, r3
   14310:	e3a04000 	mov	r4, #0
   14314:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   14318:	ea000004 	b	14330 <CGPIOManager::InterruptStub(void*)+0x44>
   1431c:	e2844001 	add	r4, r4, #1
   14320:	e314001f 	tst	r4, #31
   14324:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   14328:	e3540036 	cmp	r4, #54	; 0x36
   1432c:	08bd8070 	popeq	{r4, r5, r6, pc}
   14330:	e3130001 	tst	r3, #1
   14334:	e1a030a3 	lsr	r3, r3, #1
   14338:	0afffff7 	beq	1431c <CGPIOManager::InterruptStub(void*)+0x30>
   1433c:	e2843002 	add	r3, r4, #2
   14340:	e7950103 	ldr	r0, [r5, r3, lsl #2]
   14344:	e3500000 	cmp	r0, #0
   14348:	0a000017 	beq	143ac <CGPIOManager::InterruptStub(void*)+0xc0>
   1434c:	ebffdb0a 	bl	af7c <CGPIOPin::InterruptHandler()>
   14350:	e3a03010 	mov	r3, #16
   14354:	e3403fc8 	movt	r3, #4040	; 0xfc8
   14358:	e08332a4 	add	r3, r3, r4, lsr #5
   1435c:	e3a02001 	mov	r2, #1
   14360:	e1a03103 	lsl	r3, r3, #2
   14364:	e204401f 	and	r4, r4, #31
   14368:	e1a04412 	lsl	r4, r2, r4
   1436c:	e5834000 	str	r4, [r3]
   14370:	e8bd8070 	pop	{r4, r5, r6, pc}
   14374:	e30b13dc 	movw	r1, #46044	; 0xb3dc
   14378:	e3401001 	movt	r1, #1
   1437c:	e30b03f8 	movw	r0, #46072	; 0xb3f8
   14380:	e3400001 	movt	r0, #1
   14384:	e3a0205e 	mov	r2, #94	; 0x5e
   14388:	ebffedbe 	bl	fa88 <assertion_failed>
   1438c:	eaffffdc 	b	14304 <CGPIOManager::InterruptStub(void*)+0x18>
   14390:	e30b13dc 	movw	r1, #46044	; 0xb3dc
   14394:	e3401001 	movt	r1, #1
   14398:	e30b03ec 	movw	r0, #46060	; 0xb3ec
   1439c:	e3400001 	movt	r0, #1
   143a0:	e3a0208a 	mov	r2, #138	; 0x8a
   143a4:	ebffedb7 	bl	fa88 <assertion_failed>
   143a8:	eaffffd2 	b	142f8 <CGPIOManager::InterruptStub(void*)+0xc>
   143ac:	e1a00004 	mov	r0, r4
   143b0:	ebffdb1e 	bl	b030 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   143b4:	eaffffe5 	b	14350 <CGPIOManager::InterruptStub(void*)+0x64>

000143b8 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   143b8:	e7a03150 	sbfx	r3, r0, #2, #1
   143bc:	e3a02000 	mov	r2, #0
   143c0:	e92d4010 	push	{r4, lr}
   143c4:	e2133003 	ands	r3, r3, #3
   143c8:	e5801000 	str	r1, [r0]
   143cc:	e5c02004 	strb	r2, [r0, #4]
   143d0:	0a00003d 	beq	144cc <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x114>
   143d4:	e5802008 	str	r2, [r0, #8]
   143d8:	e3530001 	cmp	r3, #1
   143dc:	0a000037 	beq	144c0 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x108>
   143e0:	e580200c 	str	r2, [r0, #12]
   143e4:	e3530002 	cmp	r3, #2
   143e8:	0a000040 	beq	144f0 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x138>
   143ec:	e5802010 	str	r2, [r0, #16]
   143f0:	e3a01033 	mov	r1, #51	; 0x33
   143f4:	e3a02003 	mov	r2, #3
   143f8:	e283c002 	add	ip, r3, #2
   143fc:	e263e036 	rsb	lr, r3, #54	; 0x36
   14400:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   14404:	e080c10c 	add	ip, r0, ip, lsl #2
   14408:	e28c3010 	add	r3, ip, #16
   1440c:	e1a0412e 	lsr	r4, lr, #2
   14410:	f44c0adf 	vst1.64	{d16-d17}, [ip :64]
   14414:	e354000c 	cmp	r4, #12
   14418:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   1441c:	f4430adf 	vst1.64	{d16-d17}, [r3 :64]
   14420:	edc30b04 	vstr	d16, [r3, #16]
   14424:	edc31b06 	vstr	d17, [r3, #24]
   14428:	edc30b08 	vstr	d16, [r3, #32]
   1442c:	edc31b0a 	vstr	d17, [r3, #40]	; 0x28
   14430:	edc30b0c 	vstr	d16, [r3, #48]	; 0x30
   14434:	edc31b0e 	vstr	d17, [r3, #56]	; 0x38
   14438:	edc30b10 	vstr	d16, [r3, #64]	; 0x40
   1443c:	edc31b12 	vstr	d17, [r3, #72]	; 0x48
   14440:	edc30b14 	vstr	d16, [r3, #80]	; 0x50
   14444:	edc31b16 	vstr	d17, [r3, #88]	; 0x58
   14448:	edc30b18 	vstr	d16, [r3, #96]	; 0x60
   1444c:	edc31b1a 	vstr	d17, [r3, #104]	; 0x68
   14450:	edc30b1c 	vstr	d16, [r3, #112]	; 0x70
   14454:	edc31b1e 	vstr	d17, [r3, #120]	; 0x78
   14458:	edc30b20 	vstr	d16, [r3, #128]	; 0x80
   1445c:	edc31b22 	vstr	d17, [r3, #136]	; 0x88
   14460:	edc30b24 	vstr	d16, [r3, #144]	; 0x90
   14464:	edc31b26 	vstr	d17, [r3, #152]	; 0x98
   14468:	edc30b28 	vstr	d16, [r3, #160]	; 0xa0
   1446c:	edc31b2a 	vstr	d17, [r3, #168]	; 0xa8
   14470:	02823030 	addeq	r3, r2, #48	; 0x30
   14474:	02412030 	subeq	r2, r1, #48	; 0x30
   14478:	0a000005 	beq	14494 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0xdc>
   1447c:	e35e0034 	cmp	lr, #52	; 0x34
   14480:	edc30b2c 	vstr	d16, [r3, #176]	; 0xb0
   14484:	edc31b2e 	vstr	d17, [r3, #184]	; 0xb8
   14488:	e2823034 	add	r3, r2, #52	; 0x34
   1448c:	e2412034 	sub	r2, r1, #52	; 0x34
   14490:	08bd8010 	popeq	{r4, pc}
   14494:	e2831002 	add	r1, r3, #2
   14498:	e3520001 	cmp	r2, #1
   1449c:	e3a0c000 	mov	ip, #0
   144a0:	e780c101 	str	ip, [r0, r1, lsl #2]
   144a4:	08bd8010 	popeq	{r4, pc}
   144a8:	e3520002 	cmp	r2, #2
   144ac:	e2833003 	add	r3, r3, #3
   144b0:	12811002 	addne	r1, r1, #2
   144b4:	e780c103 	str	ip, [r0, r3, lsl #2]
   144b8:	1780c101 	strne	ip, [r0, r1, lsl #2]
   144bc:	e8bd8010 	pop	{r4, pc}
   144c0:	e1a02003 	mov	r2, r3
   144c4:	e3a01035 	mov	r1, #53	; 0x35
   144c8:	eaffffca 	b	143f8 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x40>
   144cc:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   144d0:	e3a0e036 	mov	lr, #54	; 0x36
   144d4:	e1a02003 	mov	r2, r3
   144d8:	e1a0100e 	mov	r1, lr
   144dc:	e2803018 	add	r3, r0, #24
   144e0:	e3a0400d 	mov	r4, #13
   144e4:	edc00b02 	vstr	d16, [r0, #8]
   144e8:	edc01b04 	vstr	d17, [r0, #16]
   144ec:	eaffffc8 	b	14414 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x5c>
   144f0:	e1a02003 	mov	r2, r3
   144f4:	e3a01034 	mov	r1, #52	; 0x34
   144f8:	eaffffbe 	b	143f8 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x40>

000144fc <CGPIOManager::~CGPIOManager()>:
   144fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14500:	e30b63dc 	movw	r6, #46044	; 0xb3dc
   14504:	e3406001 	movt	r6, #1
   14508:	e30b5408 	movw	r5, #46088	; 0xb408
   1450c:	e3405001 	movt	r5, #1
   14510:	e1a08000 	mov	r8, r0
   14514:	e2804004 	add	r4, r0, #4
   14518:	e28070dc 	add	r7, r0, #220	; 0xdc
   1451c:	e5b43004 	ldr	r3, [r4, #4]!
   14520:	e3a0202c 	mov	r2, #44	; 0x2c
   14524:	e1a01006 	mov	r1, r6
   14528:	e1a00005 	mov	r0, r5
   1452c:	e3530000 	cmp	r3, #0
   14530:	0a000000 	beq	14538 <CGPIOManager::~CGPIOManager()+0x3c>
   14534:	ebffed53 	bl	fa88 <assertion_failed>
   14538:	e1540007 	cmp	r4, r7
   1453c:	1afffff6 	bne	1451c <CGPIOManager::~CGPIOManager()+0x20>
   14540:	e5d83004 	ldrb	r3, [r8, #4]
   14544:	e3530000 	cmp	r3, #0
   14548:	0a000004 	beq	14560 <CGPIOManager::~CGPIOManager()+0x64>
   1454c:	e5980000 	ldr	r0, [r8]
   14550:	e3500000 	cmp	r0, #0
   14554:	0a000003 	beq	14568 <CGPIOManager::~CGPIOManager()+0x6c>
   14558:	e3a01034 	mov	r1, #52	; 0x34
   1455c:	ebfffe08 	bl	13d84 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   14560:	e1a00008 	mov	r0, r8
   14564:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14568:	e30b13dc 	movw	r1, #46044	; 0xb3dc
   1456c:	e3401001 	movt	r1, #1
   14570:	e30b041c 	movw	r0, #46108	; 0xb41c
   14574:	e3400001 	movt	r0, #1
   14578:	e3a02032 	mov	r2, #50	; 0x32
   1457c:	ebffed41 	bl	fa88 <assertion_failed>
   14580:	e5980000 	ldr	r0, [r8]
   14584:	eafffff3 	b	14558 <CGPIOManager::~CGPIOManager()+0x5c>

00014588 <CGPIOManager::Initialize()>:
   14588:	e5d03004 	ldrb	r3, [r0, #4]
   1458c:	e92d4010 	push	{r4, lr}
   14590:	e1a04000 	mov	r4, r0
   14594:	e3530000 	cmp	r3, #0
   14598:	1a00000b 	bne	145cc <CGPIOManager::Initialize()+0x44>
   1459c:	e5940000 	ldr	r0, [r4]
   145a0:	e3500000 	cmp	r0, #0
   145a4:	0a000011 	beq	145f0 <CGPIOManager::Initialize()+0x68>
   145a8:	e1a03004 	mov	r3, r4
   145ac:	e3a01034 	mov	r1, #52	; 0x34
   145b0:	e30422ec 	movw	r2, #17132	; 0x42ec
   145b4:	e3402001 	movt	r2, #1
   145b8:	ebfffdb4 	bl	13c90 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   145bc:	e3a03001 	mov	r3, #1
   145c0:	e1a00003 	mov	r0, r3
   145c4:	e5c43004 	strb	r3, [r4, #4]
   145c8:	e8bd8010 	pop	{r4, pc}
   145cc:	e30b13dc 	movw	r1, #46044	; 0xb3dc
   145d0:	e3401001 	movt	r1, #1
   145d4:	e30b0430 	movw	r0, #46128	; 0xb430
   145d8:	e3400001 	movt	r0, #1
   145dc:	e3a0203b 	mov	r2, #59	; 0x3b
   145e0:	ebffed28 	bl	fa88 <assertion_failed>
   145e4:	e5940000 	ldr	r0, [r4]
   145e8:	e3500000 	cmp	r0, #0
   145ec:	1affffed 	bne	145a8 <CGPIOManager::Initialize()+0x20>
   145f0:	e30b13dc 	movw	r1, #46044	; 0xb3dc
   145f4:	e3401001 	movt	r1, #1
   145f8:	e30b041c 	movw	r0, #46108	; 0xb41c
   145fc:	e3400001 	movt	r0, #1
   14600:	e3a0203c 	mov	r2, #60	; 0x3c
   14604:	ebffed1f 	bl	fa88 <assertion_failed>
   14608:	e5940000 	ldr	r0, [r4]
   1460c:	eaffffe5 	b	145a8 <CGPIOManager::Initialize()+0x20>

00014610 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   14610:	e5d03004 	ldrb	r3, [r0, #4]
   14614:	e92d4070 	push	{r4, r5, r6, lr}
   14618:	e1a04000 	mov	r4, r0
   1461c:	e1a05001 	mov	r5, r1
   14620:	e3530000 	cmp	r3, #0
   14624:	0a000010 	beq	1466c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
   14628:	e3550000 	cmp	r5, #0
   1462c:	0a000016 	beq	1468c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   14630:	e5956004 	ldr	r6, [r5, #4]
   14634:	e3560035 	cmp	r6, #53	; 0x35
   14638:	8a00001c 	bhi	146b0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0xa0>
   1463c:	e0844106 	add	r4, r4, r6, lsl #2
   14640:	e5943008 	ldr	r3, [r4, #8]
   14644:	e3530000 	cmp	r3, #0
   14648:	0a000005 	beq	14664 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   1464c:	e30b13dc 	movw	r1, #46044	; 0xb3dc
   14650:	e3401001 	movt	r1, #1
   14654:	e30b0408 	movw	r0, #46088	; 0xb408
   14658:	e3400001 	movt	r0, #1
   1465c:	e3a0204b 	mov	r2, #75	; 0x4b
   14660:	ebffed08 	bl	fa88 <assertion_failed>
   14664:	e5845008 	str	r5, [r4, #8]
   14668:	e8bd8070 	pop	{r4, r5, r6, pc}
   1466c:	e30b13dc 	movw	r1, #46044	; 0xb3dc
   14670:	e3401001 	movt	r1, #1
   14674:	e30b03f8 	movw	r0, #46072	; 0xb3f8
   14678:	e3400001 	movt	r0, #1
   1467c:	e3a02045 	mov	r2, #69	; 0x45
   14680:	ebffed00 	bl	fa88 <assertion_failed>
   14684:	e3550000 	cmp	r5, #0
   14688:	1affffe8 	bne	14630 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>
   1468c:	e30b13dc 	movw	r1, #46044	; 0xb3dc
   14690:	e3401001 	movt	r1, #1
   14694:	e30b0444 	movw	r0, #46148	; 0xb444
   14698:	e3400001 	movt	r0, #1
   1469c:	e3a02047 	mov	r2, #71	; 0x47
   146a0:	ebffecf8 	bl	fa88 <assertion_failed>
   146a4:	e5956004 	ldr	r6, [r5, #4]
   146a8:	e3560035 	cmp	r6, #53	; 0x35
   146ac:	9affffe2 	bls	1463c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
   146b0:	e30b13dc 	movw	r1, #46044	; 0xb3dc
   146b4:	e3401001 	movt	r1, #1
   146b8:	e3090e5c 	movw	r0, #40540	; 0x9e5c
   146bc:	e3400001 	movt	r0, #1
   146c0:	e3a02049 	mov	r2, #73	; 0x49
   146c4:	ebffecef 	bl	fa88 <assertion_failed>
   146c8:	eaffffdb 	b	1463c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>

000146cc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   146cc:	e5d03004 	ldrb	r3, [r0, #4]
   146d0:	e92d4070 	push	{r4, r5, r6, lr}
   146d4:	e1a04000 	mov	r4, r0
   146d8:	e1a05001 	mov	r5, r1
   146dc:	e3530000 	cmp	r3, #0
   146e0:	0a00000b 	beq	14714 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
   146e4:	e3550000 	cmp	r5, #0
   146e8:	0a000011 	beq	14734 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x68>
   146ec:	e5955004 	ldr	r5, [r5, #4]
   146f0:	e3550035 	cmp	r5, #53	; 0x35
   146f4:	8a000017 	bhi	14758 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
   146f8:	e0844105 	add	r4, r4, r5, lsl #2
   146fc:	e5943008 	ldr	r3, [r4, #8]
   14700:	e3530000 	cmp	r3, #0
   14704:	0a00001d 	beq	14780 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb4>
   14708:	e3a03000 	mov	r3, #0
   1470c:	e5843008 	str	r3, [r4, #8]
   14710:	e8bd8070 	pop	{r4, r5, r6, pc}
   14714:	e30b13dc 	movw	r1, #46044	; 0xb3dc
   14718:	e3401001 	movt	r1, #1
   1471c:	e30b03f8 	movw	r0, #46072	; 0xb3f8
   14720:	e3400001 	movt	r0, #1
   14724:	e3a02052 	mov	r2, #82	; 0x52
   14728:	ebffecd6 	bl	fa88 <assertion_failed>
   1472c:	e3550000 	cmp	r5, #0
   14730:	1affffed 	bne	146ec <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>
   14734:	e30b13dc 	movw	r1, #46044	; 0xb3dc
   14738:	e3401001 	movt	r1, #1
   1473c:	e30b0444 	movw	r0, #46148	; 0xb444
   14740:	e3400001 	movt	r0, #1
   14744:	e3a02054 	mov	r2, #84	; 0x54
   14748:	ebffecce 	bl	fa88 <assertion_failed>
   1474c:	e5955004 	ldr	r5, [r5, #4]
   14750:	e3550035 	cmp	r5, #53	; 0x35
   14754:	9affffe7 	bls	146f8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x2c>
   14758:	e0844105 	add	r4, r4, r5, lsl #2
   1475c:	e30b13dc 	movw	r1, #46044	; 0xb3dc
   14760:	e3401001 	movt	r1, #1
   14764:	e3090e5c 	movw	r0, #40540	; 0x9e5c
   14768:	e3400001 	movt	r0, #1
   1476c:	e3a02056 	mov	r2, #86	; 0x56
   14770:	ebffecc4 	bl	fa88 <assertion_failed>
   14774:	e5943008 	ldr	r3, [r4, #8]
   14778:	e3530000 	cmp	r3, #0
   1477c:	1affffe1 	bne	14708 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   14780:	e30b13dc 	movw	r1, #46044	; 0xb3dc
   14784:	e3401001 	movt	r1, #1
   14788:	e30b0450 	movw	r0, #46160	; 0xb450
   1478c:	e3400001 	movt	r0, #1
   14790:	e3a02058 	mov	r2, #88	; 0x58
   14794:	ebffecbb 	bl	fa88 <assertion_failed>
   14798:	eaffffda 	b	14708 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>

0001479c <CGPIOManager::InterruptHandler()>:
   1479c:	e5d03004 	ldrb	r3, [r0, #4]
   147a0:	e92d4070 	push	{r4, r5, r6, lr}
   147a4:	e1a05000 	mov	r5, r0
   147a8:	e3530000 	cmp	r3, #0
   147ac:	0a00001b 	beq	14820 <CGPIOManager::InterruptHandler()+0x84>
   147b0:	e3a03000 	mov	r3, #0
   147b4:	e3433f20 	movt	r3, #16160	; 0x3f20
   147b8:	e1a02003 	mov	r2, r3
   147bc:	e3a04000 	mov	r4, #0
   147c0:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   147c4:	ea000004 	b	147dc <CGPIOManager::InterruptHandler()+0x40>
   147c8:	e2844001 	add	r4, r4, #1
   147cc:	e314001f 	tst	r4, #31
   147d0:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   147d4:	e3540036 	cmp	r4, #54	; 0x36
   147d8:	08bd8070 	popeq	{r4, r5, r6, pc}
   147dc:	e3130001 	tst	r3, #1
   147e0:	e1a030a3 	lsr	r3, r3, #1
   147e4:	0afffff7 	beq	147c8 <CGPIOManager::InterruptHandler()+0x2c>
   147e8:	e2843002 	add	r3, r4, #2
   147ec:	e7950103 	ldr	r0, [r5, r3, lsl #2]
   147f0:	e3500000 	cmp	r0, #0
   147f4:	0a000010 	beq	1483c <CGPIOManager::InterruptHandler()+0xa0>
   147f8:	ebffd9df 	bl	af7c <CGPIOPin::InterruptHandler()>
   147fc:	e3a03010 	mov	r3, #16
   14800:	e3403fc8 	movt	r3, #4040	; 0xfc8
   14804:	e08332a4 	add	r3, r3, r4, lsr #5
   14808:	e3a02001 	mov	r2, #1
   1480c:	e1a03103 	lsl	r3, r3, #2
   14810:	e204401f 	and	r4, r4, #31
   14814:	e1a04412 	lsl	r4, r2, r4
   14818:	e5834000 	str	r4, [r3]
   1481c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14820:	e30b13dc 	movw	r1, #46044	; 0xb3dc
   14824:	e3401001 	movt	r1, #1
   14828:	e30b03f8 	movw	r0, #46072	; 0xb3f8
   1482c:	e3400001 	movt	r0, #1
   14830:	e3a0205e 	mov	r2, #94	; 0x5e
   14834:	ebffec93 	bl	fa88 <assertion_failed>
   14838:	eaffffdc 	b	147b0 <CGPIOManager::InterruptHandler()+0x14>
   1483c:	e1a00004 	mov	r0, r4
   14840:	ebffd9fa 	bl	b030 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   14844:	eaffffec 	b	147fc <CGPIOManager::InterruptHandler()+0x60>

00014848 <CPWMSoundBaseDevice::GetRangeMin() const>:
   14848:	e3a00000 	mov	r0, #0
   1484c:	e12fff1e 	bx	lr

00014850 <CPWMSoundBaseDevice::GetRangeMax() const>:
   14850:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
   14854:	e2400001 	sub	r0, r0, #1
   14858:	e12fff1e 	bx	lr

0001485c <CPWMSoundBaseDevice::IsActive() const>:
   1485c:	e5d000b3 	ldrb	r0, [r0, #179]	; 0xb3
   14860:	e2900000 	adds	r0, r0, #0
   14864:	13a00001 	movne	r0, #1
   14868:	e12fff1e 	bx	lr

0001486c <CPWMSoundBaseDevice::Cancel()>:
   1486c:	e59030d0 	ldr	r3, [r0, #208]	; 0xd0
   14870:	e3530000 	cmp	r3, #0
   14874:	1a000004 	bne	1488c <CPWMSoundBaseDevice::Cancel()+0x20>
   14878:	e5d030b3 	ldrb	r3, [r0, #179]	; 0xb3
   1487c:	e3530001 	cmp	r3, #1
   14880:	03a03002 	moveq	r3, #2
   14884:	05c030b3 	strbeq	r3, [r0, #179]	; 0xb3
   14888:	e12fff1e 	bx	lr
   1488c:	e92d4010 	push	{r4, lr}
   14890:	e1a04000 	mov	r4, r0
   14894:	e1a00003 	mov	r0, r3
   14898:	ebffdaf0 	bl	b460 <EnterCritical>
   1489c:	e5d430b3 	ldrb	r3, [r4, #179]	; 0xb3
   148a0:	e3530001 	cmp	r3, #1
   148a4:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
   148a8:	03a02002 	moveq	r2, #2
   148ac:	05c420b3 	strbeq	r2, [r4, #179]	; 0xb3
   148b0:	e3530000 	cmp	r3, #0
   148b4:	08bd8010 	popeq	{r4, pc}
   148b8:	e8bd4010 	pop	{r4, lr}
   148bc:	eaffdb14 	b	b514 <LeaveCritical>

000148c0 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)>:
   148c0:	e30bc280 	movw	ip, #45696	; 0xb280
   148c4:	e340cee6 	movt	ip, #3814	; 0xee6
   148c8:	e08cc0a2 	add	ip, ip, r2, lsr #1
   148cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   148d0:	e1a04000 	mov	r4, r0
   148d4:	e1a08001 	mov	r8, r1
   148d8:	e1a07003 	mov	r7, r3
   148dc:	e735f21c 	udiv	r5, ip, r2
   148e0:	e1a03002 	mov	r3, r2
   148e4:	e3a01003 	mov	r1, #3
   148e8:	e28060b0 	add	r6, r0, #176	; 0xb0
   148ec:	e1a02005 	mov	r2, r5
   148f0:	eb000a49 	bl	1721c <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int)>
   148f4:	e59f1298 	ldr	r1, [pc, #664]	; 14b94 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x2d4>
   148f8:	e3a03000 	mov	r3, #0
   148fc:	e3a02004 	mov	r2, #4
   14900:	e5841000 	str	r1, [r4]
   14904:	e2840060 	add	r0, r4, #96	; 0x60
   14908:	e3a01036 	mov	r1, #54	; 0x36
   1490c:	e5848054 	str	r8, [r4, #84]	; 0x54
   14910:	e584505c 	str	r5, [r4, #92]	; 0x5c
   14914:	e5847058 	str	r7, [r4, #88]	; 0x58
   14918:	ebffd4ff 	bl	9d1c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1491c:	e3a03000 	mov	r3, #0
   14920:	e3a02004 	mov	r2, #4
   14924:	e3a01037 	mov	r1, #55	; 0x37
   14928:	e2840088 	add	r0, r4, #136	; 0x88
   1492c:	ebffd4fa 	bl	9d1c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   14930:	e3a02006 	mov	r2, #6
   14934:	e1a01002 	mov	r1, r2
   14938:	e1a00006 	mov	r0, r6
   1493c:	eb001347 	bl	19660 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)>
   14940:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   14944:	e3a03000 	mov	r3, #0
   14948:	e3a01001 	mov	r1, #1
   1494c:	e1520003 	cmp	r2, r3
   14950:	e58410d0 	str	r1, [r4, #208]	; 0xd0
   14954:	e5c430b2 	strb	r3, [r4, #178]	; 0xb2
   14958:	e5c430b3 	strb	r3, [r4, #179]	; 0xb3
   1495c:	0a000085 	beq	14b78 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x2b8>
   14960:	e5940058 	ldr	r0, [r4, #88]	; 0x58
   14964:	e3500000 	cmp	r0, #0
   14968:	0a00007a 	beq	14b58 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x298>
   1496c:	e3100001 	tst	r0, #1
   14970:	1a000069 	bne	14b1c <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x25c>
   14974:	e370022e 	cmn	r0, #-536870910	; 0xe0000002
   14978:	91a00100 	lslls	r0, r0, #2
   1497c:	83e00000 	mvnhi	r0, #0
   14980:	eb000f77 	bl	18764 <operator new[](unsigned int)>
   14984:	e58400b4 	str	r0, [r4, #180]	; 0xb4
   14988:	e3a0003f 	mov	r0, #63	; 0x3f
   1498c:	eb000f74 	bl	18764 <operator new[](unsigned int)>
   14990:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   14994:	e5942058 	ldr	r2, [r4, #88]	; 0x58
   14998:	e280301f 	add	r3, r0, #31
   1499c:	e3c3301f 	bic	r3, r3, #31
   149a0:	e59410b4 	ldr	r1, [r4, #180]	; 0xb4
   149a4:	e372022e 	cmn	r2, #-536870910	; 0xe0000002
   149a8:	e58400bc 	str	r0, [r4, #188]	; 0xbc
   149ac:	e2811103 	add	r1, r1, #-1073741824	; 0xc0000000
   149b0:	e3000349 	movw	r0, #841	; 0x349
   149b4:	e3400005 	movt	r0, #5
   149b8:	e5830000 	str	r0, [r3]
   149bc:	e58430c4 	str	r3, [r4, #196]	; 0xc4
   149c0:	91a00102 	lslls	r0, r2, #2
   149c4:	edc30b06 	vstr	d16, [r3, #24]
   149c8:	83e00000 	mvnhi	r0, #0
   149cc:	e5831004 	str	r1, [r3, #4]
   149d0:	e30c1018 	movw	r1, #49176	; 0xc018
   149d4:	e3471e20 	movt	r1, #32288	; 0x7e20
   149d8:	e5831008 	str	r1, [r3, #8]
   149dc:	e3a01000 	mov	r1, #0
   149e0:	e5831010 	str	r1, [r3, #16]
   149e4:	eb000f5e 	bl	18764 <operator new[](unsigned int)>
   149e8:	e58400b8 	str	r0, [r4, #184]	; 0xb8
   149ec:	e3a0003f 	mov	r0, #63	; 0x3f
   149f0:	eb000f5b 	bl	18764 <operator new[](unsigned int)>
   149f4:	e594e0c4 	ldr	lr, [r4, #196]	; 0xc4
   149f8:	e280c01f 	add	ip, r0, #31
   149fc:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
   14a00:	e3ccc01f 	bic	ip, ip, #31
   14a04:	e3a03000 	mov	r3, #0
   14a08:	e58400c0 	str	r0, [r4, #192]	; 0xc0
   14a0c:	e2822103 	add	r2, r2, #-1073741824	; 0xc0000000
   14a10:	e584c0c8 	str	ip, [r4, #200]	; 0xc8
   14a14:	e1a00006 	mov	r0, r6
   14a18:	e58c3010 	str	r3, [ip, #16]
   14a1c:	e3001349 	movw	r1, #841	; 0x349
   14a20:	e3401005 	movt	r1, #5
   14a24:	e88c0006 	stm	ip, {r1, r2}
   14a28:	e58c3018 	str	r3, [ip, #24]
   14a2c:	e28c1103 	add	r1, ip, #-1073741824	; 0xc0000000
   14a30:	e58c301c 	str	r3, [ip, #28]
   14a34:	e30c2018 	movw	r2, #49176	; 0xc018
   14a38:	e3472e20 	movt	r2, #32288	; 0x7e20
   14a3c:	e58c2008 	str	r2, [ip, #8]
   14a40:	e1a02003 	mov	r2, r3
   14a44:	e58e1014 	str	r1, [lr, #20]
   14a48:	e28ee103 	add	lr, lr, #-1073741824	; 0xc0000000
   14a4c:	e3a01002 	mov	r1, #2
   14a50:	e58ce014 	str	lr, [ip, #20]
   14a54:	eb001325 	bl	196f0 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)>
   14a58:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   14a5c:	ebffdecd 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   14a60:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
   14a64:	e2423c01 	sub	r3, r2, #256	; 0x100
   14a68:	e3530cff 	cmp	r3, #65280	; 0xff00
   14a6c:	3a000006 	bcc	14a8c <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x1cc>
   14a70:	e300214a 	movw	r2, #330	; 0x14a
   14a74:	e30b149c 	movw	r1, #46236	; 0xb49c
   14a78:	e3401001 	movt	r1, #1
   14a7c:	e30b04e0 	movw	r0, #46304	; 0xb4e0
   14a80:	e3400001 	movt	r0, #1
   14a84:	ebffebff 	bl	fa88 <assertion_failed>
   14a88:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
   14a8c:	e3a03903 	mov	r3, #49152	; 0xc000
   14a90:	e3433f20 	movt	r3, #16160	; 0x3f20
   14a94:	e3021161 	movw	r1, #8545	; 0x2161
   14a98:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   14a9c:	e5832010 	str	r2, [r3, #16]
   14aa0:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
   14aa4:	e5832020 	str	r2, [r3, #32]
   14aa8:	e5831000 	str	r1, [r3]
   14aac:	ebffdeb9 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   14ab0:	e3a03a07 	mov	r3, #28672	; 0x7000
   14ab4:	e3433f00 	movt	r3, #16128	; 0x3f00
   14ab8:	e5933020 	ldr	r3, [r3, #32]
   14abc:	e3130201 	tst	r3, #268435456	; 0x10000000
   14ac0:	1a00001d 	bne	14b3c <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x27c>
   14ac4:	e3a05a07 	mov	r5, #28672	; 0x7000
   14ac8:	e3435f00 	movt	r5, #16128	; 0x3f00
   14acc:	e5953ff0 	ldr	r3, [r5, #4080]	; 0xff0
   14ad0:	e3833001 	orr	r3, r3, #1
   14ad4:	e5853ff0 	str	r3, [r5, #4080]	; 0xff0
   14ad8:	ebffdeec 	bl	c690 <CTimer::Get()>
   14adc:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   14ae0:	ebffdeac 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   14ae4:	e1a02005 	mov	r2, r5
   14ae8:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
   14aec:	e5853000 	str	r3, [r5]
   14af0:	e5923000 	ldr	r3, [r2]
   14af4:	e3530000 	cmp	r3, #0
   14af8:	bafffffc 	blt	14af0 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x230>
   14afc:	ebffed41 	bl	10008 <CDeviceNameService::Get()>
   14b00:	e3a03000 	mov	r3, #0
   14b04:	e1a02004 	mov	r2, r4
   14b08:	e3091860 	movw	r1, #39008	; 0x9860
   14b0c:	e3401001 	movt	r1, #1
   14b10:	ebffecc8 	bl	fe38 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   14b14:	e1a00004 	mov	r0, r4
   14b18:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14b1c:	e30b149c 	movw	r1, #46236	; 0xb49c
   14b20:	e3401001 	movt	r1, #1
   14b24:	e30b04c8 	movw	r0, #46280	; 0xb4c8
   14b28:	e3400001 	movt	r0, #1
   14b2c:	e3a0208d 	mov	r2, #141	; 0x8d
   14b30:	ebffebd4 	bl	fa88 <assertion_failed>
   14b34:	e5940058 	ldr	r0, [r4, #88]	; 0x58
   14b38:	eaffff8d 	b	14974 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0xb4>
   14b3c:	e30b149c 	movw	r1, #46236	; 0xb49c
   14b40:	e3401001 	movt	r1, #1
   14b44:	e30b0510 	movw	r0, #46352	; 0xb510
   14b48:	e3400001 	movt	r0, #1
   14b4c:	e3a0209b 	mov	r2, #155	; 0x9b
   14b50:	ebffebcc 	bl	fa88 <assertion_failed>
   14b54:	eaffffda 	b	14ac4 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x204>
   14b58:	e30b149c 	movw	r1, #46236	; 0xb49c
   14b5c:	e3401001 	movt	r1, #1
   14b60:	e30b04b4 	movw	r0, #46260	; 0xb4b4
   14b64:	e3400001 	movt	r0, #1
   14b68:	e3a0208c 	mov	r2, #140	; 0x8c
   14b6c:	ebffebc5 	bl	fa88 <assertion_failed>
   14b70:	e5940058 	ldr	r0, [r4, #88]	; 0x58
   14b74:	eaffff7c 	b	1496c <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0xac>
   14b78:	e30b149c 	movw	r1, #46236	; 0xb49c
   14b7c:	e3401001 	movt	r1, #1
   14b80:	e30a0004 	movw	r0, #40964	; 0xa004
   14b84:	e3400001 	movt	r0, #1
   14b88:	e3a0208b 	mov	r2, #139	; 0x8b
   14b8c:	ebffebbd 	bl	fa88 <assertion_failed>
   14b90:	eaffff72 	b	14960 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0xa0>
   14b94:	0001b46c 	.word	0x0001b46c

00014b98 <CPWMSoundBaseDevice::GetNextChunk()>:
   14b98:	e59030cc 	ldr	r3, [r0, #204]	; 0xcc
   14b9c:	e92d4070 	push	{r4, r5, r6, lr}
   14ba0:	e1a04000 	mov	r4, r0
   14ba4:	e0803103 	add	r3, r0, r3, lsl #2
   14ba8:	e59310b4 	ldr	r1, [r3, #180]	; 0xb4
   14bac:	e3510000 	cmp	r1, #0
   14bb0:	0a00002e 	beq	14c70 <CPWMSoundBaseDevice::GetNextChunk()+0xd8>
   14bb4:	e5943000 	ldr	r3, [r4]
   14bb8:	e1a00004 	mov	r0, r4
   14bbc:	e5942058 	ldr	r2, [r4, #88]	; 0x58
   14bc0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   14bc4:	e12fff33 	blx	r3
   14bc8:	e3500000 	cmp	r0, #0
   14bcc:	08bd8070 	popeq	{r4, r5, r6, pc}
   14bd0:	e1a05100 	lsl	r5, r0, #2
   14bd4:	e3750107 	cmn	r5, #-1073741823	; 0xc0000001
   14bd8:	8a000013 	bhi	14c2c <CPWMSoundBaseDevice::GetNextChunk()+0x94>
   14bdc:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   14be0:	e0842103 	add	r2, r4, r3, lsl #2
   14be4:	e59220c4 	ldr	r2, [r2, #196]	; 0xc4
   14be8:	e3520000 	cmp	r2, #0
   14bec:	0a000015 	beq	14c48 <CPWMSoundBaseDevice::GetNextChunk()+0xb0>
   14bf0:	e0843103 	add	r3, r4, r3, lsl #2
   14bf4:	e582500c 	str	r5, [r2, #12]
   14bf8:	e1a01005 	mov	r1, r5
   14bfc:	e59300b4 	ldr	r0, [r3, #180]	; 0xb4
   14c00:	eb0004d5 	bl	15f5c <CleanAndInvalidateDataCacheRange>
   14c04:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   14c08:	e3a01020 	mov	r1, #32
   14c0c:	e0843103 	add	r3, r4, r3, lsl #2
   14c10:	e59300c4 	ldr	r0, [r3, #196]	; 0xc4
   14c14:	eb0004d0 	bl	15f5c <CleanAndInvalidateDataCacheRange>
   14c18:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   14c1c:	e3a00001 	mov	r0, #1
   14c20:	e0233000 	eor	r3, r3, r0
   14c24:	e58430cc 	str	r3, [r4, #204]	; 0xcc
   14c28:	e8bd8070 	pop	{r4, r5, r6, pc}
   14c2c:	e30b149c 	movw	r1, #46236	; 0xb49c
   14c30:	e3401001 	movt	r1, #1
   14c34:	e30b0574 	movw	r0, #46452	; 0xb574
   14c38:	e3400001 	movt	r0, #1
   14c3c:	e3002136 	movw	r2, #310	; 0x136
   14c40:	ebffeb90 	bl	fa88 <assertion_failed>
   14c44:	eaffffe4 	b	14bdc <CPWMSoundBaseDevice::GetNextChunk()+0x44>
   14c48:	e3a02f4e 	mov	r2, #312	; 0x138
   14c4c:	e30b149c 	movw	r1, #46236	; 0xb49c
   14c50:	e3401001 	movt	r1, #1
   14c54:	e30b0594 	movw	r0, #46484	; 0xb594
   14c58:	e3400001 	movt	r0, #1
   14c5c:	ebffeb89 	bl	fa88 <assertion_failed>
   14c60:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   14c64:	e0842103 	add	r2, r4, r3, lsl #2
   14c68:	e59220c4 	ldr	r2, [r2, #196]	; 0xc4
   14c6c:	eaffffdf 	b	14bf0 <CPWMSoundBaseDevice::GetNextChunk()+0x58>
   14c70:	e30b149c 	movw	r1, #46236	; 0xb49c
   14c74:	e3401001 	movt	r1, #1
   14c78:	e30b0550 	movw	r0, #46416	; 0xb550
   14c7c:	e3400001 	movt	r0, #1
   14c80:	e300212e 	movw	r2, #302	; 0x12e
   14c84:	ebffeb7f 	bl	fa88 <assertion_failed>
   14c88:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   14c8c:	e0843103 	add	r3, r4, r3, lsl #2
   14c90:	e59310b4 	ldr	r1, [r3, #180]	; 0xb4
   14c94:	eaffffc6 	b	14bb4 <CPWMSoundBaseDevice::GetNextChunk()+0x1c>

00014c98 <CPWMSoundBaseDevice::Start()>:
   14c98:	e5d030b3 	ldrb	r3, [r0, #179]	; 0xb3
   14c9c:	e92d4070 	push	{r4, r5, r6, lr}
   14ca0:	e1a04000 	mov	r4, r0
   14ca4:	e3530000 	cmp	r3, #0
   14ca8:	1a000062 	bne	14e38 <CPWMSoundBaseDevice::Start()+0x1a0>
   14cac:	e59410b4 	ldr	r1, [r4, #180]	; 0xb4
   14cb0:	e3a03000 	mov	r3, #0
   14cb4:	e58430cc 	str	r3, [r4, #204]	; 0xcc
   14cb8:	e1510003 	cmp	r1, r3
   14cbc:	0a000093 	beq	14f10 <CPWMSoundBaseDevice::Start()+0x278>
   14cc0:	e5943000 	ldr	r3, [r4]
   14cc4:	e1a00004 	mov	r0, r4
   14cc8:	e5942058 	ldr	r2, [r4, #88]	; 0x58
   14ccc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   14cd0:	e12fff33 	blx	r3
   14cd4:	e3500000 	cmp	r0, #0
   14cd8:	08bd8070 	popeq	{r4, r5, r6, pc}
   14cdc:	e1a05100 	lsl	r5, r0, #2
   14ce0:	e3750107 	cmn	r5, #-1073741823	; 0xc0000001
   14ce4:	8a00005a 	bhi	14e54 <CPWMSoundBaseDevice::Start()+0x1bc>
   14ce8:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   14cec:	e0842103 	add	r2, r4, r3, lsl #2
   14cf0:	e59220c4 	ldr	r2, [r2, #196]	; 0xc4
   14cf4:	e3520000 	cmp	r2, #0
   14cf8:	0a000072 	beq	14ec8 <CPWMSoundBaseDevice::Start()+0x230>
   14cfc:	e0843103 	add	r3, r4, r3, lsl #2
   14d00:	e582500c 	str	r5, [r2, #12]
   14d04:	e1a01005 	mov	r1, r5
   14d08:	e59300b4 	ldr	r0, [r3, #180]	; 0xb4
   14d0c:	eb000492 	bl	15f5c <CleanAndInvalidateDataCacheRange>
   14d10:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   14d14:	e3a01020 	mov	r1, #32
   14d18:	e0843103 	add	r3, r4, r3, lsl #2
   14d1c:	e59300c4 	ldr	r0, [r3, #196]	; 0xc4
   14d20:	eb00048d 	bl	15f5c <CleanAndInvalidateDataCacheRange>
   14d24:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   14d28:	e5d420b2 	ldrb	r2, [r4, #178]	; 0xb2
   14d2c:	e3a01001 	mov	r1, #1
   14d30:	e0233001 	eor	r3, r3, r1
   14d34:	e5c410b3 	strb	r1, [r4, #179]	; 0xb3
   14d38:	e58430cc 	str	r3, [r4, #204]	; 0xcc
   14d3c:	e3520000 	cmp	r2, #0
   14d40:	1a000009 	bne	14d6c <CPWMSoundBaseDevice::Start()+0xd4>
   14d44:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   14d48:	e3500000 	cmp	r0, #0
   14d4c:	0a000079 	beq	14f38 <CPWMSoundBaseDevice::Start()+0x2a0>
   14d50:	e1a03004 	mov	r3, r4
   14d54:	e3042f58 	movw	r2, #20312	; 0x4f58
   14d58:	e3402001 	movt	r2, #1
   14d5c:	e3a01010 	mov	r1, #16
   14d60:	ebfffbca 	bl	13c90 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   14d64:	e3a03001 	mov	r3, #1
   14d68:	e5c430b2 	strb	r3, [r4, #178]	; 0xb2
   14d6c:	e3a02903 	mov	r2, #49152	; 0xc000
   14d70:	e3432f20 	movt	r2, #16160	; 0x3f20
   14d74:	e3003707 	movw	r3, #1799	; 0x707
   14d78:	e3483000 	movt	r3, #32768	; 0x8000
   14d7c:	e3a01a07 	mov	r1, #28672	; 0x7000
   14d80:	e3431f00 	movt	r1, #16128	; 0x3f00
   14d84:	e5823008 	str	r3, [r2, #8]
   14d88:	e5923000 	ldr	r3, [r2]
   14d8c:	e3c33b01 	bic	r3, r3, #1024	; 0x400
   14d90:	e3c33004 	bic	r3, r3, #4
   14d94:	e5823000 	str	r3, [r2]
   14d98:	e5913000 	ldr	r3, [r1]
   14d9c:	e3130004 	tst	r3, #4
   14da0:	1a00003c 	bne	14e98 <CPWMSoundBaseDevice::Start()+0x200>
   14da4:	e3a03a07 	mov	r3, #28672	; 0x7000
   14da8:	e3433f00 	movt	r3, #16128	; 0x3f00
   14dac:	e5933fe0 	ldr	r3, [r3, #4064]	; 0xfe0
   14db0:	e3130001 	tst	r3, #1
   14db4:	1a00002d 	bne	14e70 <CPWMSoundBaseDevice::Start()+0x1d8>
   14db8:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
   14dbc:	e3530000 	cmp	r3, #0
   14dc0:	0a00004a 	beq	14ef0 <CPWMSoundBaseDevice::Start()+0x258>
   14dc4:	e3a02a07 	mov	r2, #28672	; 0x7000
   14dc8:	e3432f00 	movt	r2, #16128	; 0x3f00
   14dcc:	e2833103 	add	r3, r3, #-1073741824	; 0xc0000000
   14dd0:	e3a01001 	mov	r1, #1
   14dd4:	e34110f1 	movt	r1, #4337	; 0x10f1
   14dd8:	e5823004 	str	r3, [r2, #4]
   14ddc:	e1a00004 	mov	r0, r4
   14de0:	e5821000 	str	r1, [r2]
   14de4:	ebffff6b 	bl	14b98 <CPWMSoundBaseDevice::GetNextChunk()>
   14de8:	e3500000 	cmp	r0, #0
   14dec:	1a00000f 	bne	14e30 <CPWMSoundBaseDevice::Start()+0x198>
   14df0:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
   14df4:	e3500000 	cmp	r0, #0
   14df8:	1a00002d 	bne	14eb4 <CPWMSoundBaseDevice::Start()+0x21c>
   14dfc:	e5d430b3 	ldrb	r3, [r4, #179]	; 0xb3
   14e00:	e3530001 	cmp	r3, #1
   14e04:	1a000009 	bne	14e30 <CPWMSoundBaseDevice::Start()+0x198>
   14e08:	e3a03a07 	mov	r3, #28672	; 0x7000
   14e0c:	e3433f00 	movt	r3, #16128	; 0x3f00
   14e10:	e3a01000 	mov	r1, #0
   14e14:	e3a02003 	mov	r2, #3
   14e18:	e583101c 	str	r1, [r3, #28]
   14e1c:	e5c420b3 	strb	r2, [r4, #179]	; 0xb3
   14e20:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
   14e24:	e3530000 	cmp	r3, #0
   14e28:	0a000000 	beq	14e30 <CPWMSoundBaseDevice::Start()+0x198>
   14e2c:	ebffd9b8 	bl	b514 <LeaveCritical>
   14e30:	e3a00001 	mov	r0, #1
   14e34:	e8bd8070 	pop	{r4, r5, r6, pc}
   14e38:	e30b149c 	movw	r1, #46236	; 0xb49c
   14e3c:	e3401001 	movt	r1, #1
   14e40:	e30b05b8 	movw	r0, #46520	; 0xb5b8
   14e44:	e3400001 	movt	r0, #1
   14e48:	e3a020d5 	mov	r2, #213	; 0xd5
   14e4c:	ebffeb0d 	bl	fa88 <assertion_failed>
   14e50:	eaffff95 	b	14cac <CPWMSoundBaseDevice::Start()+0x14>
   14e54:	e30b149c 	movw	r1, #46236	; 0xb49c
   14e58:	e3401001 	movt	r1, #1
   14e5c:	e30b0574 	movw	r0, #46452	; 0xb574
   14e60:	e3400001 	movt	r0, #1
   14e64:	e3002136 	movw	r2, #310	; 0x136
   14e68:	ebffeb06 	bl	fa88 <assertion_failed>
   14e6c:	eaffff9d 	b	14ce8 <CPWMSoundBaseDevice::Start()+0x50>
   14e70:	e30b149c 	movw	r1, #46236	; 0xb49c
   14e74:	e3401001 	movt	r1, #1
   14e78:	e30b0608 	movw	r0, #46600	; 0xb608
   14e7c:	e3400001 	movt	r0, #1
   14e80:	e3a020fa 	mov	r2, #250	; 0xfa
   14e84:	ebffeaff 	bl	fa88 <assertion_failed>
   14e88:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
   14e8c:	e3530000 	cmp	r3, #0
   14e90:	1affffcb 	bne	14dc4 <CPWMSoundBaseDevice::Start()+0x12c>
   14e94:	ea000015 	b	14ef0 <CPWMSoundBaseDevice::Start()+0x258>
   14e98:	e30b149c 	movw	r1, #46236	; 0xb49c
   14e9c:	e3401001 	movt	r1, #1
   14ea0:	e30b05d0 	movw	r0, #46544	; 0xb5d0
   14ea4:	e3400001 	movt	r0, #1
   14ea8:	e3a020f9 	mov	r2, #249	; 0xf9
   14eac:	ebffeaf5 	bl	fa88 <assertion_failed>
   14eb0:	eaffffbb 	b	14da4 <CPWMSoundBaseDevice::Start()+0x10c>
   14eb4:	ebffd969 	bl	b460 <EnterCritical>
   14eb8:	e5d430b3 	ldrb	r3, [r4, #179]	; 0xb3
   14ebc:	e3530001 	cmp	r3, #1
   14ec0:	1affffd6 	bne	14e20 <CPWMSoundBaseDevice::Start()+0x188>
   14ec4:	eaffffcf 	b	14e08 <CPWMSoundBaseDevice::Start()+0x170>
   14ec8:	e3a02f4e 	mov	r2, #312	; 0x138
   14ecc:	e30b149c 	movw	r1, #46236	; 0xb49c
   14ed0:	e3401001 	movt	r1, #1
   14ed4:	e30b0594 	movw	r0, #46484	; 0xb594
   14ed8:	e3400001 	movt	r0, #1
   14edc:	ebffeae9 	bl	fa88 <assertion_failed>
   14ee0:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   14ee4:	e0842103 	add	r2, r4, r3, lsl #2
   14ee8:	e59220c4 	ldr	r2, [r2, #196]	; 0xc4
   14eec:	eaffff82 	b	14cfc <CPWMSoundBaseDevice::Start()+0x64>
   14ef0:	e30b149c 	movw	r1, #46236	; 0xb49c
   14ef4:	e3401001 	movt	r1, #1
   14ef8:	e30b0640 	movw	r0, #46656	; 0xb640
   14efc:	e3400001 	movt	r0, #1
   14f00:	e3a020fc 	mov	r2, #252	; 0xfc
   14f04:	ebffeadf 	bl	fa88 <assertion_failed>
   14f08:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
   14f0c:	eaffffac 	b	14dc4 <CPWMSoundBaseDevice::Start()+0x12c>
   14f10:	e30b149c 	movw	r1, #46236	; 0xb49c
   14f14:	e3401001 	movt	r1, #1
   14f18:	e30b0550 	movw	r0, #46416	; 0xb550
   14f1c:	e3400001 	movt	r0, #1
   14f20:	e300212e 	movw	r2, #302	; 0x12e
   14f24:	ebffead7 	bl	fa88 <assertion_failed>
   14f28:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   14f2c:	e0843103 	add	r3, r4, r3, lsl #2
   14f30:	e59310b4 	ldr	r1, [r3, #180]	; 0xb4
   14f34:	eaffff61 	b	14cc0 <CPWMSoundBaseDevice::Start()+0x28>
   14f38:	e30b149c 	movw	r1, #46236	; 0xb49c
   14f3c:	e3401001 	movt	r1, #1
   14f40:	e30a0004 	movw	r0, #40964	; 0xa004
   14f44:	e3400001 	movt	r0, #1
   14f48:	e3a020e4 	mov	r2, #228	; 0xe4
   14f4c:	ebffeacd 	bl	fa88 <assertion_failed>
   14f50:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   14f54:	eaffff7d 	b	14d50 <CPWMSoundBaseDevice::Start()+0xb8>

00014f58 <CPWMSoundBaseDevice::InterruptStub(void*)>:
   14f58:	e92d4070 	push	{r4, r5, r6, lr}
   14f5c:	e2504000 	subs	r4, r0, #0
   14f60:	0a000058 	beq	150c8 <CPWMSoundBaseDevice::InterruptStub(void*)+0x170>
   14f64:	e5d430b3 	ldrb	r3, [r4, #179]	; 0xb3
   14f68:	e3530000 	cmp	r3, #0
   14f6c:	0a000048 	beq	15094 <CPWMSoundBaseDevice::InterruptStub(void*)+0x13c>
   14f70:	e3a03a07 	mov	r3, #28672	; 0x7000
   14f74:	e3433f00 	movt	r3, #16128	; 0x3f00
   14f78:	e5933fe0 	ldr	r3, [r3, #4064]	; 0xfe0
   14f7c:	e3130001 	tst	r3, #1
   14f80:	0a00003c 	beq	15078 <CPWMSoundBaseDevice::InterruptStub(void*)+0x120>
   14f84:	e3a03a07 	mov	r3, #28672	; 0x7000
   14f88:	e3433f00 	movt	r3, #16128	; 0x3f00
   14f8c:	e3a02001 	mov	r2, #1
   14f90:	e5832fe0 	str	r2, [r3, #4064]	; 0xfe0
   14f94:	e5935000 	ldr	r5, [r3]
   14f98:	e3150004 	tst	r5, #4
   14f9c:	0a00002e 	beq	1505c <CPWMSoundBaseDevice::InterruptStub(void*)+0x104>
   14fa0:	e3a03a07 	mov	r3, #28672	; 0x7000
   14fa4:	e3433f00 	movt	r3, #16128	; 0x3f00
   14fa8:	e3150c01 	tst	r5, #256	; 0x100
   14fac:	e5835000 	str	r5, [r3]
   14fb0:	1a000026 	bne	15050 <CPWMSoundBaseDevice::InterruptStub(void*)+0xf8>
   14fb4:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
   14fb8:	e3500000 	cmp	r0, #0
   14fbc:	1a00003b 	bne	150b0 <CPWMSoundBaseDevice::InterruptStub(void*)+0x158>
   14fc0:	e5d430b3 	ldrb	r3, [r4, #179]	; 0xb3
   14fc4:	e6ef3073 	uxtb	r3, r3
   14fc8:	e3530002 	cmp	r3, #2
   14fcc:	0a00000e 	beq	1500c <CPWMSoundBaseDevice::InterruptStub(void*)+0xb4>
   14fd0:	e3530003 	cmp	r3, #3
   14fd4:	0a000042 	beq	150e4 <CPWMSoundBaseDevice::InterruptStub(void*)+0x18c>
   14fd8:	e3530001 	cmp	r3, #1
   14fdc:	0a000006 	beq	14ffc <CPWMSoundBaseDevice::InterruptStub(void*)+0xa4>
   14fe0:	e30b149c 	movw	r1, #46236	; 0xb49c
   14fe4:	e3401001 	movt	r1, #1
   14fe8:	e30b0b90 	movw	r0, #48016	; 0xbb90
   14fec:	e3400001 	movt	r0, #1
   14ff0:	e300219b 	movw	r2, #411	; 0x19b
   14ff4:	ebffeaa3 	bl	fa88 <assertion_failed>
   14ff8:	ea00000f 	b	1503c <CPWMSoundBaseDevice::InterruptStub(void*)+0xe4>
   14ffc:	e1a00004 	mov	r0, r4
   15000:	ebfffee4 	bl	14b98 <CPWMSoundBaseDevice::GetNextChunk()>
   15004:	e3500000 	cmp	r0, #0
   15008:	1a00000b 	bne	1503c <CPWMSoundBaseDevice::InterruptStub(void*)+0xe4>
   1500c:	e3a03a07 	mov	r3, #28672	; 0x7000
   15010:	e3433f00 	movt	r3, #16128	; 0x3f00
   15014:	e3a02903 	mov	r2, #49152	; 0xc000
   15018:	e3432f20 	movt	r2, #16160	; 0x3f20
   1501c:	e3a00000 	mov	r0, #0
   15020:	e3a01003 	mov	r1, #3
   15024:	e583001c 	str	r0, [r3, #28]
   15028:	e5923000 	ldr	r3, [r2]
   1502c:	e3833b01 	orr	r3, r3, #1024	; 0x400
   15030:	e3833004 	orr	r3, r3, #4
   15034:	e5823000 	str	r3, [r2]
   15038:	e5c410b3 	strb	r1, [r4, #179]	; 0xb3
   1503c:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
   15040:	e3530000 	cmp	r3, #0
   15044:	08bd8070 	popeq	{r4, r5, r6, pc}
   15048:	e8bd4070 	pop	{r4, r5, r6, lr}
   1504c:	eaffd930 	b	b514 <LeaveCritical>
   15050:	e3a03004 	mov	r3, #4
   15054:	e5c430b3 	strb	r3, [r4, #179]	; 0xb3
   15058:	e8bd8070 	pop	{r4, r5, r6, pc}
   1505c:	e30b149c 	movw	r1, #46236	; 0xb49c
   15060:	e3401001 	movt	r1, #1
   15064:	e30b0688 	movw	r0, #46728	; 0xb688
   15068:	e3400001 	movt	r0, #1
   1506c:	e3002172 	movw	r2, #370	; 0x172
   15070:	ebffea84 	bl	fa88 <assertion_failed>
   15074:	eaffffc9 	b	14fa0 <CPWMSoundBaseDevice::InterruptStub(void*)+0x48>
   15078:	e30b149c 	movw	r1, #46236	; 0xb49c
   1507c:	e3401001 	movt	r1, #1
   15080:	e30b0670 	movw	r0, #46704	; 0xb670
   15084:	e3400001 	movt	r0, #1
   15088:	e300216e 	movw	r2, #366	; 0x16e
   1508c:	ebffea7d 	bl	fa88 <assertion_failed>
   15090:	eaffffbb 	b	14f84 <CPWMSoundBaseDevice::InterruptStub(void*)+0x2c>
   15094:	e30b149c 	movw	r1, #46236	; 0xb49c
   15098:	e3401001 	movt	r1, #1
   1509c:	e30b0658 	movw	r0, #46680	; 0xb658
   150a0:	e3400001 	movt	r0, #1
   150a4:	e3002166 	movw	r2, #358	; 0x166
   150a8:	ebffea76 	bl	fa88 <assertion_failed>
   150ac:	eaffffaf 	b	14f70 <CPWMSoundBaseDevice::InterruptStub(void*)+0x18>
   150b0:	ebffd8ea 	bl	b460 <EnterCritical>
   150b4:	e5d430b3 	ldrb	r3, [r4, #179]	; 0xb3
   150b8:	e6ef3073 	uxtb	r3, r3
   150bc:	e3530002 	cmp	r3, #2
   150c0:	1affffc2 	bne	14fd0 <CPWMSoundBaseDevice::InterruptStub(void*)+0x78>
   150c4:	eaffffd0 	b	1500c <CPWMSoundBaseDevice::InterruptStub(void*)+0xb4>
   150c8:	e30b149c 	movw	r1, #46236	; 0xb49c
   150cc:	e3401001 	movt	r1, #1
   150d0:	e3090ad4 	movw	r0, #39636	; 0x9ad4
   150d4:	e3400001 	movt	r0, #1
   150d8:	e30021a5 	movw	r2, #421	; 0x1a5
   150dc:	ebffea69 	bl	fa88 <assertion_failed>
   150e0:	eaffff9f 	b	14f64 <CPWMSoundBaseDevice::InterruptStub(void*)+0xc>
   150e4:	e3a03000 	mov	r3, #0
   150e8:	e5c430b3 	strb	r3, [r4, #179]	; 0xb3
   150ec:	eaffffd2 	b	1503c <CPWMSoundBaseDevice::InterruptStub(void*)+0xe4>

000150f0 <CPWMSoundBaseDevice::RunPWM()>:
   150f0:	e3a03000 	mov	r3, #0
   150f4:	e92d4010 	push	{r4, lr}
   150f8:	e1a04000 	mov	r4, r0
   150fc:	e1a02003 	mov	r2, r3
   15100:	e28000b0 	add	r0, r0, #176	; 0xb0
   15104:	e3a01002 	mov	r1, #2
   15108:	eb001178 	bl	196f0 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)>
   1510c:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   15110:	ebffdd20 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   15114:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
   15118:	e2423c01 	sub	r3, r2, #256	; 0x100
   1511c:	e3530cff 	cmp	r3, #65280	; 0xff00
   15120:	3a000006 	bcc	15140 <CPWMSoundBaseDevice::RunPWM()+0x50>
   15124:	e300214a 	movw	r2, #330	; 0x14a
   15128:	e30b149c 	movw	r1, #46236	; 0xb49c
   1512c:	e3401001 	movt	r1, #1
   15130:	e30b04e0 	movw	r0, #46304	; 0xb4e0
   15134:	e3400001 	movt	r0, #1
   15138:	ebffea52 	bl	fa88 <assertion_failed>
   1513c:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
   15140:	e3a03903 	mov	r3, #49152	; 0xc000
   15144:	e3433f20 	movt	r3, #16160	; 0x3f20
   15148:	e3021161 	movw	r1, #8545	; 0x2161
   1514c:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   15150:	e5832010 	str	r2, [r3, #16]
   15154:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
   15158:	e5832020 	str	r2, [r3, #32]
   1515c:	e8bd4010 	pop	{r4, lr}
   15160:	e5831000 	str	r1, [r3]
   15164:	eaffdd0b 	b	c598 <CTimer::SimpleusDelay(unsigned int)>

00015168 <CPWMSoundBaseDevice::StopPWM()>:
   15168:	e3a03903 	mov	r3, #49152	; 0xc000
   1516c:	e3433f20 	movt	r3, #16160	; 0x3f20
   15170:	e92d4010 	push	{r4, lr}
   15174:	e3a02000 	mov	r2, #0
   15178:	e1a04000 	mov	r4, r0
   1517c:	e5832008 	str	r2, [r3, #8]
   15180:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   15184:	e5832000 	str	r2, [r3]
   15188:	ebffdd02 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   1518c:	e28400b0 	add	r0, r4, #176	; 0xb0
   15190:	eb001195 	bl	197ec <CGPIOClock::Stop()>
   15194:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   15198:	e8bd4010 	pop	{r4, lr}
   1519c:	eaffdcfd 	b	c598 <CTimer::SimpleusDelay(unsigned int)>

000151a0 <CPWMSoundBaseDevice::InterruptHandler()>:
   151a0:	e5d030b3 	ldrb	r3, [r0, #179]	; 0xb3
   151a4:	e92d4070 	push	{r4, r5, r6, lr}
   151a8:	e1a04000 	mov	r4, r0
   151ac:	e3530000 	cmp	r3, #0
   151b0:	0a000048 	beq	152d8 <CPWMSoundBaseDevice::InterruptHandler()+0x138>
   151b4:	e3a03a07 	mov	r3, #28672	; 0x7000
   151b8:	e3433f00 	movt	r3, #16128	; 0x3f00
   151bc:	e5933fe0 	ldr	r3, [r3, #4064]	; 0xfe0
   151c0:	e3130001 	tst	r3, #1
   151c4:	0a00003c 	beq	152bc <CPWMSoundBaseDevice::InterruptHandler()+0x11c>
   151c8:	e3a03a07 	mov	r3, #28672	; 0x7000
   151cc:	e3433f00 	movt	r3, #16128	; 0x3f00
   151d0:	e3a02001 	mov	r2, #1
   151d4:	e5832fe0 	str	r2, [r3, #4064]	; 0xfe0
   151d8:	e5935000 	ldr	r5, [r3]
   151dc:	e3150004 	tst	r5, #4
   151e0:	0a00002e 	beq	152a0 <CPWMSoundBaseDevice::InterruptHandler()+0x100>
   151e4:	e3a03a07 	mov	r3, #28672	; 0x7000
   151e8:	e3433f00 	movt	r3, #16128	; 0x3f00
   151ec:	e3150c01 	tst	r5, #256	; 0x100
   151f0:	e5835000 	str	r5, [r3]
   151f4:	1a000026 	bne	15294 <CPWMSoundBaseDevice::InterruptHandler()+0xf4>
   151f8:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
   151fc:	e3500000 	cmp	r0, #0
   15200:	1a00003b 	bne	152f4 <CPWMSoundBaseDevice::InterruptHandler()+0x154>
   15204:	e5d430b3 	ldrb	r3, [r4, #179]	; 0xb3
   15208:	e6ef3073 	uxtb	r3, r3
   1520c:	e3530002 	cmp	r3, #2
   15210:	0a00000e 	beq	15250 <CPWMSoundBaseDevice::InterruptHandler()+0xb0>
   15214:	e3530003 	cmp	r3, #3
   15218:	0a00003b 	beq	1530c <CPWMSoundBaseDevice::InterruptHandler()+0x16c>
   1521c:	e3530001 	cmp	r3, #1
   15220:	0a000006 	beq	15240 <CPWMSoundBaseDevice::InterruptHandler()+0xa0>
   15224:	e30b149c 	movw	r1, #46236	; 0xb49c
   15228:	e3401001 	movt	r1, #1
   1522c:	e30b0b90 	movw	r0, #48016	; 0xbb90
   15230:	e3400001 	movt	r0, #1
   15234:	e300219b 	movw	r2, #411	; 0x19b
   15238:	ebffea12 	bl	fa88 <assertion_failed>
   1523c:	ea00000f 	b	15280 <CPWMSoundBaseDevice::InterruptHandler()+0xe0>
   15240:	e1a00004 	mov	r0, r4
   15244:	ebfffe53 	bl	14b98 <CPWMSoundBaseDevice::GetNextChunk()>
   15248:	e3500000 	cmp	r0, #0
   1524c:	1a00000b 	bne	15280 <CPWMSoundBaseDevice::InterruptHandler()+0xe0>
   15250:	e3a03a07 	mov	r3, #28672	; 0x7000
   15254:	e3433f00 	movt	r3, #16128	; 0x3f00
   15258:	e3a02903 	mov	r2, #49152	; 0xc000
   1525c:	e3432f20 	movt	r2, #16160	; 0x3f20
   15260:	e3a00000 	mov	r0, #0
   15264:	e3a01003 	mov	r1, #3
   15268:	e583001c 	str	r0, [r3, #28]
   1526c:	e5923000 	ldr	r3, [r2]
   15270:	e3833b01 	orr	r3, r3, #1024	; 0x400
   15274:	e3833004 	orr	r3, r3, #4
   15278:	e5823000 	str	r3, [r2]
   1527c:	e5c410b3 	strb	r1, [r4, #179]	; 0xb3
   15280:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
   15284:	e3530000 	cmp	r3, #0
   15288:	08bd8070 	popeq	{r4, r5, r6, pc}
   1528c:	e8bd4070 	pop	{r4, r5, r6, lr}
   15290:	eaffd89f 	b	b514 <LeaveCritical>
   15294:	e3a03004 	mov	r3, #4
   15298:	e5c430b3 	strb	r3, [r4, #179]	; 0xb3
   1529c:	e8bd8070 	pop	{r4, r5, r6, pc}
   152a0:	e30b149c 	movw	r1, #46236	; 0xb49c
   152a4:	e3401001 	movt	r1, #1
   152a8:	e30b0688 	movw	r0, #46728	; 0xb688
   152ac:	e3400001 	movt	r0, #1
   152b0:	e3002172 	movw	r2, #370	; 0x172
   152b4:	ebffe9f3 	bl	fa88 <assertion_failed>
   152b8:	eaffffc9 	b	151e4 <CPWMSoundBaseDevice::InterruptHandler()+0x44>
   152bc:	e30b149c 	movw	r1, #46236	; 0xb49c
   152c0:	e3401001 	movt	r1, #1
   152c4:	e30b0670 	movw	r0, #46704	; 0xb670
   152c8:	e3400001 	movt	r0, #1
   152cc:	e300216e 	movw	r2, #366	; 0x16e
   152d0:	ebffe9ec 	bl	fa88 <assertion_failed>
   152d4:	eaffffbb 	b	151c8 <CPWMSoundBaseDevice::InterruptHandler()+0x28>
   152d8:	e30b149c 	movw	r1, #46236	; 0xb49c
   152dc:	e3401001 	movt	r1, #1
   152e0:	e30b0658 	movw	r0, #46680	; 0xb658
   152e4:	e3400001 	movt	r0, #1
   152e8:	e3002166 	movw	r2, #358	; 0x166
   152ec:	ebffe9e5 	bl	fa88 <assertion_failed>
   152f0:	eaffffaf 	b	151b4 <CPWMSoundBaseDevice::InterruptHandler()+0x14>
   152f4:	ebffd859 	bl	b460 <EnterCritical>
   152f8:	e5d430b3 	ldrb	r3, [r4, #179]	; 0xb3
   152fc:	e6ef3073 	uxtb	r3, r3
   15300:	e3530002 	cmp	r3, #2
   15304:	1affffc2 	bne	15214 <CPWMSoundBaseDevice::InterruptHandler()+0x74>
   15308:	eaffffd0 	b	15250 <CPWMSoundBaseDevice::InterruptHandler()+0xb0>
   1530c:	e3a03000 	mov	r3, #0
   15310:	e5c430b3 	strb	r3, [r4, #179]	; 0xb3
   15314:	eaffffd9 	b	15280 <CPWMSoundBaseDevice::InterruptHandler()+0xe0>

00015318 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)>:
   15318:	e92d4070 	push	{r4, r5, r6, lr}
   1531c:	e3510001 	cmp	r1, #1
   15320:	e1a05001 	mov	r5, r1
   15324:	e1a04000 	mov	r4, r0
   15328:	9a000005 	bls	15344 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)+0x2c>
   1532c:	e30b149c 	movw	r1, #46236	; 0xb49c
   15330:	e3401001 	movt	r1, #1
   15334:	e30b0698 	movw	r0, #46744	; 0xb698
   15338:	e3400001 	movt	r0, #1
   1533c:	e3a02f6b 	mov	r2, #428	; 0x1ac
   15340:	ebffe9d0 	bl	fa88 <assertion_failed>
   15344:	e5940058 	ldr	r0, [r4, #88]	; 0x58
   15348:	e0844105 	add	r4, r4, r5, lsl #2
   1534c:	e370022e 	cmn	r0, #-536870910	; 0xe0000002
   15350:	91a00100 	lslls	r0, r0, #2
   15354:	83e00000 	mvnhi	r0, #0
   15358:	eb000d01 	bl	18764 <operator new[](unsigned int)>
   1535c:	e58400b4 	str	r0, [r4, #180]	; 0xb4
   15360:	e3a0003f 	mov	r0, #63	; 0x3f
   15364:	eb000cfe 	bl	18764 <operator new[](unsigned int)>
   15368:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   1536c:	e280301f 	add	r3, r0, #31
   15370:	e59420b4 	ldr	r2, [r4, #180]	; 0xb4
   15374:	e3c3301f 	bic	r3, r3, #31
   15378:	e58400bc 	str	r0, [r4, #188]	; 0xbc
   1537c:	e58430c4 	str	r3, [r4, #196]	; 0xc4
   15380:	e2822103 	add	r2, r2, #-1073741824	; 0xc0000000
   15384:	e3001349 	movw	r1, #841	; 0x349
   15388:	e3401005 	movt	r1, #5
   1538c:	e5832004 	str	r2, [r3, #4]
   15390:	e3a02000 	mov	r2, #0
   15394:	e5831000 	str	r1, [r3]
   15398:	e30c1018 	movw	r1, #49176	; 0xc018
   1539c:	e3471e20 	movt	r1, #32288	; 0x7e20
   153a0:	e5831008 	str	r1, [r3, #8]
   153a4:	e5832010 	str	r2, [r3, #16]
   153a8:	edc30b06 	vstr	d16, [r3, #24]
   153ac:	e8bd8070 	pop	{r4, r5, r6, pc}

000153b0 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>:
   153b0:	e5d030b3 	ldrb	r3, [r0, #179]	; 0xb3
   153b4:	e59f213c 	ldr	r2, [pc, #316]	; 154f8 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x148>
   153b8:	e92d4070 	push	{r4, r5, r6, lr}
   153bc:	e3530000 	cmp	r3, #0
   153c0:	e1a04000 	mov	r4, r0
   153c4:	e5802000 	str	r2, [r0]
   153c8:	1a000038 	bne	154b0 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x100>
   153cc:	e3a03903 	mov	r3, #49152	; 0xc000
   153d0:	e3433f20 	movt	r3, #16160	; 0x3f20
   153d4:	e3a02000 	mov	r2, #0
   153d8:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   153dc:	e28450b0 	add	r5, r4, #176	; 0xb0
   153e0:	e5832008 	str	r2, [r3, #8]
   153e4:	e5832000 	str	r2, [r3]
   153e8:	ebffdc6a 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   153ec:	e1a00005 	mov	r0, r5
   153f0:	eb0010fd 	bl	197ec <CGPIOClock::Stop()>
   153f4:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   153f8:	ebffdc66 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   153fc:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   15400:	e3530000 	cmp	r3, #0
   15404:	0a000034 	beq	154dc <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x12c>
   15408:	e5d430b2 	ldrb	r3, [r4, #178]	; 0xb2
   1540c:	e3530000 	cmp	r3, #0
   15410:	1a00002d 	bne	154cc <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x11c>
   15414:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   15418:	e28430c4 	add	r3, r4, #196	; 0xc4
   1541c:	e59400bc 	ldr	r0, [r4, #188]	; 0xbc
   15420:	e3a02000 	mov	r2, #0
   15424:	e5842054 	str	r2, [r4, #84]	; 0x54
   15428:	e1500002 	cmp	r0, r2
   1542c:	f443078f 	vst1.32	{d16}, [r3]
   15430:	0a000000 	beq	15438 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x88>
   15434:	eb000ccc 	bl	1876c <operator delete[](void*)>
   15438:	e59400c0 	ldr	r0, [r4, #192]	; 0xc0
   1543c:	e3a03000 	mov	r3, #0
   15440:	e58430bc 	str	r3, [r4, #188]	; 0xbc
   15444:	e1500003 	cmp	r0, r3
   15448:	0a000000 	beq	15450 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0xa0>
   1544c:	eb000cc6 	bl	1876c <operator delete[](void*)>
   15450:	e59400b4 	ldr	r0, [r4, #180]	; 0xb4
   15454:	e3a03000 	mov	r3, #0
   15458:	e58430c0 	str	r3, [r4, #192]	; 0xc0
   1545c:	e1500003 	cmp	r0, r3
   15460:	0a000000 	beq	15468 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0xb8>
   15464:	eb000cc0 	bl	1876c <operator delete[](void*)>
   15468:	e59400b8 	ldr	r0, [r4, #184]	; 0xb8
   1546c:	e3a03000 	mov	r3, #0
   15470:	e58430b4 	str	r3, [r4, #180]	; 0xb4
   15474:	e1500003 	cmp	r0, r3
   15478:	0a000000 	beq	15480 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0xd0>
   1547c:	eb000cba 	bl	1876c <operator delete[](void*)>
   15480:	e3a03000 	mov	r3, #0
   15484:	e1a00005 	mov	r0, r5
   15488:	e58430b8 	str	r3, [r4, #184]	; 0xb8
   1548c:	eb00108b 	bl	196c0 <CGPIOClock::~CGPIOClock()>
   15490:	e2840088 	add	r0, r4, #136	; 0x88
   15494:	ebffd219 	bl	9d00 <CGPIOPin::~CGPIOPin()>
   15498:	e2840060 	add	r0, r4, #96	; 0x60
   1549c:	ebffd217 	bl	9d00 <CGPIOPin::~CGPIOPin()>
   154a0:	e1a00004 	mov	r0, r4
   154a4:	eb0007b0 	bl	1736c <CSoundBaseDevice::~CSoundBaseDevice()>
   154a8:	e1a00004 	mov	r0, r4
   154ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   154b0:	e30b149c 	movw	r1, #46236	; 0xb49c
   154b4:	e3401001 	movt	r1, #1
   154b8:	e30b05b8 	movw	r0, #46520	; 0xb5b8
   154bc:	e3400001 	movt	r0, #1
   154c0:	e3a020ad 	mov	r2, #173	; 0xad
   154c4:	ebffe96f 	bl	fa88 <assertion_failed>
   154c8:	eaffffbf 	b	153cc <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x1c>
   154cc:	e3a01010 	mov	r1, #16
   154d0:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   154d4:	ebfffa2a 	bl	13d84 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   154d8:	eaffffcd 	b	15414 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x64>
   154dc:	e30b149c 	movw	r1, #46236	; 0xb49c
   154e0:	e3401001 	movt	r1, #1
   154e4:	e30a0004 	movw	r0, #40964	; 0xa004
   154e8:	e3400001 	movt	r0, #1
   154ec:	e3a020b3 	mov	r2, #179	; 0xb3
   154f0:	ebffe964 	bl	fa88 <assertion_failed>
   154f4:	eaffffc3 	b	15408 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x58>
   154f8:	0001b46c 	.word	0x0001b46c

000154fc <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>:
   154fc:	e92d4010 	push	{r4, lr}
   15500:	e1a04000 	mov	r4, r0
   15504:	ebffffa9 	bl	153b0 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>
   15508:	e1a00004 	mov	r0, r4
   1550c:	e3a010d4 	mov	r1, #212	; 0xd4
   15510:	eb000c96 	bl	18770 <operator delete(void*, unsigned int)>
   15514:	e1a00004 	mov	r0, r4
   15518:	e8bd8010 	pop	{r4, pc}

0001551c <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   1551c:	e12fff1e 	bx	lr

00015520 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   15520:	e92d4010 	push	{r4, lr}
   15524:	e3a01010 	mov	r1, #16
   15528:	e1a04000 	mov	r4, r0
   1552c:	eb000c8f 	bl	18770 <operator delete(void*, unsigned int)>
   15530:	e1a00004 	mov	r0, r4
   15534:	e8bd8010 	pop	{r4, pc}

00015538 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
   15538:	e92d4030 	push	{r4, r5, lr}
   1553c:	e3a03000 	mov	r3, #0
   15540:	e59f2180 	ldr	r2, [pc, #384]	; 156c8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x190>
   15544:	e24dd024 	sub	sp, sp, #36	; 0x24
   15548:	e1a04000 	mov	r4, r0
   1554c:	e3510001 	cmp	r1, #1
   15550:	e5801004 	str	r1, [r0, #4]
   15554:	e5802000 	str	r2, [r0]
   15558:	e580300c 	str	r3, [r0, #12]
   1555c:	9a000002 	bls	1556c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x34>
   15560:	e1a00004 	mov	r0, r4
   15564:	e28dd024 	add	sp, sp, #36	; 0x24
   15568:	e8bd8030 	pop	{r4, r5, pc}
   1556c:	e30c57ec 	movw	r5, #51180	; 0xc7ec
   15570:	e3405001 	movt	r5, #1
   15574:	e5950000 	ldr	r0, [r5]
   15578:	e1500003 	cmp	r0, r3
   1557c:	1a00001c 	bne	155f4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xbc>
   15580:	e5953004 	ldr	r3, [r5, #4]
   15584:	e3530000 	cmp	r3, #0
   15588:	0a00001d 	beq	15604 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xcc>
   1558c:	e5953004 	ldr	r3, [r5, #4]
   15590:	e3530000 	cmp	r3, #0
   15594:	0afffff1 	beq	15560 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x28>
   15598:	e5950000 	ldr	r0, [r5]
   1559c:	e3500000 	cmp	r0, #0
   155a0:	1a000039 	bne	1568c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x154>
   155a4:	e1d410bc 	ldrh	r1, [r4, #12]
   155a8:	e3a02000 	mov	r2, #0
   155ac:	e1d430be 	ldrh	r3, [r4, #14]
   155b0:	e5842008 	str	r2, [r4, #8]
   155b4:	e0412003 	sub	r2, r1, r3
   155b8:	e6bf2072 	sxth	r2, r2
   155bc:	e3520000 	cmp	r2, #0
   155c0:	da00002d 	ble	1567c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x144>
   155c4:	e5940004 	ldr	r0, [r4, #4]
   155c8:	e2833001 	add	r3, r3, #1
   155cc:	e5952004 	ldr	r2, [r5, #4]
   155d0:	e6ff3073 	uxth	r3, r3
   155d4:	e1831801 	orr	r1, r3, r1, lsl #16
   155d8:	e1c430be 	strh	r3, [r4, #14]
   155dc:	e7821100 	str	r1, [r2, r0, lsl #2]
   155e0:	e5953000 	ldr	r3, [r5]
   155e4:	e3530000 	cmp	r3, #0
   155e8:	0affffdc 	beq	15560 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x28>
   155ec:	ebffd7c8 	bl	b514 <LeaveCritical>
   155f0:	eaffffda 	b	15560 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x28>
   155f4:	ebffd799 	bl	b460 <EnterCritical>
   155f8:	e5953004 	ldr	r3, [r5, #4]
   155fc:	e3530000 	cmp	r3, #0
   15600:	1a000013 	bne	15654 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x11c>
   15604:	e3a00001 	mov	r0, #1
   15608:	ebffd78c 	bl	b440 <CMemorySystem::GetCoherentPage(unsigned int)>
   1560c:	e5850004 	str	r0, [r5, #4]
   15610:	e28d000c 	add	r0, sp, #12
   15614:	ebffd11c 	bl	9a8c <CBcmPropertyTags::CBcmPropertyTags()>
   15618:	e595c004 	ldr	ip, [r5, #4]
   1561c:	e3a03000 	mov	r3, #0
   15620:	e28d000c 	add	r0, sp, #12
   15624:	e58d3000 	str	r3, [sp]
   15628:	e28d2010 	add	r2, sp, #16
   1562c:	e3081020 	movw	r1, #32800	; 0x8020
   15630:	e3401004 	movt	r1, #4
   15634:	e3a03010 	mov	r3, #16
   15638:	e28cc103 	add	ip, ip, #-1073741824	; 0xc0000000
   1563c:	e58dc01c 	str	ip, [sp, #28]
   15640:	ebffd11c 	bl	9ab8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   15644:	e3500000 	cmp	r0, #0
   15648:	0a000011 	beq	15694 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x15c>
   1564c:	e28d000c 	add	r0, sp, #12
   15650:	ebffd113 	bl	9aa4 <CBcmPropertyTags::~CBcmPropertyTags()>
   15654:	e5953000 	ldr	r3, [r5]
   15658:	e3530000 	cmp	r3, #0
   1565c:	0a000000 	beq	15664 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x12c>
   15660:	ebffd7ab 	bl	b514 <LeaveCritical>
   15664:	e5943004 	ldr	r3, [r4, #4]
   15668:	e3530001 	cmp	r3, #1
   1566c:	9affffc6 	bls	1558c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x54>
   15670:	e1a00004 	mov	r0, r4
   15674:	e28dd024 	add	sp, sp, #36	; 0x24
   15678:	e8bd8030 	pop	{r4, r5, pc}
   1567c:	e5953000 	ldr	r3, [r5]
   15680:	e3530000 	cmp	r3, #0
   15684:	0affffb5 	beq	15560 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x28>
   15688:	eaffffd7 	b	155ec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xb4>
   1568c:	ebffd773 	bl	b460 <EnterCritical>
   15690:	eaffffc3 	b	155a4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x6c>
   15694:	e3a03010 	mov	r3, #16
   15698:	e58d0000 	str	r0, [sp]
   1569c:	e28d2010 	add	r2, sp, #16
   156a0:	e3a01010 	mov	r1, #16
   156a4:	e3401004 	movt	r1, #4
   156a8:	e28d000c 	add	r0, sp, #12
   156ac:	ebffd101 	bl	9ab8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   156b0:	e3500000 	cmp	r0, #0
   156b4:	05850004 	streq	r0, [r5, #4]
   156b8:	159d301c 	ldrne	r3, [sp, #28]
   156bc:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   156c0:	15853004 	strne	r3, [r5, #4]
   156c4:	eaffffe0 	b	1564c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x114>
   156c8:	0001b6ac 	.word	0x0001b6ac

000156cc <CVirtualGPIOPin::Write(unsigned int)>:
   156cc:	e5903004 	ldr	r3, [r0, #4]
   156d0:	e3530001 	cmp	r3, #1
   156d4:	812fff1e 	bxhi	lr
   156d8:	e92d4070 	push	{r4, r5, r6, lr}
   156dc:	e30c57ec 	movw	r5, #51180	; 0xc7ec
   156e0:	e3405001 	movt	r5, #1
   156e4:	e3510001 	cmp	r1, #1
   156e8:	93a03000 	movls	r3, #0
   156ec:	83a03001 	movhi	r3, #1
   156f0:	e5952004 	ldr	r2, [r5, #4]
   156f4:	e3520000 	cmp	r2, #0
   156f8:	03a03001 	moveq	r3, #1
   156fc:	e3530000 	cmp	r3, #0
   15700:	18bd8070 	popne	{r4, r5, r6, pc}
   15704:	e1a04000 	mov	r4, r0
   15708:	e5950000 	ldr	r0, [r5]
   1570c:	e1a06001 	mov	r6, r1
   15710:	e3500000 	cmp	r0, #0
   15714:	1a00001e 	bne	15794 <CVirtualGPIOPin::Write(unsigned int)+0xc8>
   15718:	e1d410bc 	ldrh	r1, [r4, #12]
   1571c:	e1d430be 	ldrh	r3, [r4, #14]
   15720:	e5846008 	str	r6, [r4, #8]
   15724:	e0412003 	sub	r2, r1, r3
   15728:	e6bf2072 	sxth	r2, r2
   1572c:	e3520000 	cmp	r2, #0
   15730:	da000011 	ble	1577c <CVirtualGPIOPin::Write(unsigned int)+0xb0>
   15734:	e3560000 	cmp	r6, #0
   15738:	0a000004 	beq	15750 <CVirtualGPIOPin::Write(unsigned int)+0x84>
   1573c:	e5953000 	ldr	r3, [r5]
   15740:	e3530000 	cmp	r3, #0
   15744:	08bd8070 	popeq	{r4, r5, r6, pc}
   15748:	e8bd4070 	pop	{r4, r5, r6, lr}
   1574c:	eaffd770 	b	b514 <LeaveCritical>
   15750:	e2833001 	add	r3, r3, #1
   15754:	e6ff3073 	uxth	r3, r3
   15758:	e1c430be 	strh	r3, [r4, #14]
   1575c:	e5940004 	ldr	r0, [r4, #4]
   15760:	e1833801 	orr	r3, r3, r1, lsl #16
   15764:	e5952004 	ldr	r2, [r5, #4]
   15768:	e7823100 	str	r3, [r2, r0, lsl #2]
   1576c:	e5953000 	ldr	r3, [r5]
   15770:	e3530000 	cmp	r3, #0
   15774:	08bd8070 	popeq	{r4, r5, r6, pc}
   15778:	eafffff2 	b	15748 <CVirtualGPIOPin::Write(unsigned int)+0x7c>
   1577c:	e3560000 	cmp	r6, #0
   15780:	0affffed 	beq	1573c <CVirtualGPIOPin::Write(unsigned int)+0x70>
   15784:	e2811001 	add	r1, r1, #1
   15788:	e6ff1071 	uxth	r1, r1
   1578c:	e1c410bc 	strh	r1, [r4, #12]
   15790:	eafffff1 	b	1575c <CVirtualGPIOPin::Write(unsigned int)+0x90>
   15794:	ebffd731 	bl	b460 <EnterCritical>
   15798:	eaffffde 	b	15718 <CVirtualGPIOPin::Write(unsigned int)+0x4c>

0001579c <CVirtualGPIOPin::Invert()>:
   1579c:	e5903004 	ldr	r3, [r0, #4]
   157a0:	e3530001 	cmp	r3, #1
   157a4:	812fff1e 	bxhi	lr
   157a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   157ac:	e30c57ec 	movw	r5, #51180	; 0xc7ec
   157b0:	e3405001 	movt	r5, #1
   157b4:	e5907008 	ldr	r7, [r0, #8]
   157b8:	e5952004 	ldr	r2, [r5, #4]
   157bc:	e2276001 	eor	r6, r7, #1
   157c0:	e3560001 	cmp	r6, #1
   157c4:	93a03000 	movls	r3, #0
   157c8:	83a03001 	movhi	r3, #1
   157cc:	e3520000 	cmp	r2, #0
   157d0:	03a03001 	moveq	r3, #1
   157d4:	e3530000 	cmp	r3, #0
   157d8:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   157dc:	e1a04000 	mov	r4, r0
   157e0:	e5950000 	ldr	r0, [r5]
   157e4:	e3500000 	cmp	r0, #0
   157e8:	1a00001e 	bne	15868 <CVirtualGPIOPin::Invert()+0xcc>
   157ec:	e1d410bc 	ldrh	r1, [r4, #12]
   157f0:	e1d430be 	ldrh	r3, [r4, #14]
   157f4:	e5846008 	str	r6, [r4, #8]
   157f8:	e0412003 	sub	r2, r1, r3
   157fc:	e6bf2072 	sxth	r2, r2
   15800:	e3520000 	cmp	r2, #0
   15804:	da000011 	ble	15850 <CVirtualGPIOPin::Invert()+0xb4>
   15808:	e3570001 	cmp	r7, #1
   1580c:	0a000004 	beq	15824 <CVirtualGPIOPin::Invert()+0x88>
   15810:	e5953000 	ldr	r3, [r5]
   15814:	e3530000 	cmp	r3, #0
   15818:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1581c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   15820:	eaffd73b 	b	b514 <LeaveCritical>
   15824:	e2833001 	add	r3, r3, #1
   15828:	e6ff3073 	uxth	r3, r3
   1582c:	e1c430be 	strh	r3, [r4, #14]
   15830:	e5940004 	ldr	r0, [r4, #4]
   15834:	e1833801 	orr	r3, r3, r1, lsl #16
   15838:	e5952004 	ldr	r2, [r5, #4]
   1583c:	e7823100 	str	r3, [r2, r0, lsl #2]
   15840:	e5953000 	ldr	r3, [r5]
   15844:	e3530000 	cmp	r3, #0
   15848:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1584c:	eafffff2 	b	1581c <CVirtualGPIOPin::Invert()+0x80>
   15850:	e3570001 	cmp	r7, #1
   15854:	0affffed 	beq	15810 <CVirtualGPIOPin::Invert()+0x74>
   15858:	e2811001 	add	r1, r1, #1
   1585c:	e6ff1071 	uxth	r1, r1
   15860:	e1c410bc 	strh	r1, [r4, #12]
   15864:	eafffff1 	b	15830 <CVirtualGPIOPin::Invert()+0x94>
   15868:	ebffd6fc 	bl	b460 <EnterCritical>
   1586c:	eaffffde 	b	157ec <CVirtualGPIOPin::Invert()+0x50>

00015870 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   15870:	e30c37ec 	movw	r3, #51180	; 0xc7ec
   15874:	e3403001 	movt	r3, #1
   15878:	e3a02000 	mov	r2, #0
   1587c:	e5832000 	str	r2, [r3]
   15880:	e12fff1e 	bx	lr

00015884 <CMachineInfo::CMachineInfo()>:
   15884:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   15888:	e30c37f4 	movw	r3, #51188	; 0xc7f4
   1588c:	e3403001 	movt	r3, #1
   15890:	e92d4070 	push	{r4, r5, r6, lr}
   15894:	e1a04000 	mov	r4, r0
   15898:	e2841008 	add	r1, r4, #8
   1589c:	e5935000 	ldr	r5, [r3]
   158a0:	e3a02000 	mov	r2, #0
   158a4:	e3a0000c 	mov	r0, #12
   158a8:	e3a06003 	mov	r6, #3
   158ac:	e5c40004 	strb	r0, [r4, #4]
   158b0:	e24dd020 	sub	sp, sp, #32
   158b4:	e5842000 	str	r2, [r4]
   158b8:	e1550002 	cmp	r5, r2
   158bc:	f441078f 	vst1.32	{d16}, [r1]
   158c0:	e5842014 	str	r2, [r4, #20]
   158c4:	e5c46010 	strb	r6, [r4, #16]
   158c8:	0a00000d 	beq	15904 <CMachineInfo::CMachineInfo()+0x80>
   158cc:	e5953000 	ldr	r3, [r5]
   158d0:	e2852008 	add	r2, r5, #8
   158d4:	e5843000 	str	r3, [r4]
   158d8:	e1a00004 	mov	r0, r4
   158dc:	e5d53004 	ldrb	r3, [r5, #4]
   158e0:	f462078f 	vld1.32	{d16}, [r2]
   158e4:	e5c43004 	strb	r3, [r4, #4]
   158e8:	e5d53010 	ldrb	r3, [r5, #16]
   158ec:	f441078f 	vst1.32	{d16}, [r1]
   158f0:	e5952014 	ldr	r2, [r5, #20]
   158f4:	e5842014 	str	r2, [r4, #20]
   158f8:	e5c43010 	strb	r3, [r4, #16]
   158fc:	e28dd020 	add	sp, sp, #32
   15900:	e8bd8070 	pop	{r4, r5, r6, pc}
   15904:	e28d000c 	add	r0, sp, #12
   15908:	e5834000 	str	r4, [r3]
   1590c:	ebffd05e 	bl	9a8c <CBcmPropertyTags::CBcmPropertyTags()>
   15910:	e3a03010 	mov	r3, #16
   15914:	e58d5000 	str	r5, [sp]
   15918:	e28d000c 	add	r0, sp, #12
   1591c:	e3a01002 	mov	r1, #2
   15920:	e3401001 	movt	r1, #1
   15924:	e08d2003 	add	r2, sp, r3
   15928:	ebffd062 	bl	9ab8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1592c:	e3500000 	cmp	r0, #0
   15930:	0a000034 	beq	15a08 <CMachineInfo::CMachineInfo()+0x184>
   15934:	e59d301c 	ldr	r3, [sp, #28]
   15938:	e5843000 	str	r3, [r4]
   1593c:	e2132502 	ands	r2, r3, #8388608	; 0x800000
   15940:	0a000035 	beq	15a1c <CMachineInfo::CMachineInfo()+0x198>
   15944:	e7e72253 	ubfx	r2, r3, #4, #8
   15948:	e3520000 	cmp	r2, #0
   1594c:	0a000012 	beq	1599c <CMachineInfo::CMachineInfo()+0x118>
   15950:	e3520001 	cmp	r2, #1
   15954:	0a000010 	beq	1599c <CMachineInfo::CMachineInfo()+0x118>
   15958:	e3520002 	cmp	r2, #2
   1595c:	0a00000e 	beq	1599c <CMachineInfo::CMachineInfo()+0x118>
   15960:	e3520003 	cmp	r2, #3
   15964:	0a00000c 	beq	1599c <CMachineInfo::CMachineInfo()+0x118>
   15968:	e3520004 	cmp	r2, #4
   1596c:	0a00000a 	beq	1599c <CMachineInfo::CMachineInfo()+0x118>
   15970:	e3520006 	cmp	r2, #6
   15974:	0a000062 	beq	15b04 <CMachineInfo::CMachineInfo()+0x280>
   15978:	e3520008 	cmp	r2, #8
   1597c:	0a000062 	beq	15b0c <CMachineInfo::CMachineInfo()+0x288>
   15980:	e3520009 	cmp	r2, #9
   15984:	0a000064 	beq	15b1c <CMachineInfo::CMachineInfo()+0x298>
   15988:	e352000a 	cmp	r2, #10
   1598c:	0a000068 	beq	15b34 <CMachineInfo::CMachineInfo()+0x2b0>
   15990:	e352000c 	cmp	r2, #12
   15994:	1a00001b 	bne	15a08 <CMachineInfo::CMachineInfo()+0x184>
   15998:	e3a02009 	mov	r2, #9
   1599c:	e30b06b8 	movw	r0, #46776	; 0xb6b8
   159a0:	e3400001 	movt	r0, #1
   159a4:	e3a0e00c 	mov	lr, #12
   159a8:	e7e2ca53 	ubfx	ip, r3, #20, #3
   159ac:	e3a01c01 	mov	r1, #256	; 0x100
   159b0:	e022029e 	mla	r2, lr, r2, r0
   159b4:	e1a01c11 	lsl	r1, r1, ip
   159b8:	e5841014 	str	r1, [r4, #20]
   159bc:	e203100f 	and	r1, r3, #15
   159c0:	e7e33653 	ubfx	r3, r3, #12, #4
   159c4:	e5c43010 	strb	r3, [r4, #16]
   159c8:	e3530002 	cmp	r3, #2
   159cc:	e2811001 	add	r1, r1, #1
   159d0:	e5d23004 	ldrb	r3, [r2, #4]
   159d4:	e5922008 	ldr	r2, [r2, #8]
   159d8:	e5842008 	str	r2, [r4, #8]
   159dc:	83a02003 	movhi	r2, #3
   159e0:	e5c43004 	strb	r3, [r4, #4]
   159e4:	85c42010 	strbhi	r2, [r4, #16]
   159e8:	e3530003 	cmp	r3, #3
   159ec:	035c0000 	cmpeq	ip, #0
   159f0:	e584100c 	str	r1, [r4, #12]
   159f4:	1a000003 	bne	15a08 <CMachineInfo::CMachineInfo()+0x184>
   159f8:	e3510001 	cmp	r1, #1
   159fc:	03a03001 	moveq	r3, #1
   15a00:	13a03002 	movne	r3, #2
   15a04:	e5c43004 	strb	r3, [r4, #4]
   15a08:	e28d000c 	add	r0, sp, #12
   15a0c:	ebffd024 	bl	9aa4 <CBcmPropertyTags::~CBcmPropertyTags()>
   15a10:	e1a00004 	mov	r0, r4
   15a14:	e28dd020 	add	sp, sp, #32
   15a18:	e8bd8070 	pop	{r4, r5, r6, pc}
   15a1c:	e3530002 	cmp	r3, #2
   15a20:	0a000020 	beq	15aa8 <CMachineInfo::CMachineInfo()+0x224>
   15a24:	e3530003 	cmp	r3, #3
   15a28:	0a00002d 	beq	15ae4 <CMachineInfo::CMachineInfo()+0x260>
   15a2c:	e3530004 	cmp	r3, #4
   15a30:	0a000029 	beq	15adc <CMachineInfo::CMachineInfo()+0x258>
   15a34:	e3530005 	cmp	r3, #5
   15a38:	0a00002b 	beq	15aec <CMachineInfo::CMachineInfo()+0x268>
   15a3c:	e3530006 	cmp	r3, #6
   15a40:	0a00002b 	beq	15af4 <CMachineInfo::CMachineInfo()+0x270>
   15a44:	e3530007 	cmp	r3, #7
   15a48:	0a00002b 	beq	15afc <CMachineInfo::CMachineInfo()+0x278>
   15a4c:	e3530008 	cmp	r3, #8
   15a50:	0a00002f 	beq	15b14 <CMachineInfo::CMachineInfo()+0x290>
   15a54:	e3530009 	cmp	r3, #9
   15a58:	0a000031 	beq	15b24 <CMachineInfo::CMachineInfo()+0x2a0>
   15a5c:	e353000d 	cmp	r3, #13
   15a60:	0a000031 	beq	15b2c <CMachineInfo::CMachineInfo()+0x2a8>
   15a64:	e353000e 	cmp	r3, #14
   15a68:	0a000033 	beq	15b3c <CMachineInfo::CMachineInfo()+0x2b8>
   15a6c:	e353000f 	cmp	r3, #15
   15a70:	0a000033 	beq	15b44 <CMachineInfo::CMachineInfo()+0x2c0>
   15a74:	e3530010 	cmp	r3, #16
   15a78:	0a000033 	beq	15b4c <CMachineInfo::CMachineInfo()+0x2c8>
   15a7c:	e3530011 	cmp	r3, #17
   15a80:	0a000033 	beq	15b54 <CMachineInfo::CMachineInfo()+0x2d0>
   15a84:	e3530012 	cmp	r3, #18
   15a88:	0a000033 	beq	15b5c <CMachineInfo::CMachineInfo()+0x2d8>
   15a8c:	e3530013 	cmp	r3, #19
   15a90:	0a000033 	beq	15b64 <CMachineInfo::CMachineInfo()+0x2e0>
   15a94:	e3530014 	cmp	r3, #20
   15a98:	0a000033 	beq	15b6c <CMachineInfo::CMachineInfo()+0x2e8>
   15a9c:	e3530015 	cmp	r3, #21
   15aa0:	1affffd8 	bne	15a08 <CMachineInfo::CMachineInfo()+0x184>
   15aa4:	e3a02010 	mov	r2, #16
   15aa8:	e30b66b8 	movw	r6, #46776	; 0xb6b8
   15aac:	e3406001 	movt	r6, #1
   15ab0:	e0866202 	add	r6, r6, r2, lsl #4
   15ab4:	e3a03001 	mov	r3, #1
   15ab8:	e5843008 	str	r3, [r4, #8]
   15abc:	e3a03000 	mov	r3, #0
   15ac0:	e5c43010 	strb	r3, [r4, #16]
   15ac4:	e5d6107c 	ldrb	r1, [r6, #124]	; 0x7c
   15ac8:	e1c628d0 	ldrd	r2, [r6, #128]	; 0x80
   15acc:	e5c41004 	strb	r1, [r4, #4]
   15ad0:	e584200c 	str	r2, [r4, #12]
   15ad4:	e5843014 	str	r3, [r4, #20]
   15ad8:	eaffffca 	b	15a08 <CMachineInfo::CMachineInfo()+0x184>
   15adc:	e3a02002 	mov	r2, #2
   15ae0:	eafffff0 	b	15aa8 <CMachineInfo::CMachineInfo()+0x224>
   15ae4:	e3a02001 	mov	r2, #1
   15ae8:	eaffffee 	b	15aa8 <CMachineInfo::CMachineInfo()+0x224>
   15aec:	e1a02006 	mov	r2, r6
   15af0:	eaffffec 	b	15aa8 <CMachineInfo::CMachineInfo()+0x224>
   15af4:	e3a02004 	mov	r2, #4
   15af8:	eaffffea 	b	15aa8 <CMachineInfo::CMachineInfo()+0x224>
   15afc:	e3a02005 	mov	r2, #5
   15b00:	eaffffe8 	b	15aa8 <CMachineInfo::CMachineInfo()+0x224>
   15b04:	e3a02005 	mov	r2, #5
   15b08:	eaffffa3 	b	1599c <CMachineInfo::CMachineInfo()+0x118>
   15b0c:	e3a02006 	mov	r2, #6
   15b10:	eaffffa1 	b	1599c <CMachineInfo::CMachineInfo()+0x118>
   15b14:	e3a02006 	mov	r2, #6
   15b18:	eaffffe2 	b	15aa8 <CMachineInfo::CMachineInfo()+0x224>
   15b1c:	e3a02007 	mov	r2, #7
   15b20:	eaffff9d 	b	1599c <CMachineInfo::CMachineInfo()+0x118>
   15b24:	e3a02007 	mov	r2, #7
   15b28:	eaffffde 	b	15aa8 <CMachineInfo::CMachineInfo()+0x224>
   15b2c:	e3a02008 	mov	r2, #8
   15b30:	eaffffdc 	b	15aa8 <CMachineInfo::CMachineInfo()+0x224>
   15b34:	e3a02008 	mov	r2, #8
   15b38:	eaffff97 	b	1599c <CMachineInfo::CMachineInfo()+0x118>
   15b3c:	e3a02009 	mov	r2, #9
   15b40:	eaffffd8 	b	15aa8 <CMachineInfo::CMachineInfo()+0x224>
   15b44:	e3a0200a 	mov	r2, #10
   15b48:	eaffffd6 	b	15aa8 <CMachineInfo::CMachineInfo()+0x224>
   15b4c:	e3a0200b 	mov	r2, #11
   15b50:	eaffffd4 	b	15aa8 <CMachineInfo::CMachineInfo()+0x224>
   15b54:	e3a0200c 	mov	r2, #12
   15b58:	eaffffd2 	b	15aa8 <CMachineInfo::CMachineInfo()+0x224>
   15b5c:	e3a0200d 	mov	r2, #13
   15b60:	eaffffd0 	b	15aa8 <CMachineInfo::CMachineInfo()+0x224>
   15b64:	e3a0200e 	mov	r2, #14
   15b68:	eaffffce 	b	15aa8 <CMachineInfo::CMachineInfo()+0x224>
   15b6c:	e3a0200f 	mov	r2, #15
   15b70:	eaffffcc 	b	15aa8 <CMachineInfo::CMachineInfo()+0x224>

00015b74 <CMachineInfo::~CMachineInfo()>:
   15b74:	e30c37f4 	movw	r3, #51188	; 0xc7f4
   15b78:	e3403001 	movt	r3, #1
   15b7c:	e3a0100c 	mov	r1, #12
   15b80:	e5c01004 	strb	r1, [r0, #4]
   15b84:	e5932000 	ldr	r2, [r3]
   15b88:	e1520000 	cmp	r2, r0
   15b8c:	03a02000 	moveq	r2, #0
   15b90:	05832000 	streq	r2, [r3]
   15b94:	e12fff1e 	bx	lr

00015b98 <CMachineInfo::GetMachineModel() const>:
   15b98:	e5d00004 	ldrb	r0, [r0, #4]
   15b9c:	e12fff1e 	bx	lr

00015ba0 <CMachineInfo::GetMachineName() const>:
   15ba0:	e5d02004 	ldrb	r2, [r0, #4]
   15ba4:	e30b36b8 	movw	r3, #46776	; 0xb6b8
   15ba8:	e3403001 	movt	r3, #1
   15bac:	e0833102 	add	r3, r3, r2, lsl #2
   15bb0:	e5930188 	ldr	r0, [r3, #392]	; 0x188
   15bb4:	e12fff1e 	bx	lr

00015bb8 <CMachineInfo::GetModelMajor() const>:
   15bb8:	e5900008 	ldr	r0, [r0, #8]
   15bbc:	e12fff1e 	bx	lr

00015bc0 <CMachineInfo::GetModelRevision() const>:
   15bc0:	e590000c 	ldr	r0, [r0, #12]
   15bc4:	e12fff1e 	bx	lr

00015bc8 <CMachineInfo::GetSoCType() const>:
   15bc8:	e5d00010 	ldrb	r0, [r0, #16]
   15bcc:	e12fff1e 	bx	lr

00015bd0 <CMachineInfo::GetRAMSize() const>:
   15bd0:	e5900014 	ldr	r0, [r0, #20]
   15bd4:	e12fff1e 	bx	lr

00015bd8 <CMachineInfo::GetSoCName() const>:
   15bd8:	e5d02010 	ldrb	r2, [r0, #16]
   15bdc:	e30b36b8 	movw	r3, #46776	; 0xb6b8
   15be0:	e3403001 	movt	r3, #1
   15be4:	e0833102 	add	r3, r3, r2, lsl #2
   15be8:	e59301c0 	ldr	r0, [r3, #448]	; 0x1c0
   15bec:	e12fff1e 	bx	lr

00015bf0 <CMachineInfo::GetRevisionRaw() const>:
   15bf0:	e5900000 	ldr	r0, [r0]
   15bf4:	e12fff1e 	bx	lr

00015bf8 <CMachineInfo::GetClockRate(unsigned int) const>:
   15bf8:	e92d4070 	push	{r4, r5, r6, lr}
   15bfc:	e1a06000 	mov	r6, r0
   15c00:	e1a05001 	mov	r5, r1
   15c04:	e24dd020 	sub	sp, sp, #32
   15c08:	e28d0008 	add	r0, sp, #8
   15c0c:	ebffcf9e 	bl	9a8c <CBcmPropertyTags::CBcmPropertyTags()>
   15c10:	e3a03004 	mov	r3, #4
   15c14:	e28d0008 	add	r0, sp, #8
   15c18:	e58d3000 	str	r3, [sp]
   15c1c:	e3a01002 	mov	r1, #2
   15c20:	e3401003 	movt	r1, #3
   15c24:	e3a03014 	mov	r3, #20
   15c28:	e28d200c 	add	r2, sp, #12
   15c2c:	e58d5018 	str	r5, [sp, #24]
   15c30:	ebffcfa0 	bl	9ab8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   15c34:	e2504000 	subs	r4, r0, #0
   15c38:	159d401c 	ldrne	r4, [sp, #28]
   15c3c:	1a00000b 	bne	15c70 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
   15c40:	e3550002 	cmp	r5, #2
   15c44:	0a00000e 	beq	15c84 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
   15c48:	e3550004 	cmp	r5, #4
   15c4c:	0a000012 	beq	15c9c <CMachineInfo::GetClockRate(unsigned int) const+0xa4>
   15c50:	e3550001 	cmp	r5, #1
   15c54:	0a00000d 	beq	15c90 <CMachineInfo::GetClockRate(unsigned int) const+0x98>
   15c58:	e30b1888 	movw	r1, #47240	; 0xb888
   15c5c:	e3401001 	movt	r1, #1
   15c60:	e30b0b90 	movw	r0, #48016	; 0xbb90
   15c64:	e3400001 	movt	r0, #1
   15c68:	e3002111 	movw	r2, #273	; 0x111
   15c6c:	ebffe785 	bl	fa88 <assertion_failed>
   15c70:	e28d0008 	add	r0, sp, #8
   15c74:	ebffcf8a 	bl	9aa4 <CBcmPropertyTags::~CBcmPropertyTags()>
   15c78:	e1a00004 	mov	r0, r4
   15c7c:	e28dd020 	add	sp, sp, #32
   15c80:	e8bd8070 	pop	{r4, r5, r6, pc}
   15c84:	e3a04b1b 	mov	r4, #27648	; 0x6c00
   15c88:	e34042dc 	movt	r4, #732	; 0x2dc
   15c8c:	eafffff7 	b	15c70 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
   15c90:	e3a04ce1 	mov	r4, #57600	; 0xe100
   15c94:	e34045f5 	movt	r4, #1525	; 0x5f5
   15c98:	eafffff4 	b	15c70 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
   15c9c:	e5962008 	ldr	r2, [r6, #8]
   15ca0:	e3a03ca3 	mov	r3, #41728	; 0xa300
   15ca4:	e34131e1 	movt	r3, #4577	; 0x11e1
   15ca8:	e3520002 	cmp	r2, #2
   15cac:	e30b4280 	movw	r4, #45696	; 0xb280
   15cb0:	e3404ee6 	movt	r4, #3814	; 0xee6
   15cb4:	81a04003 	movhi	r4, r3
   15cb8:	eaffffec 	b	15c70 <CMachineInfo::GetClockRate(unsigned int) const+0x78>

00015cbc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   15cbc:	e3510036 	cmp	r1, #54	; 0x36
   15cc0:	0a00000f 	beq	15d04 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x48>
   15cc4:	e3510037 	cmp	r1, #55	; 0x37
   15cc8:	1a000004 	bne	15ce0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   15ccc:	e5d03004 	ldrb	r3, [r0, #4]
   15cd0:	e3530003 	cmp	r3, #3
   15cd4:	83a00028 	movhi	r0, #40	; 0x28
   15cd8:	93a0002d 	movls	r0, #45	; 0x2d
   15cdc:	e12fff1e 	bx	lr
   15ce0:	e92d4010 	push	{r4, lr}
   15ce4:	e300214a 	movw	r2, #330	; 0x14a
   15ce8:	e30b1888 	movw	r1, #47240	; 0xb888
   15cec:	e3401001 	movt	r1, #1
   15cf0:	e30b0b90 	movw	r0, #48016	; 0xbb90
   15cf4:	e3400001 	movt	r0, #1
   15cf8:	ebffe762 	bl	fa88 <assertion_failed>
   15cfc:	e3a00000 	mov	r0, #0
   15d00:	e8bd8010 	pop	{r4, pc}
   15d04:	e5d03004 	ldrb	r3, [r0, #4]
   15d08:	e3530003 	cmp	r3, #3
   15d0c:	9a000004 	bls	15d24 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x68>
   15d10:	e5903008 	ldr	r3, [r0, #8]
   15d14:	e3530003 	cmp	r3, #3
   15d18:	33a0002d 	movcc	r0, #45	; 0x2d
   15d1c:	23a00029 	movcs	r0, #41	; 0x29
   15d20:	e12fff1e 	bx	lr
   15d24:	e3a00028 	mov	r0, #40	; 0x28
   15d28:	e12fff1e 	bx	lr

00015d2c <CMachineInfo::GetDevice(TDeviceId) const>:
   15d2c:	e3510000 	cmp	r1, #0
   15d30:	1a000003 	bne	15d44 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   15d34:	e5d00004 	ldrb	r0, [r0, #4]
   15d38:	e2500001 	subs	r0, r0, #1
   15d3c:	13a00001 	movne	r0, #1
   15d40:	e12fff1e 	bx	lr
   15d44:	e92d4010 	push	{r4, lr}
   15d48:	e3002163 	movw	r2, #355	; 0x163
   15d4c:	e30b1888 	movw	r1, #47240	; 0xb888
   15d50:	e3401001 	movt	r1, #1
   15d54:	e30b0b90 	movw	r0, #48016	; 0xbb90
   15d58:	e3400001 	movt	r0, #1
   15d5c:	ebffe749 	bl	fa88 <assertion_failed>
   15d60:	e3a00000 	mov	r0, #0
   15d64:	e8bd8010 	pop	{r4, pc}

00015d68 <CMachineInfo::Get()>:
   15d68:	e92d4010 	push	{r4, lr}
   15d6c:	e30c47f4 	movw	r4, #51188	; 0xc7f4
   15d70:	e3404001 	movt	r4, #1
   15d74:	e5940000 	ldr	r0, [r4]
   15d78:	e3500000 	cmp	r0, #0
   15d7c:	18bd8010 	popne	{r4, pc}
   15d80:	e3a02f5b 	mov	r2, #364	; 0x16c
   15d84:	e30b1888 	movw	r1, #47240	; 0xb888
   15d88:	e3401001 	movt	r1, #1
   15d8c:	e3090a84 	movw	r0, #39556	; 0x9a84
   15d90:	e3400001 	movt	r0, #1
   15d94:	ebffe73b 	bl	fa88 <assertion_failed>
   15d98:	e5940000 	ldr	r0, [r4]
   15d9c:	e8bd8010 	pop	{r4, pc}

00015da0 <InvalidateDataCacheL1Only>:
   15da0:	e92d0070 	push	{r4, r5, r6}
   15da4:	e3a00000 	mov	r0, #0
   15da8:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
   15dac:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
   15db0:	e3071fff 	movw	r1, #32767	; 0x7fff
   15db4:	e00126a0 	and	r2, r1, r0, lsr #13
   15db8:	e30013ff 	movw	r1, #1023	; 0x3ff
   15dbc:	e00131a0 	and	r3, r1, r0, lsr #3
   15dc0:	e2822001 	add	r2, r2, #1
   15dc4:	e2000007 	and	r0, r0, #7
   15dc8:	e2800004 	add	r0, r0, #4
   15dcc:	e16f1f13 	clz	r1, r3
   15dd0:	e2834001 	add	r4, r3, #1
   15dd4:	e2422001 	sub	r2, r2, #1
   15dd8:	e1a03004 	mov	r3, r4
   15ddc:	e2533001 	subs	r3, r3, #1
   15de0:	e1a05113 	lsl	r5, r3, r1
   15de4:	e1a06012 	lsl	r6, r2, r0
   15de8:	e1855006 	orr	r5, r5, r6
   15dec:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
   15df0:	cafffff9 	bgt	15ddc <InvalidateDataCacheL1Only+0x3c>
   15df4:	e3520000 	cmp	r2, #0
   15df8:	cafffff5 	bgt	15dd4 <InvalidateDataCacheL1Only+0x34>
   15dfc:	f57ff04e 	dsb	st
   15e00:	f57ff06f 	isb	sy
   15e04:	e8bd0070 	pop	{r4, r5, r6}
   15e08:	e12fff1e 	bx	lr

00015e0c <InvalidateDataCache>:
   15e0c:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   15e10:	f57ff05f 	dmb	sy
   15e14:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   15e18:	e1a03ba0 	lsr	r3, r0, #23
   15e1c:	e213300e 	ands	r3, r3, #14
   15e20:	0a00001d 	beq	15e9c <InvalidateDataCache+0x90>
   15e24:	e3a0a000 	mov	sl, #0
   15e28:	e08a20aa 	add	r2, sl, sl, lsr #1
   15e2c:	e1a01230 	lsr	r1, r0, r2
   15e30:	e2011007 	and	r1, r1, #7
   15e34:	e3510002 	cmp	r1, #2
   15e38:	ba000014 	blt	15e90 <InvalidateDataCache+0x84>
   15e3c:	e10f9000 	mrs	r9, CPSR
   15e40:	f10c0080 	cpsid	i
   15e44:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   15e48:	f57ff06f 	isb	sy
   15e4c:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   15e50:	e121f009 	msr	CPSR_c, r9
   15e54:	e2012007 	and	r2, r1, #7
   15e58:	e2822004 	add	r2, r2, #4
   15e5c:	e30043ff 	movw	r4, #1023	; 0x3ff
   15e60:	e01441a1 	ands	r4, r4, r1, lsr #3
   15e64:	e16f5f14 	clz	r5, r4
   15e68:	e3077fff 	movw	r7, #32767	; 0x7fff
   15e6c:	e01776a1 	ands	r7, r7, r1, lsr #13
   15e70:	e1a09007 	mov	r9, r7
   15e74:	e18ab514 	orr	fp, sl, r4, lsl r5
   15e78:	e18bb219 	orr	fp, fp, r9, lsl r2
   15e7c:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
   15e80:	e2599001 	subs	r9, r9, #1
   15e84:	aafffffa 	bge	15e74 <InvalidateDataCache+0x68>
   15e88:	e2544001 	subs	r4, r4, #1
   15e8c:	aafffff7 	bge	15e70 <InvalidateDataCache+0x64>
   15e90:	e28aa002 	add	sl, sl, #2
   15e94:	e153000a 	cmp	r3, sl
   15e98:	caffffe2 	bgt	15e28 <InvalidateDataCache+0x1c>
   15e9c:	e3a0a000 	mov	sl, #0
   15ea0:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   15ea4:	f57ff04e 	dsb	st
   15ea8:	f57ff06f 	isb	sy
   15eac:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   15eb0:	e12fff1e 	bx	lr

00015eb4 <CleanDataCache>:
   15eb4:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   15eb8:	f57ff05f 	dmb	sy
   15ebc:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   15ec0:	e1a03ba0 	lsr	r3, r0, #23
   15ec4:	e213300e 	ands	r3, r3, #14
   15ec8:	0a00001d 	beq	15f44 <CleanDataCache+0x90>
   15ecc:	e3a0a000 	mov	sl, #0
   15ed0:	e08a20aa 	add	r2, sl, sl, lsr #1
   15ed4:	e1a01230 	lsr	r1, r0, r2
   15ed8:	e2011007 	and	r1, r1, #7
   15edc:	e3510002 	cmp	r1, #2
   15ee0:	ba000014 	blt	15f38 <CleanDataCache+0x84>
   15ee4:	e10f9000 	mrs	r9, CPSR
   15ee8:	f10c0080 	cpsid	i
   15eec:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   15ef0:	f57ff06f 	isb	sy
   15ef4:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   15ef8:	e121f009 	msr	CPSR_c, r9
   15efc:	e2012007 	and	r2, r1, #7
   15f00:	e2822004 	add	r2, r2, #4
   15f04:	e30043ff 	movw	r4, #1023	; 0x3ff
   15f08:	e01441a1 	ands	r4, r4, r1, lsr #3
   15f0c:	e16f5f14 	clz	r5, r4
   15f10:	e3077fff 	movw	r7, #32767	; 0x7fff
   15f14:	e01776a1 	ands	r7, r7, r1, lsr #13
   15f18:	e1a09007 	mov	r9, r7
   15f1c:	e18ab514 	orr	fp, sl, r4, lsl r5
   15f20:	e18bb219 	orr	fp, fp, r9, lsl r2
   15f24:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
   15f28:	e2599001 	subs	r9, r9, #1
   15f2c:	aafffffa 	bge	15f1c <CleanDataCache+0x68>
   15f30:	e2544001 	subs	r4, r4, #1
   15f34:	aafffff7 	bge	15f18 <CleanDataCache+0x64>
   15f38:	e28aa002 	add	sl, sl, #2
   15f3c:	e153000a 	cmp	r3, sl
   15f40:	caffffe2 	bgt	15ed0 <CleanDataCache+0x1c>
   15f44:	e3a0a000 	mov	sl, #0
   15f48:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   15f4c:	f57ff04e 	dsb	st
   15f50:	f57ff06f 	isb	sy
   15f54:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   15f58:	e12fff1e 	bx	lr

00015f5c <CleanAndInvalidateDataCacheRange>:
   15f5c:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
   15f60:	e1a03823 	lsr	r3, r3, #16
   15f64:	e203300f 	and	r3, r3, #15
   15f68:	e3a02004 	mov	r2, #4
   15f6c:	e1a02312 	lsl	r2, r2, r3
   15f70:	e0801001 	add	r1, r0, r1
   15f74:	e2423001 	sub	r3, r2, #1
   15f78:	e1c00003 	bic	r0, r0, r3
   15f7c:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   15f80:	e0800002 	add	r0, r0, r2
   15f84:	e1500001 	cmp	r0, r1
   15f88:	3afffffb 	bcc	15f7c <CleanAndInvalidateDataCacheRange+0x20>
   15f8c:	f57ff04e 	dsb	st
   15f90:	e12fff1e 	bx	lr

00015f94 <CI2SSoundBaseDevice::GetRangeMin() const>:
   15f94:	e3a00001 	mov	r0, #1
   15f98:	e34f0f80 	movt	r0, #65408	; 0xff80
   15f9c:	e12fff1e 	bx	lr

00015fa0 <CI2SSoundBaseDevice::GetRangeMax() const>:
   15fa0:	e30f0fff 	movw	r0, #65535	; 0xffff
   15fa4:	e340007f 	movt	r0, #127	; 0x7f
   15fa8:	e12fff1e 	bx	lr

00015fac <CI2SSoundBaseDevice::IsActive() const>:
   15fac:	e5d000d7 	ldrb	r0, [r0, #215]	; 0xd7
   15fb0:	e2900000 	adds	r0, r0, #0
   15fb4:	13a00001 	movne	r0, #1
   15fb8:	e12fff1e 	bx	lr

00015fbc <CI2SSoundBaseDevice::Cancel()>:
   15fbc:	e59030f4 	ldr	r3, [r0, #244]	; 0xf4
   15fc0:	e3530000 	cmp	r3, #0
   15fc4:	1a000004 	bne	15fdc <CI2SSoundBaseDevice::Cancel()+0x20>
   15fc8:	e5d030d7 	ldrb	r3, [r0, #215]	; 0xd7
   15fcc:	e3530001 	cmp	r3, #1
   15fd0:	03a03002 	moveq	r3, #2
   15fd4:	05c030d7 	strbeq	r3, [r0, #215]	; 0xd7
   15fd8:	e12fff1e 	bx	lr
   15fdc:	e92d4010 	push	{r4, lr}
   15fe0:	e1a04000 	mov	r4, r0
   15fe4:	e1a00003 	mov	r0, r3
   15fe8:	ebffd51c 	bl	b460 <EnterCritical>
   15fec:	e5d430d7 	ldrb	r3, [r4, #215]	; 0xd7
   15ff0:	e3530001 	cmp	r3, #1
   15ff4:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
   15ff8:	03a02002 	moveq	r2, #2
   15ffc:	05c420d7 	strbeq	r2, [r4, #215]	; 0xd7
   16000:	e3530000 	cmp	r3, #0
   16004:	08bd8010 	popeq	{r4, pc}
   16008:	e8bd4010 	pop	{r4, lr}
   1600c:	eaffd540 	b	b514 <LeaveCritical>

00016010 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)>:
   16010:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16014:	e1a04000 	mov	r4, r0
   16018:	e1a05002 	mov	r5, r2
   1601c:	e1a08001 	mov	r8, r1
   16020:	e1a07003 	mov	r7, r3
   16024:	e3a02000 	mov	r2, #0
   16028:	e1a03005 	mov	r3, r5
   1602c:	e3a01002 	mov	r1, #2
   16030:	e28060d4 	add	r6, r0, #212	; 0xd4
   16034:	eb000478 	bl	1721c <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int)>
   16038:	e59f2370 	ldr	r2, [pc, #880]	; 163b0 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x3a0>
   1603c:	e3a03000 	mov	r3, #0
   16040:	e5842000 	str	r2, [r4]
   16044:	e3a01012 	mov	r1, #18
   16048:	e3a02004 	mov	r2, #4
   1604c:	e5848054 	str	r8, [r4, #84]	; 0x54
   16050:	e284005c 	add	r0, r4, #92	; 0x5c
   16054:	e5847058 	str	r7, [r4, #88]	; 0x58
   16058:	ebffcf2f 	bl	9d1c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1605c:	e3a03000 	mov	r3, #0
   16060:	e3a02004 	mov	r2, #4
   16064:	e3a01013 	mov	r1, #19
   16068:	e2840084 	add	r0, r4, #132	; 0x84
   1606c:	ebffcf2a 	bl	9d1c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   16070:	e3a03000 	mov	r3, #0
   16074:	e3a02004 	mov	r2, #4
   16078:	e3a01015 	mov	r1, #21
   1607c:	e28400ac 	add	r0, r4, #172	; 0xac
   16080:	ebffcf25 	bl	9d1c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   16084:	e3a02006 	mov	r2, #6
   16088:	e3a01005 	mov	r1, #5
   1608c:	e1a00006 	mov	r0, r6
   16090:	eb000d72 	bl	19660 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)>
   16094:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   16098:	e3a03000 	mov	r3, #0
   1609c:	e3a01001 	mov	r1, #1
   160a0:	e1520003 	cmp	r2, r3
   160a4:	e58410f4 	str	r1, [r4, #244]	; 0xf4
   160a8:	e5c430d6 	strb	r3, [r4, #214]	; 0xd6
   160ac:	e5c430d7 	strb	r3, [r4, #215]	; 0xd7
   160b0:	0a0000b7 	beq	16394 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x384>
   160b4:	e5940058 	ldr	r0, [r4, #88]	; 0x58
   160b8:	e3500000 	cmp	r0, #0
   160bc:	0a000095 	beq	16318 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x308>
   160c0:	e3100001 	tst	r0, #1
   160c4:	1a00009c 	bne	1633c <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x32c>
   160c8:	e370022e 	cmn	r0, #-536870910	; 0xe0000002
   160cc:	91a00100 	lslls	r0, r0, #2
   160d0:	83e00000 	mvnhi	r0, #0
   160d4:	eb0009a2 	bl	18764 <operator new[](unsigned int)>
   160d8:	e58400d8 	str	r0, [r4, #216]	; 0xd8
   160dc:	e3a0003f 	mov	r0, #63	; 0x3f
   160e0:	eb00099f 	bl	18764 <operator new[](unsigned int)>
   160e4:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   160e8:	e58400e0 	str	r0, [r4, #224]	; 0xe0
   160ec:	e280301f 	add	r3, r0, #31
   160f0:	e5940058 	ldr	r0, [r4, #88]	; 0x58
   160f4:	e3c3301f 	bic	r3, r3, #31
   160f8:	e59420d8 	ldr	r2, [r4, #216]	; 0xd8
   160fc:	e3001349 	movw	r1, #841	; 0x349
   16100:	e3401002 	movt	r1, #2
   16104:	e370022e 	cmn	r0, #-536870910	; 0xe0000002
   16108:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   1610c:	91a00100 	lslls	r0, r0, #2
   16110:	e5831000 	str	r1, [r3]
   16114:	edc30b06 	vstr	d16, [r3, #24]
   16118:	83e00000 	mvnhi	r0, #0
   1611c:	e2822103 	add	r2, r2, #-1073741824	; 0xc0000000
   16120:	e3031004 	movw	r1, #12292	; 0x3004
   16124:	e3471e20 	movt	r1, #32288	; 0x7e20
   16128:	e5831008 	str	r1, [r3, #8]
   1612c:	e5832004 	str	r2, [r3, #4]
   16130:	e3a02000 	mov	r2, #0
   16134:	e5832010 	str	r2, [r3, #16]
   16138:	eb000989 	bl	18764 <operator new[](unsigned int)>
   1613c:	e58400dc 	str	r0, [r4, #220]	; 0xdc
   16140:	e3a0003f 	mov	r0, #63	; 0x3f
   16144:	eb000986 	bl	18764 <operator new[](unsigned int)>
   16148:	e280301f 	add	r3, r0, #31
   1614c:	e59420e8 	ldr	r2, [r4, #232]	; 0xe8
   16150:	e3c3301f 	bic	r3, r3, #31
   16154:	e59410dc 	ldr	r1, [r4, #220]	; 0xdc
   16158:	e245cd7d 	sub	ip, r5, #8000	; 0x1f40
   1615c:	e58400e4 	str	r0, [r4, #228]	; 0xe4
   16160:	e3000349 	movw	r0, #841	; 0x349
   16164:	e3400002 	movt	r0, #2
   16168:	e58430ec 	str	r3, [r4, #236]	; 0xec
   1616c:	e2811103 	add	r1, r1, #-1073741824	; 0xc0000000
   16170:	e5830000 	str	r0, [r3]
   16174:	e30c0ec0 	movw	r0, #52928	; 0xcec0
   16178:	e3400002 	movt	r0, #2
   1617c:	e5831004 	str	r1, [r3, #4]
   16180:	e15c0000 	cmp	ip, r0
   16184:	e3031004 	movw	r1, #12292	; 0x3004
   16188:	e3471e20 	movt	r1, #32288	; 0x7e20
   1618c:	e5831008 	str	r1, [r3, #8]
   16190:	e3a01000 	mov	r1, #0
   16194:	e5831010 	str	r1, [r3, #16]
   16198:	e5831018 	str	r1, [r3, #24]
   1619c:	e583101c 	str	r1, [r3, #28]
   161a0:	e2831103 	add	r1, r3, #-1073741824	; 0xc0000000
   161a4:	e5821014 	str	r1, [r2, #20]
   161a8:	e2822103 	add	r2, r2, #-1073741824	; 0xc0000000
   161ac:	e5832014 	str	r2, [r3, #20]
   161b0:	8a000070 	bhi	16378 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x368>
   161b4:	e3033594 	movw	r3, #13716	; 0x3594
   161b8:	e3403077 	movt	r3, #119	; 0x77
   161bc:	e1a020a5 	lsr	r2, r5, #1
   161c0:	e737f513 	udiv	r7, r3, r5
   161c4:	e0633795 	mls	r3, r5, r7, r3
   161c8:	e0822603 	add	r2, r2, r3, lsl #12
   161cc:	e732f512 	udiv	r2, r2, r5
   161d0:	e3520a01 	cmp	r2, #4096	; 0x1000
   161d4:	8a000045 	bhi	162f0 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x2e0>
   161d8:	0a00004a 	beq	16308 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x2f8>
   161dc:	e2923000 	adds	r3, r2, #0
   161e0:	13a03001 	movne	r3, #1
   161e4:	e3a05a03 	mov	r5, #12288	; 0x3000
   161e8:	e3435f20 	movt	r5, #16160	; 0x3f20
   161ec:	e1a01007 	mov	r1, r7
   161f0:	e1a00006 	mov	r0, r6
   161f4:	eb000d3d 	bl	196f0 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)>
   161f8:	e3a03000 	mov	r3, #0
   161fc:	e5853000 	str	r3, [r5]
   16200:	ebffd922 	bl	c690 <CTimer::Get()>
   16204:	e3a0000a 	mov	r0, #10
   16208:	ebffd8e2 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   1620c:	e5953000 	ldr	r3, [r5]
   16210:	e3833018 	orr	r3, r3, #24
   16214:	e5853000 	str	r3, [r5]
   16218:	ebffd91c 	bl	c690 <CTimer::Get()>
   1621c:	e3a0000a 	mov	r0, #10
   16220:	ebffd8dc 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   16224:	e30c3210 	movw	r3, #49680	; 0xc210
   16228:	e34c3010 	movt	r3, #49168	; 0xc010
   1622c:	e5853010 	str	r3, [r5, #16]
   16230:	e30f3c20 	movw	r3, #64544	; 0xfc20
   16234:	e3403050 	movt	r3, #80	; 0x50
   16238:	e5853008 	str	r3, [r5, #8]
   1623c:	e5953000 	ldr	r3, [r5]
   16240:	e3833402 	orr	r3, r3, #33554432	; 0x2000000
   16244:	e5853000 	str	r3, [r5]
   16248:	ebffd910 	bl	c690 <CTimer::Get()>
   1624c:	e3a00032 	mov	r0, #50	; 0x32
   16250:	ebffd8d0 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   16254:	e5953000 	ldr	r3, [r5]
   16258:	e3833001 	orr	r3, r3, #1
   1625c:	e5853000 	str	r3, [r5]
   16260:	ebffd90a 	bl	c690 <CTimer::Get()>
   16264:	e3a0000a 	mov	r0, #10
   16268:	ebffd8ca 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   1626c:	e5953000 	ldr	r3, [r5]
   16270:	e3833004 	orr	r3, r3, #4
   16274:	e5853000 	str	r3, [r5]
   16278:	ebffd904 	bl	c690 <CTimer::Get()>
   1627c:	e3a0000a 	mov	r0, #10
   16280:	ebffd8c4 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   16284:	e3a03a07 	mov	r3, #28672	; 0x7000
   16288:	e3433f00 	movt	r3, #16128	; 0x3f00
   1628c:	e5933020 	ldr	r3, [r3, #32]
   16290:	e3130201 	tst	r3, #268435456	; 0x10000000
   16294:	1a000030 	bne	1635c <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x34c>
   16298:	e3a05a07 	mov	r5, #28672	; 0x7000
   1629c:	e3435f00 	movt	r5, #16128	; 0x3f00
   162a0:	e5953ff0 	ldr	r3, [r5, #4080]	; 0xff0
   162a4:	e3833001 	orr	r3, r3, #1
   162a8:	e5853ff0 	str	r3, [r5, #4080]	; 0xff0
   162ac:	ebffd8f7 	bl	c690 <CTimer::Get()>
   162b0:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   162b4:	ebffd8b7 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   162b8:	e1a02005 	mov	r2, r5
   162bc:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
   162c0:	e5853000 	str	r3, [r5]
   162c4:	e5923000 	ldr	r3, [r2]
   162c8:	e3530000 	cmp	r3, #0
   162cc:	bafffffc 	blt	162c4 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x2b4>
   162d0:	ebffe74c 	bl	10008 <CDeviceNameService::Get()>
   162d4:	e3a03000 	mov	r3, #0
   162d8:	e1a02004 	mov	r2, r4
   162dc:	e3091868 	movw	r1, #39016	; 0x9868
   162e0:	e3401001 	movt	r1, #1
   162e4:	ebffe6d3 	bl	fe38 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   162e8:	e1a00004 	mov	r0, r4
   162ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   162f0:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   162f4:	e3401001 	movt	r1, #1
   162f8:	e30b0a24 	movw	r0, #47652	; 0xba24
   162fc:	e3400001 	movt	r0, #1
   16300:	e3a02094 	mov	r2, #148	; 0x94
   16304:	ebffe5df 	bl	fa88 <assertion_failed>
   16308:	e3a02000 	mov	r2, #0
   1630c:	e2877001 	add	r7, r7, #1
   16310:	e1a03002 	mov	r3, r2
   16314:	eaffffb2 	b	161e4 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x1d4>
   16318:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   1631c:	e3401001 	movt	r1, #1
   16320:	e30b04b4 	movw	r0, #46260	; 0xb4b4
   16324:	e3400001 	movt	r0, #1
   16328:	e3a02085 	mov	r2, #133	; 0x85
   1632c:	ebffe5d5 	bl	fa88 <assertion_failed>
   16330:	e5940058 	ldr	r0, [r4, #88]	; 0x58
   16334:	e3100001 	tst	r0, #1
   16338:	0affff62 	beq	160c8 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0xb8>
   1633c:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   16340:	e3401001 	movt	r1, #1
   16344:	e30b04c8 	movw	r0, #46280	; 0xb4c8
   16348:	e3400001 	movt	r0, #1
   1634c:	e3a02086 	mov	r2, #134	; 0x86
   16350:	ebffe5cc 	bl	fa88 <assertion_failed>
   16354:	e5940058 	ldr	r0, [r4, #88]	; 0x58
   16358:	eaffff5a 	b	160c8 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0xb8>
   1635c:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   16360:	e3401001 	movt	r1, #1
   16364:	e30b0a34 	movw	r0, #47668	; 0xba34
   16368:	e3400001 	movt	r0, #1
   1636c:	e3a020a2 	mov	r2, #162	; 0xa2
   16370:	ebffe5c4 	bl	fa88 <assertion_failed>
   16374:	eaffffc7 	b	16298 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x288>
   16378:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   1637c:	e3401001 	movt	r1, #1
   16380:	e30b09f4 	movw	r0, #47604	; 0xb9f4
   16384:	e3400001 	movt	r0, #1
   16388:	e3a0208f 	mov	r2, #143	; 0x8f
   1638c:	ebffe5bd 	bl	fa88 <assertion_failed>
   16390:	eaffff87 	b	161b4 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x1a4>
   16394:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   16398:	e3401001 	movt	r1, #1
   1639c:	e30a0004 	movw	r0, #40964	; 0xa004
   163a0:	e3400001 	movt	r0, #1
   163a4:	e3a02084 	mov	r2, #132	; 0x84
   163a8:	ebffe5b6 	bl	fa88 <assertion_failed>
   163ac:	eaffff40 	b	160b4 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0xa4>
   163b0:	0001b9ac 	.word	0x0001b9ac

000163b4 <CI2SSoundBaseDevice::GetNextChunk()>:
   163b4:	e59030f0 	ldr	r3, [r0, #240]	; 0xf0
   163b8:	e92d4070 	push	{r4, r5, r6, lr}
   163bc:	e1a04000 	mov	r4, r0
   163c0:	e2833036 	add	r3, r3, #54	; 0x36
   163c4:	e7901103 	ldr	r1, [r0, r3, lsl #2]
   163c8:	e3510000 	cmp	r1, #0
   163cc:	0a00002e 	beq	1648c <CI2SSoundBaseDevice::GetNextChunk()+0xd8>
   163d0:	e5943000 	ldr	r3, [r4]
   163d4:	e1a00004 	mov	r0, r4
   163d8:	e5942058 	ldr	r2, [r4, #88]	; 0x58
   163dc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   163e0:	e12fff33 	blx	r3
   163e4:	e3500000 	cmp	r0, #0
   163e8:	08bd8070 	popeq	{r4, r5, r6, pc}
   163ec:	e1a05100 	lsl	r5, r0, #2
   163f0:	e3750107 	cmn	r5, #-1073741823	; 0xc0000001
   163f4:	8a000013 	bhi	16448 <CI2SSoundBaseDevice::GetNextChunk()+0x94>
   163f8:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
   163fc:	e283203a 	add	r2, r3, #58	; 0x3a
   16400:	e7942102 	ldr	r2, [r4, r2, lsl #2]
   16404:	e3520000 	cmp	r2, #0
   16408:	0a000015 	beq	16464 <CI2SSoundBaseDevice::GetNextChunk()+0xb0>
   1640c:	e2833036 	add	r3, r3, #54	; 0x36
   16410:	e582500c 	str	r5, [r2, #12]
   16414:	e1a01005 	mov	r1, r5
   16418:	e7940103 	ldr	r0, [r4, r3, lsl #2]
   1641c:	ebfffece 	bl	15f5c <CleanAndInvalidateDataCacheRange>
   16420:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
   16424:	e3a01020 	mov	r1, #32
   16428:	e283303a 	add	r3, r3, #58	; 0x3a
   1642c:	e7940103 	ldr	r0, [r4, r3, lsl #2]
   16430:	ebfffec9 	bl	15f5c <CleanAndInvalidateDataCacheRange>
   16434:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
   16438:	e3a00001 	mov	r0, #1
   1643c:	e0233000 	eor	r3, r3, r0
   16440:	e58430f0 	str	r3, [r4, #240]	; 0xf0
   16444:	e8bd8070 	pop	{r4, r5, r6, pc}
   16448:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   1644c:	e3401001 	movt	r1, #1
   16450:	e30b0574 	movw	r0, #46452	; 0xb574
   16454:	e3400001 	movt	r0, #1
   16458:	e3002135 	movw	r2, #309	; 0x135
   1645c:	ebffe589 	bl	fa88 <assertion_failed>
   16460:	eaffffe4 	b	163f8 <CI2SSoundBaseDevice::GetNextChunk()+0x44>
   16464:	e3002137 	movw	r2, #311	; 0x137
   16468:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   1646c:	e3401001 	movt	r1, #1
   16470:	e30b0594 	movw	r0, #46484	; 0xb594
   16474:	e3400001 	movt	r0, #1
   16478:	ebffe582 	bl	fa88 <assertion_failed>
   1647c:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
   16480:	e283203a 	add	r2, r3, #58	; 0x3a
   16484:	e7942102 	ldr	r2, [r4, r2, lsl #2]
   16488:	eaffffdf 	b	1640c <CI2SSoundBaseDevice::GetNextChunk()+0x58>
   1648c:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   16490:	e3401001 	movt	r1, #1
   16494:	e30b0550 	movw	r0, #46416	; 0xb550
   16498:	e3400001 	movt	r0, #1
   1649c:	e300212d 	movw	r2, #301	; 0x12d
   164a0:	ebffe578 	bl	fa88 <assertion_failed>
   164a4:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
   164a8:	e2833036 	add	r3, r3, #54	; 0x36
   164ac:	e7941103 	ldr	r1, [r4, r3, lsl #2]
   164b0:	eaffffc6 	b	163d0 <CI2SSoundBaseDevice::GetNextChunk()+0x1c>

000164b4 <CI2SSoundBaseDevice::Start()>:
   164b4:	e5d030d7 	ldrb	r3, [r0, #215]	; 0xd7
   164b8:	e92d4070 	push	{r4, r5, r6, lr}
   164bc:	e1a04000 	mov	r4, r0
   164c0:	e3530000 	cmp	r3, #0
   164c4:	1a00005e 	bne	16644 <CI2SSoundBaseDevice::Start()+0x190>
   164c8:	e59410d8 	ldr	r1, [r4, #216]	; 0xd8
   164cc:	e3a03000 	mov	r3, #0
   164d0:	e58430f0 	str	r3, [r4, #240]	; 0xf0
   164d4:	e1510003 	cmp	r1, r3
   164d8:	0a00008f 	beq	1671c <CI2SSoundBaseDevice::Start()+0x268>
   164dc:	e5943000 	ldr	r3, [r4]
   164e0:	e1a00004 	mov	r0, r4
   164e4:	e5942058 	ldr	r2, [r4, #88]	; 0x58
   164e8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   164ec:	e12fff33 	blx	r3
   164f0:	e3500000 	cmp	r0, #0
   164f4:	08bd8070 	popeq	{r4, r5, r6, pc}
   164f8:	e1a05100 	lsl	r5, r0, #2
   164fc:	e3750107 	cmn	r5, #-1073741823	; 0xc0000001
   16500:	8a000056 	bhi	16660 <CI2SSoundBaseDevice::Start()+0x1ac>
   16504:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
   16508:	e283203a 	add	r2, r3, #58	; 0x3a
   1650c:	e7942102 	ldr	r2, [r4, r2, lsl #2]
   16510:	e3520000 	cmp	r2, #0
   16514:	0a00006e 	beq	166d4 <CI2SSoundBaseDevice::Start()+0x220>
   16518:	e2833036 	add	r3, r3, #54	; 0x36
   1651c:	e582500c 	str	r5, [r2, #12]
   16520:	e1a01005 	mov	r1, r5
   16524:	e7940103 	ldr	r0, [r4, r3, lsl #2]
   16528:	ebfffe8b 	bl	15f5c <CleanAndInvalidateDataCacheRange>
   1652c:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
   16530:	e3a01020 	mov	r1, #32
   16534:	e283303a 	add	r3, r3, #58	; 0x3a
   16538:	e7940103 	ldr	r0, [r4, r3, lsl #2]
   1653c:	ebfffe86 	bl	15f5c <CleanAndInvalidateDataCacheRange>
   16540:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
   16544:	e5d420d6 	ldrb	r2, [r4, #214]	; 0xd6
   16548:	e3a01001 	mov	r1, #1
   1654c:	e0233001 	eor	r3, r3, r1
   16550:	e5c410d7 	strb	r1, [r4, #215]	; 0xd7
   16554:	e58430f0 	str	r3, [r4, #240]	; 0xf0
   16558:	e3520000 	cmp	r2, #0
   1655c:	1a000009 	bne	16588 <CI2SSoundBaseDevice::Start()+0xd4>
   16560:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   16564:	e3500000 	cmp	r0, #0
   16568:	0a000075 	beq	16744 <CI2SSoundBaseDevice::Start()+0x290>
   1656c:	e1a03004 	mov	r3, r4
   16570:	e3062764 	movw	r2, #26468	; 0x6764
   16574:	e3402001 	movt	r2, #1
   16578:	e3a01010 	mov	r1, #16
   1657c:	ebfff5c3 	bl	13c90 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   16580:	e3a03001 	mov	r3, #1
   16584:	e5c430d6 	strb	r3, [r4, #214]	; 0xd6
   16588:	e3a03a03 	mov	r3, #12288	; 0x3000
   1658c:	e3433f20 	movt	r3, #16160	; 0x3f20
   16590:	e3a01a07 	mov	r1, #28672	; 0x7000
   16594:	e3431f00 	movt	r1, #16128	; 0x3f00
   16598:	e5932000 	ldr	r2, [r3]
   1659c:	e3822c02 	orr	r2, r2, #512	; 0x200
   165a0:	e5832000 	str	r2, [r3]
   165a4:	e5913000 	ldr	r3, [r1]
   165a8:	e3130004 	tst	r3, #4
   165ac:	1a00003c 	bne	166a4 <CI2SSoundBaseDevice::Start()+0x1f0>
   165b0:	e3a03a07 	mov	r3, #28672	; 0x7000
   165b4:	e3433f00 	movt	r3, #16128	; 0x3f00
   165b8:	e5933fe0 	ldr	r3, [r3, #4064]	; 0xfe0
   165bc:	e3130001 	tst	r3, #1
   165c0:	1a00002d 	bne	1667c <CI2SSoundBaseDevice::Start()+0x1c8>
   165c4:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   165c8:	e3530000 	cmp	r3, #0
   165cc:	0a00004a 	beq	166fc <CI2SSoundBaseDevice::Start()+0x248>
   165d0:	e3a02a07 	mov	r2, #28672	; 0x7000
   165d4:	e3432f00 	movt	r2, #16128	; 0x3f00
   165d8:	e2833103 	add	r3, r3, #-1073741824	; 0xc0000000
   165dc:	e3a01001 	mov	r1, #1
   165e0:	e34110f1 	movt	r1, #4337	; 0x10f1
   165e4:	e5823004 	str	r3, [r2, #4]
   165e8:	e1a00004 	mov	r0, r4
   165ec:	e5821000 	str	r1, [r2]
   165f0:	ebffff6f 	bl	163b4 <CI2SSoundBaseDevice::GetNextChunk()>
   165f4:	e3500000 	cmp	r0, #0
   165f8:	1a00000f 	bne	1663c <CI2SSoundBaseDevice::Start()+0x188>
   165fc:	e59400f4 	ldr	r0, [r4, #244]	; 0xf4
   16600:	e3500000 	cmp	r0, #0
   16604:	1a00002d 	bne	166c0 <CI2SSoundBaseDevice::Start()+0x20c>
   16608:	e5d430d7 	ldrb	r3, [r4, #215]	; 0xd7
   1660c:	e3530001 	cmp	r3, #1
   16610:	1a000009 	bne	1663c <CI2SSoundBaseDevice::Start()+0x188>
   16614:	e3a03a07 	mov	r3, #28672	; 0x7000
   16618:	e3433f00 	movt	r3, #16128	; 0x3f00
   1661c:	e3a01000 	mov	r1, #0
   16620:	e3a02003 	mov	r2, #3
   16624:	e583101c 	str	r1, [r3, #28]
   16628:	e5c420d7 	strb	r2, [r4, #215]	; 0xd7
   1662c:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
   16630:	e3530000 	cmp	r3, #0
   16634:	0a000000 	beq	1663c <CI2SSoundBaseDevice::Start()+0x188>
   16638:	ebffd3b5 	bl	b514 <LeaveCritical>
   1663c:	e3a00001 	mov	r0, #1
   16640:	e8bd8070 	pop	{r4, r5, r6, pc}
   16644:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   16648:	e3401001 	movt	r1, #1
   1664c:	e30b0a74 	movw	r0, #47732	; 0xba74
   16650:	e3400001 	movt	r0, #1
   16654:	e3a020dc 	mov	r2, #220	; 0xdc
   16658:	ebffe50a 	bl	fa88 <assertion_failed>
   1665c:	eaffff99 	b	164c8 <CI2SSoundBaseDevice::Start()+0x14>
   16660:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   16664:	e3401001 	movt	r1, #1
   16668:	e30b0574 	movw	r0, #46452	; 0xb574
   1666c:	e3400001 	movt	r0, #1
   16670:	e3002135 	movw	r2, #309	; 0x135
   16674:	ebffe503 	bl	fa88 <assertion_failed>
   16678:	eaffffa1 	b	16504 <CI2SSoundBaseDevice::Start()+0x50>
   1667c:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   16680:	e3401001 	movt	r1, #1
   16684:	e30b0ac4 	movw	r0, #47812	; 0xbac4
   16688:	e3400001 	movt	r0, #1
   1668c:	e3a020fa 	mov	r2, #250	; 0xfa
   16690:	ebffe4fc 	bl	fa88 <assertion_failed>
   16694:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   16698:	e3530000 	cmp	r3, #0
   1669c:	1affffcb 	bne	165d0 <CI2SSoundBaseDevice::Start()+0x11c>
   166a0:	ea000015 	b	166fc <CI2SSoundBaseDevice::Start()+0x248>
   166a4:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   166a8:	e3401001 	movt	r1, #1
   166ac:	e30b0a8c 	movw	r0, #47756	; 0xba8c
   166b0:	e3400001 	movt	r0, #1
   166b4:	e3a020f9 	mov	r2, #249	; 0xf9
   166b8:	ebffe4f2 	bl	fa88 <assertion_failed>
   166bc:	eaffffbb 	b	165b0 <CI2SSoundBaseDevice::Start()+0xfc>
   166c0:	ebffd366 	bl	b460 <EnterCritical>
   166c4:	e5d430d7 	ldrb	r3, [r4, #215]	; 0xd7
   166c8:	e3530001 	cmp	r3, #1
   166cc:	1affffd6 	bne	1662c <CI2SSoundBaseDevice::Start()+0x178>
   166d0:	eaffffcf 	b	16614 <CI2SSoundBaseDevice::Start()+0x160>
   166d4:	e3002137 	movw	r2, #311	; 0x137
   166d8:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   166dc:	e3401001 	movt	r1, #1
   166e0:	e30b0594 	movw	r0, #46484	; 0xb594
   166e4:	e3400001 	movt	r0, #1
   166e8:	ebffe4e6 	bl	fa88 <assertion_failed>
   166ec:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
   166f0:	e283203a 	add	r2, r3, #58	; 0x3a
   166f4:	e7942102 	ldr	r2, [r4, r2, lsl #2]
   166f8:	eaffff86 	b	16518 <CI2SSoundBaseDevice::Start()+0x64>
   166fc:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   16700:	e3401001 	movt	r1, #1
   16704:	e30b0640 	movw	r0, #46656	; 0xb640
   16708:	e3400001 	movt	r0, #1
   1670c:	e3a020fc 	mov	r2, #252	; 0xfc
   16710:	ebffe4dc 	bl	fa88 <assertion_failed>
   16714:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   16718:	eaffffac 	b	165d0 <CI2SSoundBaseDevice::Start()+0x11c>
   1671c:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   16720:	e3401001 	movt	r1, #1
   16724:	e30b0550 	movw	r0, #46416	; 0xb550
   16728:	e3400001 	movt	r0, #1
   1672c:	e300212d 	movw	r2, #301	; 0x12d
   16730:	ebffe4d4 	bl	fa88 <assertion_failed>
   16734:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
   16738:	e2833036 	add	r3, r3, #54	; 0x36
   1673c:	e7941103 	ldr	r1, [r4, r3, lsl #2]
   16740:	eaffff65 	b	164dc <CI2SSoundBaseDevice::Start()+0x28>
   16744:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   16748:	e3401001 	movt	r1, #1
   1674c:	e30a0004 	movw	r0, #40964	; 0xa004
   16750:	e3400001 	movt	r0, #1
   16754:	e3a020eb 	mov	r2, #235	; 0xeb
   16758:	ebffe4ca 	bl	fa88 <assertion_failed>
   1675c:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   16760:	eaffff81 	b	1656c <CI2SSoundBaseDevice::Start()+0xb8>

00016764 <CI2SSoundBaseDevice::InterruptStub(void*)>:
   16764:	e92d4070 	push	{r4, r5, r6, lr}
   16768:	e2504000 	subs	r4, r0, #0
   1676c:	0a000052 	beq	168bc <CI2SSoundBaseDevice::InterruptStub(void*)+0x158>
   16770:	e5d430d7 	ldrb	r3, [r4, #215]	; 0xd7
   16774:	e3530000 	cmp	r3, #0
   16778:	0a000042 	beq	16888 <CI2SSoundBaseDevice::InterruptStub(void*)+0x124>
   1677c:	e3a03a07 	mov	r3, #28672	; 0x7000
   16780:	e3433f00 	movt	r3, #16128	; 0x3f00
   16784:	e5933fe0 	ldr	r3, [r3, #4064]	; 0xfe0
   16788:	e3130001 	tst	r3, #1
   1678c:	0a000036 	beq	1686c <CI2SSoundBaseDevice::InterruptStub(void*)+0x108>
   16790:	e3a03a07 	mov	r3, #28672	; 0x7000
   16794:	e3433f00 	movt	r3, #16128	; 0x3f00
   16798:	e3a02001 	mov	r2, #1
   1679c:	e5832fe0 	str	r2, [r3, #4064]	; 0xfe0
   167a0:	e5935000 	ldr	r5, [r3]
   167a4:	e3150004 	tst	r5, #4
   167a8:	0a000028 	beq	16850 <CI2SSoundBaseDevice::InterruptStub(void*)+0xec>
   167ac:	e3a03a07 	mov	r3, #28672	; 0x7000
   167b0:	e3433f00 	movt	r3, #16128	; 0x3f00
   167b4:	e3150c01 	tst	r5, #256	; 0x100
   167b8:	e5835000 	str	r5, [r3]
   167bc:	1a000020 	bne	16844 <CI2SSoundBaseDevice::InterruptStub(void*)+0xe0>
   167c0:	e59400f4 	ldr	r0, [r4, #244]	; 0xf4
   167c4:	e3500000 	cmp	r0, #0
   167c8:	1a000035 	bne	168a4 <CI2SSoundBaseDevice::InterruptStub(void*)+0x140>
   167cc:	e5d430d7 	ldrb	r3, [r4, #215]	; 0xd7
   167d0:	e6ef3073 	uxtb	r3, r3
   167d4:	e3530002 	cmp	r3, #2
   167d8:	0a00000e 	beq	16818 <CI2SSoundBaseDevice::InterruptStub(void*)+0xb4>
   167dc:	e3530003 	cmp	r3, #3
   167e0:	0a00003c 	beq	168d8 <CI2SSoundBaseDevice::InterruptStub(void*)+0x174>
   167e4:	e3530001 	cmp	r3, #1
   167e8:	0a000006 	beq	16808 <CI2SSoundBaseDevice::InterruptStub(void*)+0xa4>
   167ec:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   167f0:	e3401001 	movt	r1, #1
   167f4:	e30b0b90 	movw	r0, #48016	; 0xbb90
   167f8:	e3400001 	movt	r0, #1
   167fc:	e30021a9 	movw	r2, #425	; 0x1a9
   16800:	ebffe4a0 	bl	fa88 <assertion_failed>
   16804:	ea000009 	b	16830 <CI2SSoundBaseDevice::InterruptStub(void*)+0xcc>
   16808:	e1a00004 	mov	r0, r4
   1680c:	ebfffee8 	bl	163b4 <CI2SSoundBaseDevice::GetNextChunk()>
   16810:	e3500000 	cmp	r0, #0
   16814:	1a000005 	bne	16830 <CI2SSoundBaseDevice::InterruptStub(void*)+0xcc>
   16818:	e3a03a07 	mov	r3, #28672	; 0x7000
   1681c:	e3433f00 	movt	r3, #16128	; 0x3f00
   16820:	e3a01000 	mov	r1, #0
   16824:	e3a02003 	mov	r2, #3
   16828:	e583101c 	str	r1, [r3, #28]
   1682c:	e5c420d7 	strb	r2, [r4, #215]	; 0xd7
   16830:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
   16834:	e3530000 	cmp	r3, #0
   16838:	08bd8070 	popeq	{r4, r5, r6, pc}
   1683c:	e8bd4070 	pop	{r4, r5, r6, lr}
   16840:	eaffd333 	b	b514 <LeaveCritical>
   16844:	e3a03004 	mov	r3, #4
   16848:	e5c430d7 	strb	r3, [r4, #215]	; 0xd7
   1684c:	e8bd8070 	pop	{r4, r5, r6, pc}
   16850:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   16854:	e3401001 	movt	r1, #1
   16858:	e30b0688 	movw	r0, #46728	; 0xb688
   1685c:	e3400001 	movt	r0, #1
   16860:	e3002185 	movw	r2, #389	; 0x185
   16864:	ebffe487 	bl	fa88 <assertion_failed>
   16868:	eaffffcf 	b	167ac <CI2SSoundBaseDevice::InterruptStub(void*)+0x48>
   1686c:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   16870:	e3401001 	movt	r1, #1
   16874:	e30b0670 	movw	r0, #46704	; 0xb670
   16878:	e3400001 	movt	r0, #1
   1687c:	e3002181 	movw	r2, #385	; 0x181
   16880:	ebffe480 	bl	fa88 <assertion_failed>
   16884:	eaffffc1 	b	16790 <CI2SSoundBaseDevice::InterruptStub(void*)+0x2c>
   16888:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   1688c:	e3401001 	movt	r1, #1
   16890:	e30b0afc 	movw	r0, #47868	; 0xbafc
   16894:	e3400001 	movt	r0, #1
   16898:	e3002179 	movw	r2, #377	; 0x179
   1689c:	ebffe479 	bl	fa88 <assertion_failed>
   168a0:	eaffffb5 	b	1677c <CI2SSoundBaseDevice::InterruptStub(void*)+0x18>
   168a4:	ebffd2ed 	bl	b460 <EnterCritical>
   168a8:	e5d430d7 	ldrb	r3, [r4, #215]	; 0xd7
   168ac:	e6ef3073 	uxtb	r3, r3
   168b0:	e3530002 	cmp	r3, #2
   168b4:	1affffc8 	bne	167dc <CI2SSoundBaseDevice::InterruptStub(void*)+0x78>
   168b8:	eaffffd6 	b	16818 <CI2SSoundBaseDevice::InterruptStub(void*)+0xb4>
   168bc:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   168c0:	e3401001 	movt	r1, #1
   168c4:	e3090ad4 	movw	r0, #39636	; 0x9ad4
   168c8:	e3400001 	movt	r0, #1
   168cc:	e30021b3 	movw	r2, #435	; 0x1b3
   168d0:	ebffe46c 	bl	fa88 <assertion_failed>
   168d4:	eaffffa5 	b	16770 <CI2SSoundBaseDevice::InterruptStub(void*)+0xc>
   168d8:	e3a03000 	mov	r3, #0
   168dc:	e5c430d7 	strb	r3, [r4, #215]	; 0xd7
   168e0:	eaffffd2 	b	16830 <CI2SSoundBaseDevice::InterruptStub(void*)+0xcc>

000168e4 <CI2SSoundBaseDevice::RunI2S()>:
   168e4:	e92d4010 	push	{r4, lr}
   168e8:	e3a04a03 	mov	r4, #12288	; 0x3000
   168ec:	e3434f20 	movt	r4, #16160	; 0x3f20
   168f0:	e3a03000 	mov	r3, #0
   168f4:	e5843000 	str	r3, [r4]
   168f8:	ebffd764 	bl	c690 <CTimer::Get()>
   168fc:	e3a0000a 	mov	r0, #10
   16900:	ebffd724 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   16904:	e5943000 	ldr	r3, [r4]
   16908:	e3833018 	orr	r3, r3, #24
   1690c:	e5843000 	str	r3, [r4]
   16910:	ebffd75e 	bl	c690 <CTimer::Get()>
   16914:	e3a0000a 	mov	r0, #10
   16918:	ebffd71e 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   1691c:	e30c3210 	movw	r3, #49680	; 0xc210
   16920:	e34c3010 	movt	r3, #49168	; 0xc010
   16924:	e5843010 	str	r3, [r4, #16]
   16928:	e30f3c20 	movw	r3, #64544	; 0xfc20
   1692c:	e3403050 	movt	r3, #80	; 0x50
   16930:	e5843008 	str	r3, [r4, #8]
   16934:	e5943000 	ldr	r3, [r4]
   16938:	e3833402 	orr	r3, r3, #33554432	; 0x2000000
   1693c:	e5843000 	str	r3, [r4]
   16940:	ebffd752 	bl	c690 <CTimer::Get()>
   16944:	e3a00032 	mov	r0, #50	; 0x32
   16948:	ebffd712 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   1694c:	e5943000 	ldr	r3, [r4]
   16950:	e3833001 	orr	r3, r3, #1
   16954:	e5843000 	str	r3, [r4]
   16958:	ebffd74c 	bl	c690 <CTimer::Get()>
   1695c:	e3a0000a 	mov	r0, #10
   16960:	ebffd70c 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   16964:	e5943000 	ldr	r3, [r4]
   16968:	e3833004 	orr	r3, r3, #4
   1696c:	e5843000 	str	r3, [r4]
   16970:	ebffd746 	bl	c690 <CTimer::Get()>
   16974:	e3a0000a 	mov	r0, #10
   16978:	e8bd4010 	pop	{r4, lr}
   1697c:	eaffd705 	b	c598 <CTimer::SimpleusDelay(unsigned int)>

00016980 <CI2SSoundBaseDevice::StopI2S()>:
   16980:	e3a03a03 	mov	r3, #12288	; 0x3000
   16984:	e3433f20 	movt	r3, #16160	; 0x3f20
   16988:	e92d4010 	push	{r4, lr}
   1698c:	e3a02000 	mov	r2, #0
   16990:	e1a04000 	mov	r4, r0
   16994:	e5832000 	str	r2, [r3]
   16998:	ebffd73c 	bl	c690 <CTimer::Get()>
   1699c:	e3a00032 	mov	r0, #50	; 0x32
   169a0:	ebffd6fc 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   169a4:	e28400d4 	add	r0, r4, #212	; 0xd4
   169a8:	e8bd4010 	pop	{r4, lr}
   169ac:	ea000b8e 	b	197ec <CGPIOClock::Stop()>

000169b0 <CI2SSoundBaseDevice::InterruptHandler()>:
   169b0:	e5d030d7 	ldrb	r3, [r0, #215]	; 0xd7
   169b4:	e92d4070 	push	{r4, r5, r6, lr}
   169b8:	e1a04000 	mov	r4, r0
   169bc:	e3530000 	cmp	r3, #0
   169c0:	0a000042 	beq	16ad0 <CI2SSoundBaseDevice::InterruptHandler()+0x120>
   169c4:	e3a03a07 	mov	r3, #28672	; 0x7000
   169c8:	e3433f00 	movt	r3, #16128	; 0x3f00
   169cc:	e5933fe0 	ldr	r3, [r3, #4064]	; 0xfe0
   169d0:	e3130001 	tst	r3, #1
   169d4:	0a000036 	beq	16ab4 <CI2SSoundBaseDevice::InterruptHandler()+0x104>
   169d8:	e3a03a07 	mov	r3, #28672	; 0x7000
   169dc:	e3433f00 	movt	r3, #16128	; 0x3f00
   169e0:	e3a02001 	mov	r2, #1
   169e4:	e5832fe0 	str	r2, [r3, #4064]	; 0xfe0
   169e8:	e5935000 	ldr	r5, [r3]
   169ec:	e3150004 	tst	r5, #4
   169f0:	0a000028 	beq	16a98 <CI2SSoundBaseDevice::InterruptHandler()+0xe8>
   169f4:	e3a03a07 	mov	r3, #28672	; 0x7000
   169f8:	e3433f00 	movt	r3, #16128	; 0x3f00
   169fc:	e3150c01 	tst	r5, #256	; 0x100
   16a00:	e5835000 	str	r5, [r3]
   16a04:	1a000020 	bne	16a8c <CI2SSoundBaseDevice::InterruptHandler()+0xdc>
   16a08:	e59400f4 	ldr	r0, [r4, #244]	; 0xf4
   16a0c:	e3500000 	cmp	r0, #0
   16a10:	1a000035 	bne	16aec <CI2SSoundBaseDevice::InterruptHandler()+0x13c>
   16a14:	e5d430d7 	ldrb	r3, [r4, #215]	; 0xd7
   16a18:	e6ef3073 	uxtb	r3, r3
   16a1c:	e3530002 	cmp	r3, #2
   16a20:	0a00000e 	beq	16a60 <CI2SSoundBaseDevice::InterruptHandler()+0xb0>
   16a24:	e3530003 	cmp	r3, #3
   16a28:	0a000035 	beq	16b04 <CI2SSoundBaseDevice::InterruptHandler()+0x154>
   16a2c:	e3530001 	cmp	r3, #1
   16a30:	0a000006 	beq	16a50 <CI2SSoundBaseDevice::InterruptHandler()+0xa0>
   16a34:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   16a38:	e3401001 	movt	r1, #1
   16a3c:	e30b0b90 	movw	r0, #48016	; 0xbb90
   16a40:	e3400001 	movt	r0, #1
   16a44:	e30021a9 	movw	r2, #425	; 0x1a9
   16a48:	ebffe40e 	bl	fa88 <assertion_failed>
   16a4c:	ea000009 	b	16a78 <CI2SSoundBaseDevice::InterruptHandler()+0xc8>
   16a50:	e1a00004 	mov	r0, r4
   16a54:	ebfffe56 	bl	163b4 <CI2SSoundBaseDevice::GetNextChunk()>
   16a58:	e3500000 	cmp	r0, #0
   16a5c:	1a000005 	bne	16a78 <CI2SSoundBaseDevice::InterruptHandler()+0xc8>
   16a60:	e3a03a07 	mov	r3, #28672	; 0x7000
   16a64:	e3433f00 	movt	r3, #16128	; 0x3f00
   16a68:	e3a01000 	mov	r1, #0
   16a6c:	e3a02003 	mov	r2, #3
   16a70:	e583101c 	str	r1, [r3, #28]
   16a74:	e5c420d7 	strb	r2, [r4, #215]	; 0xd7
   16a78:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
   16a7c:	e3530000 	cmp	r3, #0
   16a80:	08bd8070 	popeq	{r4, r5, r6, pc}
   16a84:	e8bd4070 	pop	{r4, r5, r6, lr}
   16a88:	eaffd2a1 	b	b514 <LeaveCritical>
   16a8c:	e3a03004 	mov	r3, #4
   16a90:	e5c430d7 	strb	r3, [r4, #215]	; 0xd7
   16a94:	e8bd8070 	pop	{r4, r5, r6, pc}
   16a98:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   16a9c:	e3401001 	movt	r1, #1
   16aa0:	e30b0688 	movw	r0, #46728	; 0xb688
   16aa4:	e3400001 	movt	r0, #1
   16aa8:	e3002185 	movw	r2, #389	; 0x185
   16aac:	ebffe3f5 	bl	fa88 <assertion_failed>
   16ab0:	eaffffcf 	b	169f4 <CI2SSoundBaseDevice::InterruptHandler()+0x44>
   16ab4:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   16ab8:	e3401001 	movt	r1, #1
   16abc:	e30b0670 	movw	r0, #46704	; 0xb670
   16ac0:	e3400001 	movt	r0, #1
   16ac4:	e3002181 	movw	r2, #385	; 0x181
   16ac8:	ebffe3ee 	bl	fa88 <assertion_failed>
   16acc:	eaffffc1 	b	169d8 <CI2SSoundBaseDevice::InterruptHandler()+0x28>
   16ad0:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   16ad4:	e3401001 	movt	r1, #1
   16ad8:	e30b0afc 	movw	r0, #47868	; 0xbafc
   16adc:	e3400001 	movt	r0, #1
   16ae0:	e3002179 	movw	r2, #377	; 0x179
   16ae4:	ebffe3e7 	bl	fa88 <assertion_failed>
   16ae8:	eaffffb5 	b	169c4 <CI2SSoundBaseDevice::InterruptHandler()+0x14>
   16aec:	ebffd25b 	bl	b460 <EnterCritical>
   16af0:	e5d430d7 	ldrb	r3, [r4, #215]	; 0xd7
   16af4:	e6ef3073 	uxtb	r3, r3
   16af8:	e3530002 	cmp	r3, #2
   16afc:	1affffc8 	bne	16a24 <CI2SSoundBaseDevice::InterruptHandler()+0x74>
   16b00:	eaffffd6 	b	16a60 <CI2SSoundBaseDevice::InterruptHandler()+0xb0>
   16b04:	e3a03000 	mov	r3, #0
   16b08:	e5c430d7 	strb	r3, [r4, #215]	; 0xd7
   16b0c:	eaffffd9 	b	16a78 <CI2SSoundBaseDevice::InterruptHandler()+0xc8>

00016b10 <CI2SSoundBaseDevice::SetupDMAControlBlock(unsigned int)>:
   16b10:	e92d4070 	push	{r4, r5, r6, lr}
   16b14:	e3510001 	cmp	r1, #1
   16b18:	e1a05001 	mov	r5, r1
   16b1c:	e1a04000 	mov	r4, r0
   16b20:	9a000005 	bls	16b3c <CI2SSoundBaseDevice::SetupDMAControlBlock(unsigned int)+0x2c>
   16b24:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   16b28:	e3401001 	movt	r1, #1
   16b2c:	e30b0698 	movw	r0, #46744	; 0xb698
   16b30:	e3400001 	movt	r0, #1
   16b34:	e30021ba 	movw	r2, #442	; 0x1ba
   16b38:	ebffe3d2 	bl	fa88 <assertion_failed>
   16b3c:	e5940058 	ldr	r0, [r4, #88]	; 0x58
   16b40:	e0844105 	add	r4, r4, r5, lsl #2
   16b44:	e370022e 	cmn	r0, #-536870910	; 0xe0000002
   16b48:	91a00100 	lslls	r0, r0, #2
   16b4c:	83e00000 	mvnhi	r0, #0
   16b50:	eb000703 	bl	18764 <operator new[](unsigned int)>
   16b54:	e58400d8 	str	r0, [r4, #216]	; 0xd8
   16b58:	e3a0003f 	mov	r0, #63	; 0x3f
   16b5c:	eb000700 	bl	18764 <operator new[](unsigned int)>
   16b60:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   16b64:	e280301f 	add	r3, r0, #31
   16b68:	e59420d8 	ldr	r2, [r4, #216]	; 0xd8
   16b6c:	e3c3301f 	bic	r3, r3, #31
   16b70:	e58400e0 	str	r0, [r4, #224]	; 0xe0
   16b74:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   16b78:	e2822103 	add	r2, r2, #-1073741824	; 0xc0000000
   16b7c:	e3001349 	movw	r1, #841	; 0x349
   16b80:	e3401002 	movt	r1, #2
   16b84:	e5832004 	str	r2, [r3, #4]
   16b88:	e3a02000 	mov	r2, #0
   16b8c:	e5831000 	str	r1, [r3]
   16b90:	e3031004 	movw	r1, #12292	; 0x3004
   16b94:	e3471e20 	movt	r1, #32288	; 0x7e20
   16b98:	e5831008 	str	r1, [r3, #8]
   16b9c:	e5832010 	str	r2, [r3, #16]
   16ba0:	edc30b06 	vstr	d16, [r3, #24]
   16ba4:	e8bd8070 	pop	{r4, r5, r6, pc}

00016ba8 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()>:
   16ba8:	e5d030d7 	ldrb	r3, [r0, #215]	; 0xd7
   16bac:	e59f213c 	ldr	r2, [pc, #316]	; 16cf0 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()+0x148>
   16bb0:	e92d4070 	push	{r4, r5, r6, lr}
   16bb4:	e3530000 	cmp	r3, #0
   16bb8:	e1a04000 	mov	r4, r0
   16bbc:	e5802000 	str	r2, [r0]
   16bc0:	1a000038 	bne	16ca8 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()+0x100>
   16bc4:	e3a03a03 	mov	r3, #12288	; 0x3000
   16bc8:	e3433f20 	movt	r3, #16160	; 0x3f20
   16bcc:	e3a02000 	mov	r2, #0
   16bd0:	e28450d4 	add	r5, r4, #212	; 0xd4
   16bd4:	e5832000 	str	r2, [r3]
   16bd8:	ebffd6ac 	bl	c690 <CTimer::Get()>
   16bdc:	e3a00032 	mov	r0, #50	; 0x32
   16be0:	ebffd66c 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   16be4:	e1a00005 	mov	r0, r5
   16be8:	eb000aff 	bl	197ec <CGPIOClock::Stop()>
   16bec:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   16bf0:	e3530000 	cmp	r3, #0
   16bf4:	0a000036 	beq	16cd4 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()+0x12c>
   16bf8:	e5d430d6 	ldrb	r3, [r4, #214]	; 0xd6
   16bfc:	e3530000 	cmp	r3, #0
   16c00:	1a00002f 	bne	16cc4 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()+0x11c>
   16c04:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   16c08:	e28430e8 	add	r3, r4, #232	; 0xe8
   16c0c:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   16c10:	e3a02000 	mov	r2, #0
   16c14:	e5842054 	str	r2, [r4, #84]	; 0x54
   16c18:	e1500002 	cmp	r0, r2
   16c1c:	f443078f 	vst1.32	{d16}, [r3]
   16c20:	0a000000 	beq	16c28 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()+0x80>
   16c24:	eb0006d0 	bl	1876c <operator delete[](void*)>
   16c28:	e59400e4 	ldr	r0, [r4, #228]	; 0xe4
   16c2c:	e3a03000 	mov	r3, #0
   16c30:	e58430e0 	str	r3, [r4, #224]	; 0xe0
   16c34:	e1500003 	cmp	r0, r3
   16c38:	0a000000 	beq	16c40 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()+0x98>
   16c3c:	eb0006ca 	bl	1876c <operator delete[](void*)>
   16c40:	e59400d8 	ldr	r0, [r4, #216]	; 0xd8
   16c44:	e3a03000 	mov	r3, #0
   16c48:	e58430e4 	str	r3, [r4, #228]	; 0xe4
   16c4c:	e1500003 	cmp	r0, r3
   16c50:	0a000000 	beq	16c58 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()+0xb0>
   16c54:	eb0006c4 	bl	1876c <operator delete[](void*)>
   16c58:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   16c5c:	e3a03000 	mov	r3, #0
   16c60:	e58430d8 	str	r3, [r4, #216]	; 0xd8
   16c64:	e1500003 	cmp	r0, r3
   16c68:	0a000000 	beq	16c70 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()+0xc8>
   16c6c:	eb0006be 	bl	1876c <operator delete[](void*)>
   16c70:	e3a03000 	mov	r3, #0
   16c74:	e1a00005 	mov	r0, r5
   16c78:	e58430dc 	str	r3, [r4, #220]	; 0xdc
   16c7c:	eb000a8f 	bl	196c0 <CGPIOClock::~CGPIOClock()>
   16c80:	e28400ac 	add	r0, r4, #172	; 0xac
   16c84:	ebffcc1d 	bl	9d00 <CGPIOPin::~CGPIOPin()>
   16c88:	e2840084 	add	r0, r4, #132	; 0x84
   16c8c:	ebffcc1b 	bl	9d00 <CGPIOPin::~CGPIOPin()>
   16c90:	e284005c 	add	r0, r4, #92	; 0x5c
   16c94:	ebffcc19 	bl	9d00 <CGPIOPin::~CGPIOPin()>
   16c98:	e1a00004 	mov	r0, r4
   16c9c:	eb0001b2 	bl	1736c <CSoundBaseDevice::~CSoundBaseDevice()>
   16ca0:	e1a00004 	mov	r0, r4
   16ca4:	e8bd8070 	pop	{r4, r5, r6, pc}
   16ca8:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   16cac:	e3401001 	movt	r1, #1
   16cb0:	e30b0a74 	movw	r0, #47732	; 0xba74
   16cb4:	e3400001 	movt	r0, #1
   16cb8:	e3a020b4 	mov	r2, #180	; 0xb4
   16cbc:	ebffe371 	bl	fa88 <assertion_failed>
   16cc0:	eaffffbf 	b	16bc4 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()+0x1c>
   16cc4:	e3a01010 	mov	r1, #16
   16cc8:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   16ccc:	ebfff42c 	bl	13d84 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   16cd0:	eaffffcb 	b	16c04 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()+0x5c>
   16cd4:	e30b19dc 	movw	r1, #47580	; 0xb9dc
   16cd8:	e3401001 	movt	r1, #1
   16cdc:	e30a0004 	movw	r0, #40964	; 0xa004
   16ce0:	e3400001 	movt	r0, #1
   16ce4:	e3a020ba 	mov	r2, #186	; 0xba
   16ce8:	ebffe366 	bl	fa88 <assertion_failed>
   16cec:	eaffffc1 	b	16bf8 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()+0x50>
   16cf0:	0001b9ac 	.word	0x0001b9ac

00016cf4 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()>:
   16cf4:	e92d4010 	push	{r4, lr}
   16cf8:	e1a04000 	mov	r4, r0
   16cfc:	ebffffa9 	bl	16ba8 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()>
   16d00:	e1a00004 	mov	r0, r4
   16d04:	e3a010f8 	mov	r1, #248	; 0xf8
   16d08:	eb000698 	bl	18770 <operator delete(void*, unsigned int)>
   16d0c:	e1a00004 	mov	r0, r4
   16d10:	e8bd8010 	pop	{r4, pc}
   16d14:	00000000 	andeq	r0, r0, r0

00016d18 <CSoundBaseDevice::GetRangeMin() const>:
   16d18:	e590001c 	ldr	r0, [r0, #28]
   16d1c:	e12fff1e 	bx	lr

00016d20 <CSoundBaseDevice::GetRangeMax() const>:
   16d20:	e5900020 	ldr	r0, [r0, #32]
   16d24:	e12fff1e 	bx	lr

00016d28 <CSoundBaseDevice::GetChunk(short*, unsigned int)>:
   16d28:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16d2c:	e1a04000 	mov	r4, r0
   16d30:	e1a05001 	mov	r5, r1
   16d34:	e5d03004 	ldrb	r3, [r0, #4]
   16d38:	e1a09002 	mov	r9, r2
   16d3c:	e3530001 	cmp	r3, #1
   16d40:	0a000005 	beq	16d5c <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x34>
   16d44:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   16d48:	e3401001 	movt	r1, #1
   16d4c:	e30b0b60 	movw	r0, #47968	; 0xbb60
   16d50:	e3400001 	movt	r0, #1
   16d54:	e3a020e6 	mov	r2, #230	; 0xe6
   16d58:	ebffe34a 	bl	fa88 <assertion_failed>
   16d5c:	e3550000 	cmp	r5, #0
   16d60:	0a000078 	beq	16f48 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x220>
   16d64:	e3590000 	cmp	r9, #0
   16d68:	0a000039 	beq	16e54 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x12c>
   16d6c:	e3190001 	tst	r9, #1
   16d70:	1a000030 	bne	16e38 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x110>
   16d74:	e594700c 	ldr	r7, [r4, #12]
   16d78:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   16d7c:	e3500000 	cmp	r0, #0
   16d80:	e0070997 	mul	r7, r7, r9
   16d84:	1a000063 	bne	16f18 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x1f0>
   16d88:	e5943014 	ldr	r3, [r4, #20]
   16d8c:	e3530001 	cmp	r3, #1
   16d90:	9a000064 	bls	16f28 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x200>
   16d94:	e5942040 	ldr	r2, [r4, #64]	; 0x40
   16d98:	e1520003 	cmp	r2, r3
   16d9c:	2a000055 	bcs	16ef8 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x1d0>
   16da0:	e5948044 	ldr	r8, [r4, #68]	; 0x44
   16da4:	e1580003 	cmp	r8, r3
   16da8:	2a00004a 	bcs	16ed8 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x1b0>
   16dac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   16db0:	e1530008 	cmp	r3, r8
   16db4:	35942014 	ldrcc	r2, [r4, #20]
   16db8:	30833002 	addcc	r3, r3, r2
   16dbc:	e0438008 	sub	r8, r3, r8
   16dc0:	e1570008 	cmp	r7, r8
   16dc4:	31a06007 	movcc	r6, r7
   16dc8:	21a06008 	movcs	r6, r8
   16dcc:	e3560000 	cmp	r6, #0
   16dd0:	1a000028 	bne	16e78 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x150>
   16dd4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   16dd8:	e3530000 	cmp	r3, #0
   16ddc:	1a000023 	bne	16e70 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x148>
   16de0:	e1570006 	cmp	r7, r6
   16de4:	9a000009 	bls	16e10 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0xe8>
   16de8:	e5942010 	ldr	r2, [r4, #16]
   16dec:	e284a024 	add	sl, r4, #36	; 0x24
   16df0:	e1a00005 	mov	r0, r5
   16df4:	e1a0100a 	mov	r1, sl
   16df8:	ebffd7f3 	bl	cdcc <memcpy>
   16dfc:	e5942010 	ldr	r2, [r4, #16]
   16e00:	e0866002 	add	r6, r6, r2
   16e04:	e0855002 	add	r5, r5, r2
   16e08:	e1570006 	cmp	r7, r6
   16e0c:	8afffff7 	bhi	16df0 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0xc8>
   16e10:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   16e14:	e3530000 	cmp	r3, #0
   16e18:	0a000004 	beq	16e30 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x108>
   16e1c:	e5942018 	ldr	r2, [r4, #24]
   16e20:	e1520008 	cmp	r2, r8
   16e24:	9a000001 	bls	16e30 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x108>
   16e28:	e594004c 	ldr	r0, [r4, #76]	; 0x4c
   16e2c:	e12fff33 	blx	r3
   16e30:	e1a00009 	mov	r0, r9
   16e34:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e38:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   16e3c:	e3401001 	movt	r1, #1
   16e40:	e30b0ba4 	movw	r0, #48036	; 0xbba4
   16e44:	e3400001 	movt	r0, #1
   16e48:	e3002137 	movw	r2, #311	; 0x137
   16e4c:	ebffe30d 	bl	fa88 <assertion_failed>
   16e50:	eaffffc7 	b	16d74 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x4c>
   16e54:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   16e58:	e3401001 	movt	r1, #1
   16e5c:	e30b0b94 	movw	r0, #48020	; 0xbb94
   16e60:	e3400001 	movt	r0, #1
   16e64:	e3002136 	movw	r2, #310	; 0x136
   16e68:	ebffe306 	bl	fa88 <assertion_failed>
   16e6c:	eaffffc0 	b	16d74 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x4c>
   16e70:	ebffd1a7 	bl	b514 <LeaveCritical>
   16e74:	eaffffd9 	b	16de0 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0xb8>
   16e78:	e3550000 	cmp	r5, #0
   16e7c:	0a000040 	beq	16f84 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x25c>
   16e80:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   16e84:	e3520000 	cmp	r2, #0
   16e88:	0a000035 	beq	16f64 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x23c>
   16e8c:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   16e90:	e0851006 	add	r1, r5, r6
   16e94:	e3a00000 	mov	r0, #0
   16e98:	ea000000 	b	16ea0 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x178>
   16e9c:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   16ea0:	e7d23003 	ldrb	r3, [r2, r3]
   16ea4:	e4c53001 	strb	r3, [r5], #1
   16ea8:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   16eac:	e5942014 	ldr	r2, [r4, #20]
   16eb0:	e2833001 	add	r3, r3, #1
   16eb4:	e5843044 	str	r3, [r4, #68]	; 0x44
   16eb8:	e1530002 	cmp	r3, r2
   16ebc:	05840044 	streq	r0, [r4, #68]	; 0x44
   16ec0:	03a03000 	moveq	r3, #0
   16ec4:	e1510005 	cmp	r1, r5
   16ec8:	1afffff3 	bne	16e9c <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x174>
   16ecc:	e0488006 	sub	r8, r8, r6
   16ed0:	e1a05001 	mov	r5, r1
   16ed4:	eaffffbe 	b	16dd4 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0xac>
   16ed8:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   16edc:	e3401001 	movt	r1, #1
   16ee0:	e30b0bf4 	movw	r0, #48116	; 0xbbf4
   16ee4:	e3400001 	movt	r0, #1
   16ee8:	e3a02e17 	mov	r2, #368	; 0x170
   16eec:	ebffe2e5 	bl	fa88 <assertion_failed>
   16ef0:	e5948044 	ldr	r8, [r4, #68]	; 0x44
   16ef4:	eaffffac 	b	16dac <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x84>
   16ef8:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   16efc:	e3401001 	movt	r1, #1
   16f00:	e30b0bdc 	movw	r0, #48092	; 0xbbdc
   16f04:	e3400001 	movt	r0, #1
   16f08:	e300216f 	movw	r2, #367	; 0x16f
   16f0c:	ebffe2dd 	bl	fa88 <assertion_failed>
   16f10:	e5943014 	ldr	r3, [r4, #20]
   16f14:	eaffffa1 	b	16da0 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x78>
   16f18:	ebffd150 	bl	b460 <EnterCritical>
   16f1c:	e5943014 	ldr	r3, [r4, #20]
   16f20:	e3530001 	cmp	r3, #1
   16f24:	8affff9a 	bhi	16d94 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x6c>
   16f28:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   16f2c:	e3401001 	movt	r1, #1
   16f30:	e30b0bc8 	movw	r0, #48072	; 0xbbc8
   16f34:	e3400001 	movt	r0, #1
   16f38:	e300216e 	movw	r2, #366	; 0x16e
   16f3c:	ebffe2d1 	bl	fa88 <assertion_failed>
   16f40:	e5943014 	ldr	r3, [r4, #20]
   16f44:	eaffff92 	b	16d94 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x6c>
   16f48:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   16f4c:	e3401001 	movt	r1, #1
   16f50:	e30b0b84 	movw	r0, #48004	; 0xbb84
   16f54:	e3400001 	movt	r0, #1
   16f58:	e3a02f4d 	mov	r2, #308	; 0x134
   16f5c:	ebffe2c9 	bl	fa88 <assertion_failed>
   16f60:	eaffff7f 	b	16d64 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x3c>
   16f64:	e3a02e19 	mov	r2, #400	; 0x190
   16f68:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   16f6c:	e3401001 	movt	r1, #1
   16f70:	e30b0c18 	movw	r0, #48152	; 0xbc18
   16f74:	e3400001 	movt	r0, #1
   16f78:	ebffe2c2 	bl	fa88 <assertion_failed>
   16f7c:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   16f80:	eaffffc1 	b	16e8c <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x164>
   16f84:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   16f88:	e3401001 	movt	r1, #1
   16f8c:	e30b0c10 	movw	r0, #48144	; 0xbc10
   16f90:	e3400001 	movt	r0, #1
   16f94:	e300218f 	movw	r2, #399	; 0x18f
   16f98:	ebffe2ba 	bl	fa88 <assertion_failed>
   16f9c:	eaffffb7 	b	16e80 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x158>

00016fa0 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)>:
   16fa0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16fa4:	e1a04000 	mov	r4, r0
   16fa8:	e1a05001 	mov	r5, r1
   16fac:	e5d03004 	ldrb	r3, [r0, #4]
   16fb0:	e1a09002 	mov	r9, r2
   16fb4:	e2433002 	sub	r3, r3, #2
   16fb8:	e3530001 	cmp	r3, #1
   16fbc:	9a000005 	bls	16fd8 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x38>
   16fc0:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   16fc4:	e3401001 	movt	r1, #1
   16fc8:	e30b0c28 	movw	r0, #48168	; 0xbc28
   16fcc:	e3400001 	movt	r0, #1
   16fd0:	e3a020ee 	mov	r2, #238	; 0xee
   16fd4:	ebffe2ab 	bl	fa88 <assertion_failed>
   16fd8:	e3550000 	cmp	r5, #0
   16fdc:	0a000078 	beq	171c4 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x224>
   16fe0:	e3590000 	cmp	r9, #0
   16fe4:	0a000039 	beq	170d0 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x130>
   16fe8:	e3190001 	tst	r9, #1
   16fec:	1a000030 	bne	170b4 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x114>
   16ff0:	e594700c 	ldr	r7, [r4, #12]
   16ff4:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   16ff8:	e3500000 	cmp	r0, #0
   16ffc:	e0070997 	mul	r7, r7, r9
   17000:	1a000063 	bne	17194 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x1f4>
   17004:	e5943014 	ldr	r3, [r4, #20]
   17008:	e3530001 	cmp	r3, #1
   1700c:	9a000064 	bls	171a4 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x204>
   17010:	e5942040 	ldr	r2, [r4, #64]	; 0x40
   17014:	e1520003 	cmp	r2, r3
   17018:	2a000055 	bcs	17174 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x1d4>
   1701c:	e5948044 	ldr	r8, [r4, #68]	; 0x44
   17020:	e1580003 	cmp	r8, r3
   17024:	2a00004a 	bcs	17154 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x1b4>
   17028:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1702c:	e1530008 	cmp	r3, r8
   17030:	35942014 	ldrcc	r2, [r4, #20]
   17034:	30833002 	addcc	r3, r3, r2
   17038:	e0438008 	sub	r8, r3, r8
   1703c:	e1570008 	cmp	r7, r8
   17040:	31a06007 	movcc	r6, r7
   17044:	21a06008 	movcs	r6, r8
   17048:	e3560000 	cmp	r6, #0
   1704c:	1a000028 	bne	170f4 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x154>
   17050:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   17054:	e3530000 	cmp	r3, #0
   17058:	1a000023 	bne	170ec <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x14c>
   1705c:	e1570006 	cmp	r7, r6
   17060:	9a000009 	bls	1708c <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0xec>
   17064:	e5942010 	ldr	r2, [r4, #16]
   17068:	e284a024 	add	sl, r4, #36	; 0x24
   1706c:	e1a00005 	mov	r0, r5
   17070:	e1a0100a 	mov	r1, sl
   17074:	ebffd754 	bl	cdcc <memcpy>
   17078:	e5942010 	ldr	r2, [r4, #16]
   1707c:	e0866002 	add	r6, r6, r2
   17080:	e0855002 	add	r5, r5, r2
   17084:	e1570006 	cmp	r7, r6
   17088:	8afffff7 	bhi	1706c <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0xcc>
   1708c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   17090:	e3530000 	cmp	r3, #0
   17094:	0a000004 	beq	170ac <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x10c>
   17098:	e5942018 	ldr	r2, [r4, #24]
   1709c:	e1520008 	cmp	r2, r8
   170a0:	9a000001 	bls	170ac <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x10c>
   170a4:	e594004c 	ldr	r0, [r4, #76]	; 0x4c
   170a8:	e12fff33 	blx	r3
   170ac:	e1a00009 	mov	r0, r9
   170b0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   170b4:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   170b8:	e3401001 	movt	r1, #1
   170bc:	e30b0ba4 	movw	r0, #48036	; 0xbba4
   170c0:	e3400001 	movt	r0, #1
   170c4:	e3002137 	movw	r2, #311	; 0x137
   170c8:	ebffe26e 	bl	fa88 <assertion_failed>
   170cc:	eaffffc7 	b	16ff0 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x50>
   170d0:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   170d4:	e3401001 	movt	r1, #1
   170d8:	e30b0b94 	movw	r0, #48020	; 0xbb94
   170dc:	e3400001 	movt	r0, #1
   170e0:	e3002136 	movw	r2, #310	; 0x136
   170e4:	ebffe267 	bl	fa88 <assertion_failed>
   170e8:	eaffffc0 	b	16ff0 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x50>
   170ec:	ebffd108 	bl	b514 <LeaveCritical>
   170f0:	eaffffd9 	b	1705c <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0xbc>
   170f4:	e3550000 	cmp	r5, #0
   170f8:	0a000040 	beq	17200 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x260>
   170fc:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   17100:	e3520000 	cmp	r2, #0
   17104:	0a000035 	beq	171e0 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x240>
   17108:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   1710c:	e0851006 	add	r1, r5, r6
   17110:	e3a00000 	mov	r0, #0
   17114:	ea000000 	b	1711c <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x17c>
   17118:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   1711c:	e7d23003 	ldrb	r3, [r2, r3]
   17120:	e4c53001 	strb	r3, [r5], #1
   17124:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   17128:	e5942014 	ldr	r2, [r4, #20]
   1712c:	e2833001 	add	r3, r3, #1
   17130:	e5843044 	str	r3, [r4, #68]	; 0x44
   17134:	e1530002 	cmp	r3, r2
   17138:	05840044 	streq	r0, [r4, #68]	; 0x44
   1713c:	03a03000 	moveq	r3, #0
   17140:	e1510005 	cmp	r1, r5
   17144:	1afffff3 	bne	17118 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x178>
   17148:	e0488006 	sub	r8, r8, r6
   1714c:	e1a05001 	mov	r5, r1
   17150:	eaffffbe 	b	17050 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0xb0>
   17154:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17158:	e3401001 	movt	r1, #1
   1715c:	e30b0bf4 	movw	r0, #48116	; 0xbbf4
   17160:	e3400001 	movt	r0, #1
   17164:	e3a02e17 	mov	r2, #368	; 0x170
   17168:	ebffe246 	bl	fa88 <assertion_failed>
   1716c:	e5948044 	ldr	r8, [r4, #68]	; 0x44
   17170:	eaffffac 	b	17028 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x88>
   17174:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17178:	e3401001 	movt	r1, #1
   1717c:	e30b0bdc 	movw	r0, #48092	; 0xbbdc
   17180:	e3400001 	movt	r0, #1
   17184:	e300216f 	movw	r2, #367	; 0x16f
   17188:	ebffe23e 	bl	fa88 <assertion_failed>
   1718c:	e5943014 	ldr	r3, [r4, #20]
   17190:	eaffffa1 	b	1701c <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x7c>
   17194:	ebffd0b1 	bl	b460 <EnterCritical>
   17198:	e5943014 	ldr	r3, [r4, #20]
   1719c:	e3530001 	cmp	r3, #1
   171a0:	8affff9a 	bhi	17010 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x70>
   171a4:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   171a8:	e3401001 	movt	r1, #1
   171ac:	e30b0bc8 	movw	r0, #48072	; 0xbbc8
   171b0:	e3400001 	movt	r0, #1
   171b4:	e300216e 	movw	r2, #366	; 0x16e
   171b8:	ebffe232 	bl	fa88 <assertion_failed>
   171bc:	e5943014 	ldr	r3, [r4, #20]
   171c0:	eaffff92 	b	17010 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x70>
   171c4:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   171c8:	e3401001 	movt	r1, #1
   171cc:	e30b0b84 	movw	r0, #48004	; 0xbb84
   171d0:	e3400001 	movt	r0, #1
   171d4:	e3a02f4d 	mov	r2, #308	; 0x134
   171d8:	ebffe22a 	bl	fa88 <assertion_failed>
   171dc:	eaffff7f 	b	16fe0 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x40>
   171e0:	e3a02e19 	mov	r2, #400	; 0x190
   171e4:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   171e8:	e3401001 	movt	r1, #1
   171ec:	e30b0c18 	movw	r0, #48152	; 0xbc18
   171f0:	e3400001 	movt	r0, #1
   171f4:	ebffe223 	bl	fa88 <assertion_failed>
   171f8:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   171fc:	eaffffc1 	b	17108 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x168>
   17200:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17204:	e3401001 	movt	r1, #1
   17208:	e30b0c10 	movw	r0, #48144	; 0xbc10
   1720c:	e3400001 	movt	r0, #1
   17210:	e300218f 	movw	r2, #399	; 0x18f
   17214:	ebffe21b 	bl	fa88 <assertion_failed>
   17218:	eaffffb7 	b	170fc <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x15c>

0001721c <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int)>:
   1721c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   17220:	e1a04000 	mov	r4, r0
   17224:	e1a05001 	mov	r5, r1
   17228:	e1a08003 	mov	r8, r3
   1722c:	e1a07002 	mov	r7, r2
   17230:	eb000906 	bl	19650 <CDevice::CDevice()>
   17234:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   17238:	e2842014 	add	r2, r4, #20
   1723c:	e284c040 	add	ip, r4, #64	; 0x40
   17240:	e3a06000 	mov	r6, #0
   17244:	e59f011c 	ldr	r0, [pc, #284]	; 17368 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int)+0x14c>
   17248:	e5c45004 	strb	r5, [r4, #4]
   1724c:	e3a03001 	mov	r3, #1
   17250:	e5840000 	str	r0, [r4]
   17254:	e3a05004 	mov	r5, #4
   17258:	e5848008 	str	r8, [r4, #8]
   1725c:	e1a01006 	mov	r1, r6
   17260:	f442078f 	vst1.32	{d16}, [r2]
   17264:	e2840024 	add	r0, r4, #36	; 0x24
   17268:	e5c4502c 	strb	r5, [r4, #44]	; 0x2c
   1726c:	e3a02008 	mov	r2, #8
   17270:	e5846030 	str	r6, [r4, #48]	; 0x30
   17274:	e584603c 	str	r6, [r4, #60]	; 0x3c
   17278:	f44c078f 	vst1.32	{d16}, [ip]
   1727c:	e5843050 	str	r3, [r4, #80]	; 0x50
   17280:	e5846048 	str	r6, [r4, #72]	; 0x48
   17284:	ebffd50f 	bl	c6c8 <memset>
   17288:	e5d43004 	ldrb	r3, [r4, #4]
   1728c:	e3530002 	cmp	r3, #2
   17290:	0a000020 	beq	17318 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int)+0xfc>
   17294:	e3530003 	cmp	r3, #3
   17298:	0a000012 	beq	172e8 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int)+0xcc>
   1729c:	e3530001 	cmp	r3, #1
   172a0:	0a00000a 	beq	172d0 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int)+0xb4>
   172a4:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   172a8:	e3401001 	movt	r1, #1
   172ac:	e30b0b90 	movw	r0, #48016	; 0xbb90
   172b0:	e3400001 	movt	r0, #1
   172b4:	e3a0203f 	mov	r2, #63	; 0x3f
   172b8:	ebffe1f2 	bl	fa88 <assertion_failed>
   172bc:	e594500c 	ldr	r5, [r4, #12]
   172c0:	e1a05085 	lsl	r5, r5, #1
   172c4:	e5845010 	str	r5, [r4, #16]
   172c8:	e1a00004 	mov	r0, r4
   172cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   172d0:	eddf0b20 	vldr	d16, [pc, #128]	; 17358 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int)+0x13c>
   172d4:	e284301c 	add	r3, r4, #28
   172d8:	e3a02002 	mov	r2, #2
   172dc:	e584200c 	str	r2, [r4, #12]
   172e0:	f443078f 	vst1.32	{d16}, [r3]
   172e4:	eafffff6 	b	172c4 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int)+0xa8>
   172e8:	e2472001 	sub	r2, r7, #1
   172ec:	e584500c 	str	r5, [r4, #12]
   172f0:	e3520000 	cmp	r2, #0
   172f4:	e5842020 	str	r2, [r4, #32]
   172f8:	e584601c 	str	r6, [r4, #28]
   172fc:	c3a05008 	movgt	r5, #8
   17300:	da00000a 	ble	17330 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int)+0x114>
   17304:	e0822fa2 	add	r2, r2, r2, lsr #31
   17308:	e1a020c2 	asr	r2, r2, #1
   1730c:	e5842028 	str	r2, [r4, #40]	; 0x28
   17310:	e5842024 	str	r2, [r4, #36]	; 0x24
   17314:	eaffffea 	b	172c4 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int)+0xa8>
   17318:	eddf0b10 	vldr	d16, [pc, #64]	; 17360 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int)+0x144>
   1731c:	e284301c 	add	r3, r4, #28
   17320:	e584500c 	str	r5, [r4, #12]
   17324:	e3a05008 	mov	r5, #8
   17328:	f443078f 	vst1.32	{d16}, [r3]
   1732c:	eaffffe4 	b	172c4 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int)+0xa8>
   17330:	e3a02038 	mov	r2, #56	; 0x38
   17334:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17338:	e3401001 	movt	r1, #1
   1733c:	e30b0c74 	movw	r0, #48244	; 0xbc74
   17340:	e3400001 	movt	r0, #1
   17344:	ebffe1cf 	bl	fa88 <assertion_failed>
   17348:	e594500c 	ldr	r5, [r4, #12]
   1734c:	e5942020 	ldr	r2, [r4, #32]
   17350:	e1a05085 	lsl	r5, r5, #1
   17354:	eaffffea 	b	17304 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int)+0xe8>
   17358:	ffff8000 	.word	0xffff8000
   1735c:	00007fff 	.word	0x00007fff
   17360:	ff800001 	.word	0xff800001
   17364:	007fffff 	.word	0x007fffff
   17368:	0001bb1c 	.word	0x0001bb1c

0001736c <CSoundBaseDevice::~CSoundBaseDevice()>:
   1736c:	e92d4010 	push	{r4, lr}
   17370:	e1a04000 	mov	r4, r0
   17374:	e3a03000 	mov	r3, #0
   17378:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
   1737c:	e59f2028 	ldr	r2, [pc, #40]	; 173ac <CSoundBaseDevice::~CSoundBaseDevice()+0x40>
   17380:	e5842000 	str	r2, [r4]
   17384:	e1500003 	cmp	r0, r3
   17388:	e5843048 	str	r3, [r4, #72]	; 0x48
   1738c:	0a000000 	beq	17394 <CSoundBaseDevice::~CSoundBaseDevice()+0x28>
   17390:	eb0004f5 	bl	1876c <operator delete[](void*)>
   17394:	e3a03000 	mov	r3, #0
   17398:	e1a00004 	mov	r0, r4
   1739c:	e584303c 	str	r3, [r4, #60]	; 0x3c
   173a0:	eb00089e 	bl	19620 <CDevice::~CDevice()>
   173a4:	e1a00004 	mov	r0, r4
   173a8:	e8bd8010 	pop	{r4, pc}
   173ac:	0001bb1c 	.word	0x0001bb1c

000173b0 <CSoundBaseDevice::~CSoundBaseDevice()>:
   173b0:	e92d4010 	push	{r4, lr}
   173b4:	e1a04000 	mov	r4, r0
   173b8:	e3a03000 	mov	r3, #0
   173bc:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
   173c0:	e59f2034 	ldr	r2, [pc, #52]	; 173fc <CSoundBaseDevice::~CSoundBaseDevice()+0x4c>
   173c4:	e5842000 	str	r2, [r4]
   173c8:	e1500003 	cmp	r0, r3
   173cc:	e5843048 	str	r3, [r4, #72]	; 0x48
   173d0:	0a000000 	beq	173d8 <CSoundBaseDevice::~CSoundBaseDevice()+0x28>
   173d4:	eb0004e4 	bl	1876c <operator delete[](void*)>
   173d8:	e3a03000 	mov	r3, #0
   173dc:	e1a00004 	mov	r0, r4
   173e0:	e584303c 	str	r3, [r4, #60]	; 0x3c
   173e4:	eb00088d 	bl	19620 <CDevice::~CDevice()>
   173e8:	e1a00004 	mov	r0, r4
   173ec:	e3a01054 	mov	r1, #84	; 0x54
   173f0:	eb0004de 	bl	18770 <operator delete(void*, unsigned int)>
   173f4:	e1a00004 	mov	r0, r4
   173f8:	e8bd8010 	pop	{r4, pc}
   173fc:	0001bb1c 	.word	0x0001bb1c

00017400 <CSoundBaseDevice::AllocateQueue(unsigned int)>:
   17400:	e92d4070 	push	{r4, r5, r6, lr}
   17404:	e1a04000 	mov	r4, r0
   17408:	e1a05001 	mov	r5, r1
   1740c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   17410:	e3530000 	cmp	r3, #0
   17414:	0a000005 	beq	17430 <CSoundBaseDevice::AllocateQueue(unsigned int)+0x30>
   17418:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   1741c:	e3401001 	movt	r1, #1
   17420:	e30b0c84 	movw	r0, #48260	; 0xbc84
   17424:	e3400001 	movt	r0, #1
   17428:	e3a0205a 	mov	r2, #90	; 0x5a
   1742c:	ebffe195 	bl	fa88 <assertion_failed>
   17430:	e2453001 	sub	r3, r5, #1
   17434:	e3530ffa 	cmp	r3, #1000	; 0x3e8
   17438:	3a000005 	bcc	17454 <CSoundBaseDevice::AllocateQueue(unsigned int)+0x54>
   1743c:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17440:	e3401001 	movt	r1, #1
   17444:	e30b0c94 	movw	r0, #48276	; 0xbc94
   17448:	e3400001 	movt	r0, #1
   1744c:	e3a0205b 	mov	r2, #91	; 0x5b
   17450:	ebffe18c 	bl	fa88 <assertion_failed>
   17454:	e5941010 	ldr	r1, [r4, #16]
   17458:	e30023e7 	movw	r2, #999	; 0x3e7
   1745c:	e5940008 	ldr	r0, [r4, #8]
   17460:	e3043dd3 	movw	r3, #19923	; 0x4dd3
   17464:	e3413062 	movt	r3, #4194	; 0x1062
   17468:	e0000190 	mul	r0, r0, r1
   1746c:	e0202095 	mla	r0, r5, r0, r2
   17470:	e0803093 	umull	r3, r0, r3, r0
   17474:	e1a00320 	lsr	r0, r0, #6
   17478:	e2800001 	add	r0, r0, #1
   1747c:	e5840014 	str	r0, [r4, #20]
   17480:	eb0004b7 	bl	18764 <operator new[](unsigned int)>
   17484:	e5943014 	ldr	r3, [r4, #20]
   17488:	e584003c 	str	r0, [r4, #60]	; 0x3c
   1748c:	e3a00001 	mov	r0, #1
   17490:	e1a03033 	lsr	r3, r3, r0
   17494:	e5843018 	str	r3, [r4, #24]
   17498:	e8bd8070 	pop	{r4, r5, r6, pc}

0001749c <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)>:
   1749c:	e92d4070 	push	{r4, r5, r6, lr}
   174a0:	e3510003 	cmp	r1, #3
   174a4:	e1a06001 	mov	r6, r1
   174a8:	e1a05000 	mov	r5, r0
   174ac:	e1a04002 	mov	r4, r2
   174b0:	8a00001e 	bhi	17530 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x94>
   174b4:	e2443001 	sub	r3, r4, #1
   174b8:	e5c5602c 	strb	r6, [r5, #44]	; 0x2c
   174bc:	e3530001 	cmp	r3, #1
   174c0:	9a000006 	bls	174e0 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x44>
   174c4:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   174c8:	e3401001 	movt	r1, #1
   174cc:	e30b0cd8 	movw	r0, #48344	; 0xbcd8
   174d0:	e3400001 	movt	r0, #1
   174d4:	e3a02070 	mov	r2, #112	; 0x70
   174d8:	ebffe16a 	bl	fa88 <assertion_failed>
   174dc:	e5d5602c 	ldrb	r6, [r5, #44]	; 0x2c
   174e0:	e5854030 	str	r4, [r5, #48]	; 0x30
   174e4:	e3560001 	cmp	r6, #1
   174e8:	0a00001a 	beq	17558 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0xbc>
   174ec:	3a000016 	bcc	1754c <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0xb0>
   174f0:	e3560002 	cmp	r6, #2
   174f4:	03a03003 	moveq	r3, #3
   174f8:	05853034 	streq	r3, [r5, #52]	; 0x34
   174fc:	1a000002 	bne	1750c <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x70>
   17500:	e0040394 	mul	r4, r4, r3
   17504:	e5854038 	str	r4, [r5, #56]	; 0x38
   17508:	e8bd8070 	pop	{r4, r5, r6, pc}
   1750c:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17510:	e3401001 	movt	r1, #1
   17514:	e30b0b90 	movw	r0, #48016	; 0xbb90
   17518:	e3400001 	movt	r0, #1
   1751c:	e3a02082 	mov	r2, #130	; 0x82
   17520:	ebffe158 	bl	fa88 <assertion_failed>
   17524:	e5954030 	ldr	r4, [r5, #48]	; 0x30
   17528:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   1752c:	eafffff3 	b	17500 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x64>
   17530:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17534:	e3401001 	movt	r1, #1
   17538:	e30b0cbc 	movw	r0, #48316	; 0xbcbc
   1753c:	e3400001 	movt	r0, #1
   17540:	e3a0206d 	mov	r2, #109	; 0x6d
   17544:	ebffe14f 	bl	fa88 <assertion_failed>
   17548:	eaffffd9 	b	174b4 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x18>
   1754c:	e3a03001 	mov	r3, #1
   17550:	e5853034 	str	r3, [r5, #52]	; 0x34
   17554:	eaffffe9 	b	17500 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x64>
   17558:	e3a03002 	mov	r3, #2
   1755c:	e5853034 	str	r3, [r5, #52]	; 0x34
   17560:	eaffffe6 	b	17500 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x64>

00017564 <CSoundBaseDevice::GetQueueSizeFrames()>:
   17564:	e92d4010 	push	{r4, lr}
   17568:	e1a04000 	mov	r4, r0
   1756c:	e5903014 	ldr	r3, [r0, #20]
   17570:	e3530000 	cmp	r3, #0
   17574:	1a000006 	bne	17594 <CSoundBaseDevice::GetQueueSizeFrames()+0x30>
   17578:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   1757c:	e3401001 	movt	r1, #1
   17580:	e30b0cfc 	movw	r0, #48380	; 0xbcfc
   17584:	e3400001 	movt	r0, #1
   17588:	e3a020ca 	mov	r2, #202	; 0xca
   1758c:	ebffe13d 	bl	fa88 <assertion_failed>
   17590:	e5943014 	ldr	r3, [r4, #20]
   17594:	e5940010 	ldr	r0, [r4, #16]
   17598:	e730f013 	udiv	r0, r3, r0
   1759c:	e8bd8010 	pop	{r4, pc}

000175a0 <CSoundBaseDevice::GetQueueFramesAvail()>:
   175a0:	e92d4070 	push	{r4, r5, r6, lr}
   175a4:	e1a04000 	mov	r4, r0
   175a8:	e5903014 	ldr	r3, [r0, #20]
   175ac:	e3530000 	cmp	r3, #0
   175b0:	0a000033 	beq	17684 <CSoundBaseDevice::GetQueueFramesAvail()+0xe4>
   175b4:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   175b8:	e3500000 	cmp	r0, #0
   175bc:	1a000024 	bne	17654 <CSoundBaseDevice::GetQueueFramesAvail()+0xb4>
   175c0:	e5943014 	ldr	r3, [r4, #20]
   175c4:	e3530001 	cmp	r3, #1
   175c8:	9a000025 	bls	17664 <CSoundBaseDevice::GetQueueFramesAvail()+0xc4>
   175cc:	e5942040 	ldr	r2, [r4, #64]	; 0x40
   175d0:	e1520003 	cmp	r2, r3
   175d4:	2a000016 	bcs	17634 <CSoundBaseDevice::GetQueueFramesAvail()+0x94>
   175d8:	e5940044 	ldr	r0, [r4, #68]	; 0x44
   175dc:	e1530000 	cmp	r3, r0
   175e0:	9a00000b 	bls	17614 <CSoundBaseDevice::GetQueueFramesAvail()+0x74>
   175e4:	e5945040 	ldr	r5, [r4, #64]	; 0x40
   175e8:	e1550000 	cmp	r5, r0
   175ec:	35943014 	ldrcc	r3, [r4, #20]
   175f0:	30855003 	addcc	r5, r5, r3
   175f4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   175f8:	e0455000 	sub	r5, r5, r0
   175fc:	e3530000 	cmp	r3, #0
   17600:	0a000000 	beq	17608 <CSoundBaseDevice::GetQueueFramesAvail()+0x68>
   17604:	ebffcfc2 	bl	b514 <LeaveCritical>
   17608:	e5940010 	ldr	r0, [r4, #16]
   1760c:	e730f015 	udiv	r0, r5, r0
   17610:	e8bd8070 	pop	{r4, r5, r6, pc}
   17614:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17618:	e3401001 	movt	r1, #1
   1761c:	e30b0bf4 	movw	r0, #48116	; 0xbbf4
   17620:	e3400001 	movt	r0, #1
   17624:	e3a02e17 	mov	r2, #368	; 0x170
   17628:	ebffe116 	bl	fa88 <assertion_failed>
   1762c:	e5940044 	ldr	r0, [r4, #68]	; 0x44
   17630:	eaffffeb 	b	175e4 <CSoundBaseDevice::GetQueueFramesAvail()+0x44>
   17634:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17638:	e3401001 	movt	r1, #1
   1763c:	e30b0bdc 	movw	r0, #48092	; 0xbbdc
   17640:	e3400001 	movt	r0, #1
   17644:	e300216f 	movw	r2, #367	; 0x16f
   17648:	ebffe10e 	bl	fa88 <assertion_failed>
   1764c:	e5943014 	ldr	r3, [r4, #20]
   17650:	eaffffe0 	b	175d8 <CSoundBaseDevice::GetQueueFramesAvail()+0x38>
   17654:	ebffcf81 	bl	b460 <EnterCritical>
   17658:	e5943014 	ldr	r3, [r4, #20]
   1765c:	e3530001 	cmp	r3, #1
   17660:	8affffd9 	bhi	175cc <CSoundBaseDevice::GetQueueFramesAvail()+0x2c>
   17664:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17668:	e3401001 	movt	r1, #1
   1766c:	e30b0bc8 	movw	r0, #48072	; 0xbbc8
   17670:	e3400001 	movt	r0, #1
   17674:	e300216e 	movw	r2, #366	; 0x16e
   17678:	ebffe102 	bl	fa88 <assertion_failed>
   1767c:	e5943014 	ldr	r3, [r4, #20]
   17680:	eaffffd1 	b	175cc <CSoundBaseDevice::GetQueueFramesAvail()+0x2c>
   17684:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17688:	e3401001 	movt	r1, #1
   1768c:	e30b0cfc 	movw	r0, #48380	; 0xbcfc
   17690:	e3400001 	movt	r0, #1
   17694:	e3a020d0 	mov	r2, #208	; 0xd0
   17698:	ebffe0fa 	bl	fa88 <assertion_failed>
   1769c:	eaffffc4 	b	175b4 <CSoundBaseDevice::GetQueueFramesAvail()+0x14>

000176a0 <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)>:
   176a0:	e92d4070 	push	{r4, r5, r6, lr}
   176a4:	e1a04000 	mov	r4, r0
   176a8:	e1a05001 	mov	r5, r1
   176ac:	e5903048 	ldr	r3, [r0, #72]	; 0x48
   176b0:	e1a06002 	mov	r6, r2
   176b4:	e3530000 	cmp	r3, #0
   176b8:	0a000005 	beq	176d4 <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)+0x34>
   176bc:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   176c0:	e3401001 	movt	r1, #1
   176c4:	e30b0d10 	movw	r0, #48400	; 0xbd10
   176c8:	e3400001 	movt	r0, #1
   176cc:	e3a020dd 	mov	r2, #221	; 0xdd
   176d0:	ebffe0ec 	bl	fa88 <assertion_failed>
   176d4:	e5845048 	str	r5, [r4, #72]	; 0x48
   176d8:	e3550000 	cmp	r5, #0
   176dc:	0a000001 	beq	176e8 <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)+0x48>
   176e0:	e584604c 	str	r6, [r4, #76]	; 0x4c
   176e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   176e8:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   176ec:	e3401001 	movt	r1, #1
   176f0:	e30b0d24 	movw	r0, #48420	; 0xbd24
   176f4:	e3400001 	movt	r0, #1
   176f8:	e3a020df 	mov	r2, #223	; 0xdf
   176fc:	ebffe0e1 	bl	fa88 <assertion_failed>
   17700:	e584604c 	str	r6, [r4, #76]	; 0x4c
   17704:	e8bd8070 	pop	{r4, r5, r6, pc}

00017708 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)>:
   17708:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1770c:	e1a04001 	mov	r4, r1
   17710:	e1a05000 	mov	r5, r0
   17714:	e5d0302c 	ldrb	r3, [r0, #44]	; 0x2c
   17718:	e1a01002 	mov	r1, r2
   1771c:	e3530004 	cmp	r3, #4
   17720:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   17724:	ea000024 	b	177bc <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0xb4>
   17728:	000177ac 	.word	0x000177ac
   1772c:	0001778c 	.word	0x0001778c
   17730:	0001774c 	.word	0x0001774c
   17734:	000177bc 	.word	0x000177bc
   17738:	0001773c 	.word	0x0001773c
   1773c:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   17740:	e1a00004 	mov	r0, r4
   17744:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   17748:	eaffd59f 	b	cdcc <memcpy>
   1774c:	e5922000 	ldr	r2, [r2]
   17750:	e1a02402 	lsl	r2, r2, #8
   17754:	e5d53004 	ldrb	r3, [r5, #4]
   17758:	e3530002 	cmp	r3, #2
   1775c:	0a00000f 	beq	177a0 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x98>
   17760:	e3530003 	cmp	r3, #3
   17764:	0a00001f 	beq	177e8 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0xe0>
   17768:	e3530001 	cmp	r3, #1
   1776c:	0a00001a 	beq	177dc <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0xd4>
   17770:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17774:	e3401001 	movt	r1, #1
   17778:	e30b0b90 	movw	r0, #48016	; 0xbb90
   1777c:	e3400001 	movt	r0, #1
   17780:	e3a02f4b 	mov	r2, #300	; 0x12c
   17784:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   17788:	eaffe0be 	b	fa88 <assertion_failed>
   1778c:	e1d220f0 	ldrsh	r2, [r2]
   17790:	e5d53004 	ldrb	r3, [r5, #4]
   17794:	e1a02802 	lsl	r2, r2, #16
   17798:	e3530002 	cmp	r3, #2
   1779c:	1affffef 	bne	17760 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x58>
   177a0:	e1a02442 	asr	r2, r2, #8
   177a4:	e5842000 	str	r2, [r4]
   177a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   177ac:	e5d22000 	ldrb	r2, [r2]
   177b0:	e2422080 	sub	r2, r2, #128	; 0x80
   177b4:	e1a02c02 	lsl	r2, r2, #24
   177b8:	eaffffe5 	b	17754 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x4c>
   177bc:	e3002111 	movw	r2, #273	; 0x111
   177c0:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   177c4:	e3401001 	movt	r1, #1
   177c8:	e30b0b90 	movw	r0, #48016	; 0xbb90
   177cc:	e3400001 	movt	r0, #1
   177d0:	ebffe0ac 	bl	fa88 <assertion_failed>
   177d4:	e3a02000 	mov	r2, #0
   177d8:	eaffffdd 	b	17754 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x4c>
   177dc:	e1a02842 	asr	r2, r2, #16
   177e0:	e1c420b0 	strh	r2, [r4]
   177e4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   177e8:	e5950020 	ldr	r0, [r5, #32]
   177ec:	e2928102 	adds	r8, r2, #-2147483648	; 0x80000000
   177f0:	e1a03fc2 	asr	r3, r2, #31
   177f4:	e2a39000 	adc	r9, r3, #0
   177f8:	e1a06000 	mov	r6, r0
   177fc:	e1a07fc0 	asr	r7, r0, #31
   17800:	e0030990 	mul	r3, r0, r9
   17804:	e0233798 	mla	r3, r8, r7, r3
   17808:	e0810890 	umull	r0, r1, r0, r8
   1780c:	e0833001 	add	r3, r3, r1
   17810:	e5843000 	str	r3, [r4]
   17814:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00017818 <CSoundBaseDevice::Write(void const*, unsigned int)>:
   17818:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1781c:	e1a04000 	mov	r4, r0
   17820:	e1a06001 	mov	r6, r1
   17824:	e5d0302c 	ldrb	r3, [r0, #44]	; 0x2c
   17828:	e24dd014 	sub	sp, sp, #20
   1782c:	e1a07002 	mov	r7, r2
   17830:	e3530003 	cmp	r3, #3
   17834:	8a000109 	bhi	17c60 <CSoundBaseDevice::Write(void const*, unsigned int)+0x448>
   17838:	e3560000 	cmp	r6, #0
   1783c:	0a00010f 	beq	17c80 <CSoundBaseDevice::Write(void const*, unsigned int)+0x468>
   17840:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   17844:	e3500000 	cmp	r0, #0
   17848:	1a000102 	bne	17c58 <CSoundBaseDevice::Write(void const*, unsigned int)+0x440>
   1784c:	e5d43004 	ldrb	r3, [r4, #4]
   17850:	e3530001 	cmp	r3, #1
   17854:	0a0000bb 	beq	17b48 <CSoundBaseDevice::Write(void const*, unsigned int)+0x330>
   17858:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   1785c:	e1530007 	cmp	r3, r7
   17860:	8a00010d 	bhi	17c9c <CSoundBaseDevice::Write(void const*, unsigned int)+0x484>
   17864:	e30b9b4c 	movw	r9, #47948	; 0xbb4c
   17868:	e3409001 	movt	r9, #1
   1786c:	e30bbbc8 	movw	fp, #48072	; 0xbbc8
   17870:	e340b001 	movt	fp, #1
   17874:	e30babdc 	movw	sl, #48092	; 0xbbdc
   17878:	e340a001 	movt	sl, #1
   1787c:	e3a08000 	mov	r8, #0
   17880:	e5942014 	ldr	r2, [r4, #20]
   17884:	e3520001 	cmp	r2, #1
   17888:	9a000098 	bls	17af0 <CSoundBaseDevice::Write(void const*, unsigned int)+0x2d8>
   1788c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   17890:	e1530002 	cmp	r3, r2
   17894:	2a000076 	bcs	17a74 <CSoundBaseDevice::Write(void const*, unsigned int)+0x25c>
   17898:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   1789c:	e1530002 	cmp	r3, r2
   178a0:	2a00006c 	bcs	17a58 <CSoundBaseDevice::Write(void const*, unsigned int)+0x240>
   178a4:	e5942040 	ldr	r2, [r4, #64]	; 0x40
   178a8:	e1520003 	cmp	r2, r3
   178ac:	31e02002 	mvncc	r2, r2
   178b0:	25941014 	ldrcs	r1, [r4, #20]
   178b4:	22411001 	subcs	r1, r1, #1
   178b8:	20412002 	subcs	r2, r1, r2
   178bc:	e0823003 	add	r3, r2, r3
   178c0:	e5942010 	ldr	r2, [r4, #16]
   178c4:	e1520003 	cmp	r2, r3
   178c8:	8a00002f 	bhi	1798c <CSoundBaseDevice::Write(void const*, unsigned int)+0x174>
   178cc:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   178d0:	e3530004 	cmp	r3, #4
   178d4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   178d8:	ea000052 	b	17a28 <CSoundBaseDevice::Write(void const*, unsigned int)+0x210>
   178dc:	000179f4 	.word	0x000179f4
   178e0:	00017a1c 	.word	0x00017a1c
   178e4:	000179a8 	.word	0x000179a8
   178e8:	00017a28 	.word	0x00017a28
   178ec:	000178f0 	.word	0x000178f0
   178f0:	e28d5008 	add	r5, sp, #8
   178f4:	e5942034 	ldr	r2, [r4, #52]	; 0x34
   178f8:	e1a00005 	mov	r0, r5
   178fc:	e1a01006 	mov	r1, r6
   17900:	ebffd531 	bl	cdcc <memcpy>
   17904:	e5941034 	ldr	r1, [r4, #52]	; 0x34
   17908:	e594200c 	ldr	r2, [r4, #12]
   1790c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   17910:	e0866001 	add	r6, r6, r1
   17914:	e0850002 	add	r0, r5, r2
   17918:	e3530002 	cmp	r3, #2
   1791c:	0a00005a 	beq	17a8c <CSoundBaseDevice::Write(void const*, unsigned int)+0x274>
   17920:	e1a01005 	mov	r1, r5
   17924:	ebffd528 	bl	cdcc <memcpy>
   17928:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   1792c:	e5943010 	ldr	r3, [r4, #16]
   17930:	e3520000 	cmp	r2, #0
   17934:	0a00005e 	beq	17ab4 <CSoundBaseDevice::Write(void const*, unsigned int)+0x29c>
   17938:	e3530000 	cmp	r3, #0
   1793c:	0a000065 	beq	17ad8 <CSoundBaseDevice::Write(void const*, unsigned int)+0x2c0>
   17940:	e0851003 	add	r1, r5, r3
   17944:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   17948:	e3a00000 	mov	r0, #0
   1794c:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   17950:	e4d5c001 	ldrb	ip, [r5], #1
   17954:	e7c2c003 	strb	ip, [r2, r3]
   17958:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1795c:	e5942014 	ldr	r2, [r4, #20]
   17960:	e2833001 	add	r3, r3, #1
   17964:	e5843040 	str	r3, [r4, #64]	; 0x40
   17968:	e1520003 	cmp	r2, r3
   1796c:	0a000034 	beq	17a44 <CSoundBaseDevice::Write(void const*, unsigned int)+0x22c>
   17970:	e1550001 	cmp	r5, r1
   17974:	1afffff4 	bne	1794c <CSoundBaseDevice::Write(void const*, unsigned int)+0x134>
   17978:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   1797c:	e0477003 	sub	r7, r7, r3
   17980:	e0888003 	add	r8, r8, r3
   17984:	e1530007 	cmp	r3, r7
   17988:	9affffbc 	bls	17880 <CSoundBaseDevice::Write(void const*, unsigned int)+0x68>
   1798c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   17990:	e3530000 	cmp	r3, #0
   17994:	0a000000 	beq	1799c <CSoundBaseDevice::Write(void const*, unsigned int)+0x184>
   17998:	ebffcedd 	bl	b514 <LeaveCritical>
   1799c:	e1a00008 	mov	r0, r8
   179a0:	e28dd014 	add	sp, sp, #20
   179a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179a8:	e5962000 	ldr	r2, [r6]
   179ac:	e1a02402 	lsl	r2, r2, #8
   179b0:	e5d43004 	ldrb	r3, [r4, #4]
   179b4:	e3530002 	cmp	r3, #2
   179b8:	0a000013 	beq	17a0c <CSoundBaseDevice::Write(void const*, unsigned int)+0x1f4>
   179bc:	e3530003 	cmp	r3, #3
   179c0:	0a000050 	beq	17b08 <CSoundBaseDevice::Write(void const*, unsigned int)+0x2f0>
   179c4:	e3530001 	cmp	r3, #1
   179c8:	028d5010 	addeq	r5, sp, #16
   179cc:	01a02842 	asreq	r2, r2, #16
   179d0:	016520b8 	strheq	r2, [r5, #-8]!
   179d4:	0affffca 	beq	17904 <CSoundBaseDevice::Write(void const*, unsigned int)+0xec>
   179d8:	e30b0b90 	movw	r0, #48016	; 0xbb90
   179dc:	e3400001 	movt	r0, #1
   179e0:	e3a02f4b 	mov	r2, #300	; 0x12c
   179e4:	e1a01009 	mov	r1, r9
   179e8:	e28d5008 	add	r5, sp, #8
   179ec:	ebffe025 	bl	fa88 <assertion_failed>
   179f0:	eaffffc3 	b	17904 <CSoundBaseDevice::Write(void const*, unsigned int)+0xec>
   179f4:	e5d62000 	ldrb	r2, [r6]
   179f8:	e5d43004 	ldrb	r3, [r4, #4]
   179fc:	e2422080 	sub	r2, r2, #128	; 0x80
   17a00:	e1a02c02 	lsl	r2, r2, #24
   17a04:	e3530002 	cmp	r3, #2
   17a08:	1affffeb 	bne	179bc <CSoundBaseDevice::Write(void const*, unsigned int)+0x1a4>
   17a0c:	e28d5010 	add	r5, sp, #16
   17a10:	e1a02442 	asr	r2, r2, #8
   17a14:	e5252008 	str	r2, [r5, #-8]!
   17a18:	eaffffb9 	b	17904 <CSoundBaseDevice::Write(void const*, unsigned int)+0xec>
   17a1c:	e1d620f0 	ldrsh	r2, [r6]
   17a20:	e1a02802 	lsl	r2, r2, #16
   17a24:	eaffffe1 	b	179b0 <CSoundBaseDevice::Write(void const*, unsigned int)+0x198>
   17a28:	e3002111 	movw	r2, #273	; 0x111
   17a2c:	e30b0b90 	movw	r0, #48016	; 0xbb90
   17a30:	e3400001 	movt	r0, #1
   17a34:	e1a01009 	mov	r1, r9
   17a38:	ebffe012 	bl	fa88 <assertion_failed>
   17a3c:	e3a02000 	mov	r2, #0
   17a40:	eaffffda 	b	179b0 <CSoundBaseDevice::Write(void const*, unsigned int)+0x198>
   17a44:	e3a03000 	mov	r3, #0
   17a48:	e5840040 	str	r0, [r4, #64]	; 0x40
   17a4c:	e1550001 	cmp	r5, r1
   17a50:	1affffbd 	bne	1794c <CSoundBaseDevice::Write(void const*, unsigned int)+0x134>
   17a54:	eaffffc7 	b	17978 <CSoundBaseDevice::Write(void const*, unsigned int)+0x160>
   17a58:	e30b0bf4 	movw	r0, #48116	; 0xbbf4
   17a5c:	e3400001 	movt	r0, #1
   17a60:	e3002162 	movw	r2, #354	; 0x162
   17a64:	e1a01009 	mov	r1, r9
   17a68:	ebffe006 	bl	fa88 <assertion_failed>
   17a6c:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   17a70:	eaffff8b 	b	178a4 <CSoundBaseDevice::Write(void const*, unsigned int)+0x8c>
   17a74:	e3002161 	movw	r2, #353	; 0x161
   17a78:	e1a01009 	mov	r1, r9
   17a7c:	e1a0000a 	mov	r0, sl
   17a80:	ebffe000 	bl	fa88 <assertion_failed>
   17a84:	e5942014 	ldr	r2, [r4, #20]
   17a88:	eaffff82 	b	17898 <CSoundBaseDevice::Write(void const*, unsigned int)+0x80>
   17a8c:	e1a02006 	mov	r2, r6
   17a90:	e1a01000 	mov	r1, r0
   17a94:	e1a00004 	mov	r0, r4
   17a98:	ebffff1a 	bl	17708 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)>
   17a9c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   17aa0:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   17aa4:	e0866003 	add	r6, r6, r3
   17aa8:	e5943010 	ldr	r3, [r4, #16]
   17aac:	e3520000 	cmp	r2, #0
   17ab0:	1affffa0 	bne	17938 <CSoundBaseDevice::Write(void const*, unsigned int)+0x120>
   17ab4:	e30b0c18 	movw	r0, #48152	; 0xbc18
   17ab8:	e3400001 	movt	r0, #1
   17abc:	e300217e 	movw	r2, #382	; 0x17e
   17ac0:	e1a01009 	mov	r1, r9
   17ac4:	e58d3000 	str	r3, [sp]
   17ac8:	ebffdfee 	bl	fa88 <assertion_failed>
   17acc:	e59d3000 	ldr	r3, [sp]
   17ad0:	e3530000 	cmp	r3, #0
   17ad4:	1affff99 	bne	17940 <CSoundBaseDevice::Write(void const*, unsigned int)+0x128>
   17ad8:	e30b0d6c 	movw	r0, #48492	; 0xbd6c
   17adc:	e3400001 	movt	r0, #1
   17ae0:	e3a02d06 	mov	r2, #384	; 0x180
   17ae4:	e1a01009 	mov	r1, r9
   17ae8:	ebffdfe6 	bl	fa88 <assertion_failed>
   17aec:	eaffffa1 	b	17978 <CSoundBaseDevice::Write(void const*, unsigned int)+0x160>
   17af0:	e3a02e16 	mov	r2, #352	; 0x160
   17af4:	e1a01009 	mov	r1, r9
   17af8:	e1a0000b 	mov	r0, fp
   17afc:	ebffdfe1 	bl	fa88 <assertion_failed>
   17b00:	e5942014 	ldr	r2, [r4, #20]
   17b04:	eaffff60 	b	1788c <CSoundBaseDevice::Write(void const*, unsigned int)+0x74>
   17b08:	e1a03fc2 	asr	r3, r2, #31
   17b0c:	e2920102 	adds	r0, r2, #-2147483648	; 0x80000000
   17b10:	e594c020 	ldr	ip, [r4, #32]
   17b14:	e2a31000 	adc	r1, r3, #0
   17b18:	e1a03001 	mov	r3, r1
   17b1c:	e1a02000 	mov	r2, r0
   17b20:	e1cd20f0 	strd	r2, [sp]
   17b24:	e28d5010 	add	r5, sp, #16
   17b28:	e59de000 	ldr	lr, [sp]
   17b2c:	e1a01fcc 	asr	r1, ip, #31
   17b30:	e003039c 	mul	r3, ip, r3
   17b34:	e023319e 	mla	r3, lr, r1, r3
   17b38:	e0810e9c 	umull	r0, r1, ip, lr
   17b3c:	e0833001 	add	r3, r3, r1
   17b40:	e5253008 	str	r3, [r5, #-8]!
   17b44:	eaffff6e 	b	17904 <CSoundBaseDevice::Write(void const*, unsigned int)+0xec>
   17b48:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   17b4c:	e3530001 	cmp	r3, #1
   17b50:	1affff40 	bne	17858 <CSoundBaseDevice::Write(void const*, unsigned int)+0x40>
   17b54:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   17b58:	e3530002 	cmp	r3, #2
   17b5c:	1affff3d 	bne	17858 <CSoundBaseDevice::Write(void const*, unsigned int)+0x40>
   17b60:	e5942014 	ldr	r2, [r4, #20]
   17b64:	e3520001 	cmp	r2, #1
   17b68:	9a00004d 	bls	17ca4 <CSoundBaseDevice::Write(void const*, unsigned int)+0x48c>
   17b6c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   17b70:	e1530002 	cmp	r3, r2
   17b74:	3a000006 	bcc	17b94 <CSoundBaseDevice::Write(void const*, unsigned int)+0x37c>
   17b78:	e3002161 	movw	r2, #353	; 0x161
   17b7c:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17b80:	e3401001 	movt	r1, #1
   17b84:	e30b0bdc 	movw	r0, #48092	; 0xbbdc
   17b88:	e3400001 	movt	r0, #1
   17b8c:	ebffdfbd 	bl	fa88 <assertion_failed>
   17b90:	e5942014 	ldr	r2, [r4, #20]
   17b94:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   17b98:	e1530002 	cmp	r3, r2
   17b9c:	3a000006 	bcc	17bbc <CSoundBaseDevice::Write(void const*, unsigned int)+0x3a4>
   17ba0:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17ba4:	e3401001 	movt	r1, #1
   17ba8:	e30b0bf4 	movw	r0, #48116	; 0xbbf4
   17bac:	e3400001 	movt	r0, #1
   17bb0:	e3002162 	movw	r2, #354	; 0x162
   17bb4:	ebffdfb3 	bl	fa88 <assertion_failed>
   17bb8:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   17bbc:	e5942040 	ldr	r2, [r4, #64]	; 0x40
   17bc0:	e5948038 	ldr	r8, [r4, #56]	; 0x38
   17bc4:	e1520003 	cmp	r2, r3
   17bc8:	31e02002 	mvncc	r2, r2
   17bcc:	e2688000 	rsb	r8, r8, #0
   17bd0:	25941014 	ldrcs	r1, [r4, #20]
   17bd4:	22411001 	subcs	r1, r1, #1
   17bd8:	20412002 	subcs	r2, r1, r2
   17bdc:	e0823003 	add	r3, r2, r3
   17be0:	e1570003 	cmp	r7, r3
   17be4:	90088007 	andls	r8, r8, r7
   17be8:	80088003 	andhi	r8, r8, r3
   17bec:	e3580000 	cmp	r8, #0
   17bf0:	0a000029 	beq	17c9c <CSoundBaseDevice::Write(void const*, unsigned int)+0x484>
   17bf4:	e3560000 	cmp	r6, #0
   17bf8:	0a000039 	beq	17ce4 <CSoundBaseDevice::Write(void const*, unsigned int)+0x4cc>
   17bfc:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   17c00:	e3520000 	cmp	r2, #0
   17c04:	0a00002e 	beq	17cc4 <CSoundBaseDevice::Write(void const*, unsigned int)+0x4ac>
   17c08:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   17c0c:	e0861008 	add	r1, r6, r8
   17c10:	e3a00000 	mov	r0, #0
   17c14:	ea000002 	b	17c24 <CSoundBaseDevice::Write(void const*, unsigned int)+0x40c>
   17c18:	e1560001 	cmp	r6, r1
   17c1c:	0affff5a 	beq	1798c <CSoundBaseDevice::Write(void const*, unsigned int)+0x174>
   17c20:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   17c24:	e4d6c001 	ldrb	ip, [r6], #1
   17c28:	e7c2c003 	strb	ip, [r2, r3]
   17c2c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   17c30:	e5942014 	ldr	r2, [r4, #20]
   17c34:	e2833001 	add	r3, r3, #1
   17c38:	e5843040 	str	r3, [r4, #64]	; 0x40
   17c3c:	e1530002 	cmp	r3, r2
   17c40:	1afffff4 	bne	17c18 <CSoundBaseDevice::Write(void const*, unsigned int)+0x400>
   17c44:	e3a03000 	mov	r3, #0
   17c48:	e5840040 	str	r0, [r4, #64]	; 0x40
   17c4c:	e1560001 	cmp	r6, r1
   17c50:	1afffff2 	bne	17c20 <CSoundBaseDevice::Write(void const*, unsigned int)+0x408>
   17c54:	eaffff4c 	b	1798c <CSoundBaseDevice::Write(void const*, unsigned int)+0x174>
   17c58:	ebffce00 	bl	b460 <EnterCritical>
   17c5c:	eafffefa 	b	1784c <CSoundBaseDevice::Write(void const*, unsigned int)+0x34>
   17c60:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17c64:	e3401001 	movt	r1, #1
   17c68:	e30b0d38 	movw	r0, #48440	; 0xbd38
   17c6c:	e3400001 	movt	r0, #1
   17c70:	e3a0208b 	mov	r2, #139	; 0x8b
   17c74:	ebffdf83 	bl	fa88 <assertion_failed>
   17c78:	e3560000 	cmp	r6, #0
   17c7c:	1afffeef 	bne	17840 <CSoundBaseDevice::Write(void const*, unsigned int)+0x28>
   17c80:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17c84:	e3401001 	movt	r1, #1
   17c88:	e30b0d5c 	movw	r0, #48476	; 0xbd5c
   17c8c:	e3400001 	movt	r0, #1
   17c90:	e3a0208d 	mov	r2, #141	; 0x8d
   17c94:	ebffdf7b 	bl	fa88 <assertion_failed>
   17c98:	eafffee8 	b	17840 <CSoundBaseDevice::Write(void const*, unsigned int)+0x28>
   17c9c:	e3a08000 	mov	r8, #0
   17ca0:	eaffff39 	b	1798c <CSoundBaseDevice::Write(void const*, unsigned int)+0x174>
   17ca4:	e3a02e16 	mov	r2, #352	; 0x160
   17ca8:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17cac:	e3401001 	movt	r1, #1
   17cb0:	e30b0bc8 	movw	r0, #48072	; 0xbbc8
   17cb4:	e3400001 	movt	r0, #1
   17cb8:	ebffdf72 	bl	fa88 <assertion_failed>
   17cbc:	e5942014 	ldr	r2, [r4, #20]
   17cc0:	eaffffa9 	b	17b6c <CSoundBaseDevice::Write(void const*, unsigned int)+0x354>
   17cc4:	e300217e 	movw	r2, #382	; 0x17e
   17cc8:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17ccc:	e3401001 	movt	r1, #1
   17cd0:	e30b0c18 	movw	r0, #48152	; 0xbc18
   17cd4:	e3400001 	movt	r0, #1
   17cd8:	ebffdf6a 	bl	fa88 <assertion_failed>
   17cdc:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   17ce0:	eaffffc8 	b	17c08 <CSoundBaseDevice::Write(void const*, unsigned int)+0x3f0>
   17ce4:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17ce8:	e3401001 	movt	r1, #1
   17cec:	e30b0c10 	movw	r0, #48144	; 0xbc10
   17cf0:	e3400001 	movt	r0, #1
   17cf4:	e300217d 	movw	r2, #381	; 0x17d
   17cf8:	ebffdf62 	bl	fa88 <assertion_failed>
   17cfc:	eaffffbe 	b	17bfc <CSoundBaseDevice::Write(void const*, unsigned int)+0x3e4>

00017d00 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)>:
   17d00:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17d04:	e1a04000 	mov	r4, r0
   17d08:	e1a09002 	mov	r9, r2
   17d0c:	e2515000 	subs	r5, r1, #0
   17d10:	0a000078 	beq	17ef8 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x1f8>
   17d14:	e3590000 	cmp	r9, #0
   17d18:	0a000039 	beq	17e04 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x104>
   17d1c:	e3190001 	tst	r9, #1
   17d20:	1a000030 	bne	17de8 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0xe8>
   17d24:	e594700c 	ldr	r7, [r4, #12]
   17d28:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   17d2c:	e3500000 	cmp	r0, #0
   17d30:	e0070997 	mul	r7, r7, r9
   17d34:	1a000063 	bne	17ec8 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x1c8>
   17d38:	e5943014 	ldr	r3, [r4, #20]
   17d3c:	e3530001 	cmp	r3, #1
   17d40:	9a000064 	bls	17ed8 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x1d8>
   17d44:	e5942040 	ldr	r2, [r4, #64]	; 0x40
   17d48:	e1520003 	cmp	r2, r3
   17d4c:	2a000055 	bcs	17ea8 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x1a8>
   17d50:	e5948044 	ldr	r8, [r4, #68]	; 0x44
   17d54:	e1580003 	cmp	r8, r3
   17d58:	2a00004a 	bcs	17e88 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x188>
   17d5c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   17d60:	e1530008 	cmp	r3, r8
   17d64:	35942014 	ldrcc	r2, [r4, #20]
   17d68:	30833002 	addcc	r3, r3, r2
   17d6c:	e0438008 	sub	r8, r3, r8
   17d70:	e1570008 	cmp	r7, r8
   17d74:	31a06007 	movcc	r6, r7
   17d78:	21a06008 	movcs	r6, r8
   17d7c:	e3560000 	cmp	r6, #0
   17d80:	1a000028 	bne	17e28 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x128>
   17d84:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   17d88:	e3530000 	cmp	r3, #0
   17d8c:	1a000023 	bne	17e20 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x120>
   17d90:	e1570006 	cmp	r7, r6
   17d94:	9a000009 	bls	17dc0 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0xc0>
   17d98:	e5942010 	ldr	r2, [r4, #16]
   17d9c:	e284a024 	add	sl, r4, #36	; 0x24
   17da0:	e1a00005 	mov	r0, r5
   17da4:	e1a0100a 	mov	r1, sl
   17da8:	ebffd407 	bl	cdcc <memcpy>
   17dac:	e5942010 	ldr	r2, [r4, #16]
   17db0:	e0866002 	add	r6, r6, r2
   17db4:	e0855002 	add	r5, r5, r2
   17db8:	e1570006 	cmp	r7, r6
   17dbc:	8afffff7 	bhi	17da0 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0xa0>
   17dc0:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   17dc4:	e3530000 	cmp	r3, #0
   17dc8:	0a000004 	beq	17de0 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0xe0>
   17dcc:	e5942018 	ldr	r2, [r4, #24]
   17dd0:	e1520008 	cmp	r2, r8
   17dd4:	9a000001 	bls	17de0 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0xe0>
   17dd8:	e594004c 	ldr	r0, [r4, #76]	; 0x4c
   17ddc:	e12fff33 	blx	r3
   17de0:	e1a00009 	mov	r0, r9
   17de4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17de8:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17dec:	e3401001 	movt	r1, #1
   17df0:	e30b0ba4 	movw	r0, #48036	; 0xbba4
   17df4:	e3400001 	movt	r0, #1
   17df8:	e3002137 	movw	r2, #311	; 0x137
   17dfc:	ebffdf21 	bl	fa88 <assertion_failed>
   17e00:	eaffffc7 	b	17d24 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x24>
   17e04:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17e08:	e3401001 	movt	r1, #1
   17e0c:	e30b0b94 	movw	r0, #48020	; 0xbb94
   17e10:	e3400001 	movt	r0, #1
   17e14:	e3002136 	movw	r2, #310	; 0x136
   17e18:	ebffdf1a 	bl	fa88 <assertion_failed>
   17e1c:	eaffffc0 	b	17d24 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x24>
   17e20:	ebffcdbb 	bl	b514 <LeaveCritical>
   17e24:	eaffffd9 	b	17d90 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x90>
   17e28:	e3550000 	cmp	r5, #0
   17e2c:	0a000040 	beq	17f34 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x234>
   17e30:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   17e34:	e3520000 	cmp	r2, #0
   17e38:	0a000035 	beq	17f14 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x214>
   17e3c:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   17e40:	e0851006 	add	r1, r5, r6
   17e44:	e3a00000 	mov	r0, #0
   17e48:	ea000000 	b	17e50 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x150>
   17e4c:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   17e50:	e7d23003 	ldrb	r3, [r2, r3]
   17e54:	e4c53001 	strb	r3, [r5], #1
   17e58:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   17e5c:	e5942014 	ldr	r2, [r4, #20]
   17e60:	e2833001 	add	r3, r3, #1
   17e64:	e5843044 	str	r3, [r4, #68]	; 0x44
   17e68:	e1530002 	cmp	r3, r2
   17e6c:	05840044 	streq	r0, [r4, #68]	; 0x44
   17e70:	03a03000 	moveq	r3, #0
   17e74:	e1550001 	cmp	r5, r1
   17e78:	1afffff3 	bne	17e4c <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x14c>
   17e7c:	e0488006 	sub	r8, r8, r6
   17e80:	e1a05001 	mov	r5, r1
   17e84:	eaffffbe 	b	17d84 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x84>
   17e88:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17e8c:	e3401001 	movt	r1, #1
   17e90:	e30b0bf4 	movw	r0, #48116	; 0xbbf4
   17e94:	e3400001 	movt	r0, #1
   17e98:	e3a02e17 	mov	r2, #368	; 0x170
   17e9c:	ebffdef9 	bl	fa88 <assertion_failed>
   17ea0:	e5948044 	ldr	r8, [r4, #68]	; 0x44
   17ea4:	eaffffac 	b	17d5c <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x5c>
   17ea8:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17eac:	e3401001 	movt	r1, #1
   17eb0:	e30b0bdc 	movw	r0, #48092	; 0xbbdc
   17eb4:	e3400001 	movt	r0, #1
   17eb8:	e300216f 	movw	r2, #367	; 0x16f
   17ebc:	ebffdef1 	bl	fa88 <assertion_failed>
   17ec0:	e5943014 	ldr	r3, [r4, #20]
   17ec4:	eaffffa1 	b	17d50 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x50>
   17ec8:	ebffcd64 	bl	b460 <EnterCritical>
   17ecc:	e5943014 	ldr	r3, [r4, #20]
   17ed0:	e3530001 	cmp	r3, #1
   17ed4:	8affff9a 	bhi	17d44 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x44>
   17ed8:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17edc:	e3401001 	movt	r1, #1
   17ee0:	e30b0bc8 	movw	r0, #48072	; 0xbbc8
   17ee4:	e3400001 	movt	r0, #1
   17ee8:	e300216e 	movw	r2, #366	; 0x16e
   17eec:	ebffdee5 	bl	fa88 <assertion_failed>
   17ef0:	e5943014 	ldr	r3, [r4, #20]
   17ef4:	eaffff92 	b	17d44 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x44>
   17ef8:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17efc:	e3401001 	movt	r1, #1
   17f00:	e30b0b84 	movw	r0, #48004	; 0xbb84
   17f04:	e3400001 	movt	r0, #1
   17f08:	e3a02f4d 	mov	r2, #308	; 0x134
   17f0c:	ebffdedd 	bl	fa88 <assertion_failed>
   17f10:	eaffff7f 	b	17d14 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x14>
   17f14:	e3a02e19 	mov	r2, #400	; 0x190
   17f18:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17f1c:	e3401001 	movt	r1, #1
   17f20:	e30b0c18 	movw	r0, #48152	; 0xbc18
   17f24:	e3400001 	movt	r0, #1
   17f28:	ebffded6 	bl	fa88 <assertion_failed>
   17f2c:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   17f30:	eaffffc1 	b	17e3c <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x13c>
   17f34:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17f38:	e3401001 	movt	r1, #1
   17f3c:	e30b0c10 	movw	r0, #48144	; 0xbc10
   17f40:	e3400001 	movt	r0, #1
   17f44:	e300218f 	movw	r2, #399	; 0x18f
   17f48:	ebffdece 	bl	fa88 <assertion_failed>
   17f4c:	eaffffb7 	b	17e30 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x130>

00017f50 <CSoundBaseDevice::GetQueueBytesFree()>:
   17f50:	e92d4010 	push	{r4, lr}
   17f54:	e1a04000 	mov	r4, r0
   17f58:	e5903014 	ldr	r3, [r0, #20]
   17f5c:	e3530001 	cmp	r3, #1
   17f60:	9a00001f 	bls	17fe4 <CSoundBaseDevice::GetQueueBytesFree()+0x94>
   17f64:	e5942040 	ldr	r2, [r4, #64]	; 0x40
   17f68:	e1520003 	cmp	r2, r3
   17f6c:	2a00000a 	bcs	17f9c <CSoundBaseDevice::GetQueueBytesFree()+0x4c>
   17f70:	e5940044 	ldr	r0, [r4, #68]	; 0x44
   17f74:	e1500003 	cmp	r0, r3
   17f78:	2a000011 	bcs	17fc4 <CSoundBaseDevice::GetQueueBytesFree()+0x74>
   17f7c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   17f80:	e1530000 	cmp	r3, r0
   17f84:	31e03003 	mvncc	r3, r3
   17f88:	25942014 	ldrcs	r2, [r4, #20]
   17f8c:	22422001 	subcs	r2, r2, #1
   17f90:	20423003 	subcs	r3, r2, r3
   17f94:	e0830000 	add	r0, r3, r0
   17f98:	e8bd8010 	pop	{r4, pc}
   17f9c:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17fa0:	e3401001 	movt	r1, #1
   17fa4:	e30b0bdc 	movw	r0, #48092	; 0xbbdc
   17fa8:	e3400001 	movt	r0, #1
   17fac:	e3002161 	movw	r2, #353	; 0x161
   17fb0:	ebffdeb4 	bl	fa88 <assertion_failed>
   17fb4:	e5943014 	ldr	r3, [r4, #20]
   17fb8:	e5940044 	ldr	r0, [r4, #68]	; 0x44
   17fbc:	e1500003 	cmp	r0, r3
   17fc0:	3affffed 	bcc	17f7c <CSoundBaseDevice::GetQueueBytesFree()+0x2c>
   17fc4:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17fc8:	e3401001 	movt	r1, #1
   17fcc:	e30b0bf4 	movw	r0, #48116	; 0xbbf4
   17fd0:	e3400001 	movt	r0, #1
   17fd4:	e3002162 	movw	r2, #354	; 0x162
   17fd8:	ebffdeaa 	bl	fa88 <assertion_failed>
   17fdc:	e5940044 	ldr	r0, [r4, #68]	; 0x44
   17fe0:	eaffffe5 	b	17f7c <CSoundBaseDevice::GetQueueBytesFree()+0x2c>
   17fe4:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   17fe8:	e3401001 	movt	r1, #1
   17fec:	e30b0bc8 	movw	r0, #48072	; 0xbbc8
   17ff0:	e3400001 	movt	r0, #1
   17ff4:	e3a02e16 	mov	r2, #352	; 0x160
   17ff8:	ebffdea2 	bl	fa88 <assertion_failed>
   17ffc:	e5943014 	ldr	r3, [r4, #20]
   18000:	eaffffd7 	b	17f64 <CSoundBaseDevice::GetQueueBytesFree()+0x14>

00018004 <CSoundBaseDevice::GetQueueBytesAvail()>:
   18004:	e92d4010 	push	{r4, lr}
   18008:	e1a04000 	mov	r4, r0
   1800c:	e5903014 	ldr	r3, [r0, #20]
   18010:	e3530001 	cmp	r3, #1
   18014:	9a00001d 	bls	18090 <CSoundBaseDevice::GetQueueBytesAvail()+0x8c>
   18018:	e5942040 	ldr	r2, [r4, #64]	; 0x40
   1801c:	e1520003 	cmp	r2, r3
   18020:	2a000008 	bcs	18048 <CSoundBaseDevice::GetQueueBytesAvail()+0x44>
   18024:	e5940044 	ldr	r0, [r4, #68]	; 0x44
   18028:	e1500003 	cmp	r0, r3
   1802c:	2a00000f 	bcs	18070 <CSoundBaseDevice::GetQueueBytesAvail()+0x6c>
   18030:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   18034:	e1530000 	cmp	r3, r0
   18038:	35942014 	ldrcc	r2, [r4, #20]
   1803c:	30833002 	addcc	r3, r3, r2
   18040:	e0430000 	sub	r0, r3, r0
   18044:	e8bd8010 	pop	{r4, pc}
   18048:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   1804c:	e3401001 	movt	r1, #1
   18050:	e30b0bdc 	movw	r0, #48092	; 0xbbdc
   18054:	e3400001 	movt	r0, #1
   18058:	e300216f 	movw	r2, #367	; 0x16f
   1805c:	ebffde89 	bl	fa88 <assertion_failed>
   18060:	e5943014 	ldr	r3, [r4, #20]
   18064:	e5940044 	ldr	r0, [r4, #68]	; 0x44
   18068:	e1500003 	cmp	r0, r3
   1806c:	3affffef 	bcc	18030 <CSoundBaseDevice::GetQueueBytesAvail()+0x2c>
   18070:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   18074:	e3401001 	movt	r1, #1
   18078:	e30b0bf4 	movw	r0, #48116	; 0xbbf4
   1807c:	e3400001 	movt	r0, #1
   18080:	e3a02e17 	mov	r2, #368	; 0x170
   18084:	ebffde7f 	bl	fa88 <assertion_failed>
   18088:	e5940044 	ldr	r0, [r4, #68]	; 0x44
   1808c:	eaffffe7 	b	18030 <CSoundBaseDevice::GetQueueBytesAvail()+0x2c>
   18090:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   18094:	e3401001 	movt	r1, #1
   18098:	e30b0bc8 	movw	r0, #48072	; 0xbbc8
   1809c:	e3400001 	movt	r0, #1
   180a0:	e300216e 	movw	r2, #366	; 0x16e
   180a4:	ebffde77 	bl	fa88 <assertion_failed>
   180a8:	e5943014 	ldr	r3, [r4, #20]
   180ac:	eaffffd9 	b	18018 <CSoundBaseDevice::GetQueueBytesAvail()+0x14>

000180b0 <CSoundBaseDevice::Enqueue(void const*, unsigned int)>:
   180b0:	e92d4070 	push	{r4, r5, r6, lr}
   180b4:	e1a04000 	mov	r4, r0
   180b8:	e1a06002 	mov	r6, r2
   180bc:	e2515000 	subs	r5, r1, #0
   180c0:	0a000026 	beq	18160 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0xb0>
   180c4:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   180c8:	e3530000 	cmp	r3, #0
   180cc:	0a00001c 	beq	18144 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x94>
   180d0:	e3560000 	cmp	r6, #0
   180d4:	0a000013 	beq	18128 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x78>
   180d8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   180dc:	e0852006 	add	r2, r5, r6
   180e0:	e3a0c000 	mov	ip, #0
   180e4:	e594103c 	ldr	r1, [r4, #60]	; 0x3c
   180e8:	e4d50001 	ldrb	r0, [r5], #1
   180ec:	e7c10003 	strb	r0, [r1, r3]
   180f0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   180f4:	e5941014 	ldr	r1, [r4, #20]
   180f8:	e2833001 	add	r3, r3, #1
   180fc:	e5843040 	str	r3, [r4, #64]	; 0x40
   18100:	e1510003 	cmp	r1, r3
   18104:	0a000002 	beq	18114 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x64>
   18108:	e1550002 	cmp	r5, r2
   1810c:	1afffff4 	bne	180e4 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x34>
   18110:	e8bd8070 	pop	{r4, r5, r6, pc}
   18114:	e3a03000 	mov	r3, #0
   18118:	e584c040 	str	ip, [r4, #64]	; 0x40
   1811c:	e1550002 	cmp	r5, r2
   18120:	1affffef 	bne	180e4 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x34>
   18124:	e8bd8070 	pop	{r4, r5, r6, pc}
   18128:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   1812c:	e3401001 	movt	r1, #1
   18130:	e30b0d6c 	movw	r0, #48492	; 0xbd6c
   18134:	e3400001 	movt	r0, #1
   18138:	e3a02d06 	mov	r2, #384	; 0x180
   1813c:	e8bd4070 	pop	{r4, r5, r6, lr}
   18140:	eaffde50 	b	fa88 <assertion_failed>
   18144:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   18148:	e3401001 	movt	r1, #1
   1814c:	e30b0c18 	movw	r0, #48152	; 0xbc18
   18150:	e3400001 	movt	r0, #1
   18154:	e300217e 	movw	r2, #382	; 0x17e
   18158:	ebffde4a 	bl	fa88 <assertion_failed>
   1815c:	eaffffdb 	b	180d0 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x20>
   18160:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   18164:	e3401001 	movt	r1, #1
   18168:	e30b0c10 	movw	r0, #48144	; 0xbc10
   1816c:	e3400001 	movt	r0, #1
   18170:	e300217d 	movw	r2, #381	; 0x17d
   18174:	ebffde43 	bl	fa88 <assertion_failed>
   18178:	eaffffd1 	b	180c4 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x14>

0001817c <CSoundBaseDevice::Dequeue(void*, unsigned int)>:
   1817c:	e92d4070 	push	{r4, r5, r6, lr}
   18180:	e1a04000 	mov	r4, r0
   18184:	e1a06002 	mov	r6, r2
   18188:	e2515000 	subs	r5, r1, #0
   1818c:	0a000026 	beq	1822c <CSoundBaseDevice::Dequeue(void*, unsigned int)+0xb0>
   18190:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   18194:	e3530000 	cmp	r3, #0
   18198:	0a00001c 	beq	18210 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x94>
   1819c:	e3560000 	cmp	r6, #0
   181a0:	0a000013 	beq	181f4 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x78>
   181a4:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   181a8:	e0852006 	add	r2, r5, r6
   181ac:	e3a00000 	mov	r0, #0
   181b0:	e594103c 	ldr	r1, [r4, #60]	; 0x3c
   181b4:	e7d13003 	ldrb	r3, [r1, r3]
   181b8:	e4c53001 	strb	r3, [r5], #1
   181bc:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   181c0:	e5941014 	ldr	r1, [r4, #20]
   181c4:	e2833001 	add	r3, r3, #1
   181c8:	e5843044 	str	r3, [r4, #68]	; 0x44
   181cc:	e1510003 	cmp	r1, r3
   181d0:	0a000002 	beq	181e0 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x64>
   181d4:	e1550002 	cmp	r5, r2
   181d8:	1afffff4 	bne	181b0 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x34>
   181dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   181e0:	e3a03000 	mov	r3, #0
   181e4:	e5840044 	str	r0, [r4, #68]	; 0x44
   181e8:	e1550002 	cmp	r5, r2
   181ec:	1affffef 	bne	181b0 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x34>
   181f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   181f4:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   181f8:	e3401001 	movt	r1, #1
   181fc:	e30b0d6c 	movw	r0, #48492	; 0xbd6c
   18200:	e3400001 	movt	r0, #1
   18204:	e3002192 	movw	r2, #402	; 0x192
   18208:	e8bd4070 	pop	{r4, r5, r6, lr}
   1820c:	eaffde1d 	b	fa88 <assertion_failed>
   18210:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   18214:	e3401001 	movt	r1, #1
   18218:	e30b0c18 	movw	r0, #48152	; 0xbc18
   1821c:	e3400001 	movt	r0, #1
   18220:	e3a02e19 	mov	r2, #400	; 0x190
   18224:	ebffde17 	bl	fa88 <assertion_failed>
   18228:	eaffffdb 	b	1819c <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x20>
   1822c:	e30b1b4c 	movw	r1, #47948	; 0xbb4c
   18230:	e3401001 	movt	r1, #1
   18234:	e30b0c10 	movw	r0, #48144	; 0xbc10
   18238:	e3400001 	movt	r0, #1
   1823c:	e300218f 	movw	r2, #399	; 0x18f
   18240:	ebffde10 	bl	fa88 <assertion_failed>
   18244:	eaffffd1 	b	18190 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x14>

00018248 <CPtrList::CPtrList()>:
   18248:	e3a02000 	mov	r2, #0
   1824c:	e5802000 	str	r2, [r0]
   18250:	e12fff1e 	bx	lr

00018254 <CPtrList::~CPtrList()>:
   18254:	e5903000 	ldr	r3, [r0]
   18258:	e92d4010 	push	{r4, lr}
   1825c:	e1a04000 	mov	r4, r0
   18260:	e3530000 	cmp	r3, #0
   18264:	0a000005 	beq	18280 <CPtrList::~CPtrList()+0x2c>
   18268:	e30b1d78 	movw	r1, #48504	; 0xbd78
   1826c:	e3401001 	movt	r1, #1
   18270:	e30b0d84 	movw	r0, #48516	; 0xbd84
   18274:	e3400001 	movt	r0, #1
   18278:	e3a0202a 	mov	r2, #42	; 0x2a
   1827c:	ebffde01 	bl	fa88 <assertion_failed>
   18280:	e1a00004 	mov	r0, r4
   18284:	e8bd8010 	pop	{r4, pc}

00018288 <CPtrList::GetFirst()>:
   18288:	e5900000 	ldr	r0, [r0]
   1828c:	e12fff1e 	bx	lr

00018290 <CPtrList::GetNext(TPtrListElement*)>:
   18290:	e92d4010 	push	{r4, lr}
   18294:	e2514000 	subs	r4, r1, #0
   18298:	0a00000c 	beq	182d0 <CPtrList::GetNext(TPtrListElement*)+0x40>
   1829c:	e5942000 	ldr	r2, [r4]
   182a0:	e3043d43 	movw	r3, #19779	; 0x4d43
   182a4:	e345304c 	movt	r3, #20556	; 0x504c
   182a8:	e1520003 	cmp	r2, r3
   182ac:	0a000005 	beq	182c8 <CPtrList::GetNext(TPtrListElement*)+0x38>
   182b0:	e30b1d78 	movw	r1, #48504	; 0xbd78
   182b4:	e3401001 	movt	r1, #1
   182b8:	e30b0da4 	movw	r0, #48548	; 0xbda4
   182bc:	e3400001 	movt	r0, #1
   182c0:	e3a02035 	mov	r2, #53	; 0x35
   182c4:	ebffddef 	bl	fa88 <assertion_failed>
   182c8:	e5940008 	ldr	r0, [r4, #8]
   182cc:	e8bd8010 	pop	{r4, pc}
   182d0:	e30b1d78 	movw	r1, #48504	; 0xbd78
   182d4:	e3401001 	movt	r1, #1
   182d8:	e30b0d94 	movw	r0, #48532	; 0xbd94
   182dc:	e3400001 	movt	r0, #1
   182e0:	e3a02034 	mov	r2, #52	; 0x34
   182e4:	ebffdde7 	bl	fa88 <assertion_failed>
   182e8:	eaffffeb 	b	1829c <CPtrList::GetNext(TPtrListElement*)+0xc>

000182ec <CPtrList::GetPtr(TPtrListElement*)>:
   182ec:	e92d4010 	push	{r4, lr}
   182f0:	e2514000 	subs	r4, r1, #0
   182f4:	0a00000c 	beq	1832c <CPtrList::GetPtr(TPtrListElement*)+0x40>
   182f8:	e5942000 	ldr	r2, [r4]
   182fc:	e3043d43 	movw	r3, #19779	; 0x4d43
   18300:	e345304c 	movt	r3, #20556	; 0x504c
   18304:	e1520003 	cmp	r2, r3
   18308:	0a000005 	beq	18324 <CPtrList::GetPtr(TPtrListElement*)+0x38>
   1830c:	e30b1d78 	movw	r1, #48504	; 0xbd78
   18310:	e3401001 	movt	r1, #1
   18314:	e30b0da4 	movw	r0, #48548	; 0xbda4
   18318:	e3400001 	movt	r0, #1
   1831c:	e3a0203d 	mov	r2, #61	; 0x3d
   18320:	ebffddd8 	bl	fa88 <assertion_failed>
   18324:	e594000c 	ldr	r0, [r4, #12]
   18328:	e8bd8010 	pop	{r4, pc}
   1832c:	e30b1d78 	movw	r1, #48504	; 0xbd78
   18330:	e3401001 	movt	r1, #1
   18334:	e30b0d94 	movw	r0, #48532	; 0xbd94
   18338:	e3400001 	movt	r0, #1
   1833c:	e3a0203c 	mov	r2, #60	; 0x3c
   18340:	ebffddd0 	bl	fa88 <assertion_failed>
   18344:	eaffffeb 	b	182f8 <CPtrList::GetPtr(TPtrListElement*)+0xc>

00018348 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   18348:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1834c:	e1a06000 	mov	r6, r0
   18350:	e3a00010 	mov	r0, #16
   18354:	e1a04001 	mov	r4, r1
   18358:	e1a07002 	mov	r7, r2
   1835c:	eb0000ff 	bl	18760 <operator new(unsigned int)>
   18360:	e5961000 	ldr	r1, [r6]
   18364:	e3043d43 	movw	r3, #19779	; 0x4d43
   18368:	e345304c 	movt	r3, #20556	; 0x504c
   1836c:	e1a05000 	mov	r5, r0
   18370:	e580700c 	str	r7, [r0, #12]
   18374:	e3510000 	cmp	r1, #0
   18378:	e5803000 	str	r3, [r0]
   1837c:	0a000030 	beq	18444 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
   18380:	e3540000 	cmp	r4, #0
   18384:	0a000027 	beq	18428 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   18388:	e5942000 	ldr	r2, [r4]
   1838c:	e3043d43 	movw	r3, #19779	; 0x4d43
   18390:	e345304c 	movt	r3, #20556	; 0x504c
   18394:	e1520003 	cmp	r2, r3
   18398:	0a000005 	beq	183b4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x6c>
   1839c:	e30b1d78 	movw	r1, #48504	; 0xbd78
   183a0:	e3401001 	movt	r1, #1
   183a4:	e30b0de4 	movw	r0, #48612	; 0xbde4
   183a8:	e3400001 	movt	r0, #1
   183ac:	e3a0204e 	mov	r2, #78	; 0x4e
   183b0:	ebffddb4 	bl	fa88 <assertion_failed>
   183b4:	e5963000 	ldr	r3, [r6]
   183b8:	e1530004 	cmp	r3, r4
   183bc:	0a000013 	beq	18410 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc8>
   183c0:	e5943004 	ldr	r3, [r4, #4]
   183c4:	e9850018 	stmib	r5, {r3, r4}
   183c8:	e3530000 	cmp	r3, #0
   183cc:	0a000005 	beq	183e8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   183d0:	e5931000 	ldr	r1, [r3]
   183d4:	e3042d43 	movw	r2, #19779	; 0x4d43
   183d8:	e345204c 	movt	r2, #20556	; 0x504c
   183dc:	e1510002 	cmp	r1, r2
   183e0:	1a000002 	bne	183f0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa8>
   183e4:	e5835008 	str	r5, [r3, #8]
   183e8:	e5845004 	str	r5, [r4, #4]
   183ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   183f0:	e30b1d78 	movw	r1, #48504	; 0xbd78
   183f4:	e3401001 	movt	r1, #1
   183f8:	e30b0e08 	movw	r0, #48648	; 0xbe08
   183fc:	e3400001 	movt	r0, #1
   18400:	e3a02060 	mov	r2, #96	; 0x60
   18404:	ebffdd9f 	bl	fa88 <assertion_failed>
   18408:	e5943004 	ldr	r3, [r4, #4]
   1840c:	eafffff4 	b	183e4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x9c>
   18410:	e5845004 	str	r5, [r4, #4]
   18414:	e3a03000 	mov	r3, #0
   18418:	e5854008 	str	r4, [r5, #8]
   1841c:	e5865000 	str	r5, [r6]
   18420:	e5853004 	str	r3, [r5, #4]
   18424:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18428:	e30b1d78 	movw	r1, #48504	; 0xbd78
   1842c:	e3401001 	movt	r1, #1
   18430:	e30b0dd8 	movw	r0, #48600	; 0xbdd8
   18434:	e3400001 	movt	r0, #1
   18438:	e3a0204d 	mov	r2, #77	; 0x4d
   1843c:	ebffdd91 	bl	fa88 <assertion_failed>
   18440:	eaffffd0 	b	18388 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x40>
   18444:	e30b1d78 	movw	r1, #48504	; 0xbd78
   18448:	e3401001 	movt	r1, #1
   1844c:	e30b0dc8 	movw	r0, #48584	; 0xbdc8
   18450:	e3400001 	movt	r0, #1
   18454:	e3a0204c 	mov	r2, #76	; 0x4c
   18458:	ebffdd8a 	bl	fa88 <assertion_failed>
   1845c:	eaffffc7 	b	18380 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x38>

00018460 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   18460:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18464:	e1a06000 	mov	r6, r0
   18468:	e1a05001 	mov	r5, r1
   1846c:	e3a00010 	mov	r0, #16
   18470:	e1a07002 	mov	r7, r2
   18474:	eb0000b9 	bl	18760 <operator new(unsigned int)>
   18478:	e3043d43 	movw	r3, #19779	; 0x4d43
   1847c:	e345304c 	movt	r3, #20556	; 0x504c
   18480:	e5803000 	str	r3, [r0]
   18484:	e1a04000 	mov	r4, r0
   18488:	e3550000 	cmp	r5, #0
   1848c:	e580700c 	str	r7, [r0, #12]
   18490:	e5963000 	ldr	r3, [r6]
   18494:	0a000021 	beq	18520 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xc0>
   18498:	e3530000 	cmp	r3, #0
   1849c:	0a00002c 	beq	18554 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf4>
   184a0:	e5952000 	ldr	r2, [r5]
   184a4:	e3043d43 	movw	r3, #19779	; 0x4d43
   184a8:	e345304c 	movt	r3, #20556	; 0x504c
   184ac:	e1520003 	cmp	r2, r3
   184b0:	1a000013 	bne	18504 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa4>
   184b4:	e5953008 	ldr	r3, [r5, #8]
   184b8:	e5845004 	str	r5, [r4, #4]
   184bc:	e5843008 	str	r3, [r4, #8]
   184c0:	e3530000 	cmp	r3, #0
   184c4:	0a00000c 	beq	184fc <CPtrList::InsertAfter(TPtrListElement*, void*)+0x9c>
   184c8:	e5931000 	ldr	r1, [r3]
   184cc:	e3042d43 	movw	r2, #19779	; 0x4d43
   184d0:	e345204c 	movt	r2, #20556	; 0x504c
   184d4:	e1510002 	cmp	r1, r2
   184d8:	0a000006 	beq	184f8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x98>
   184dc:	e30b1d78 	movw	r1, #48504	; 0xbd78
   184e0:	e3401001 	movt	r1, #1
   184e4:	e30b0e54 	movw	r0, #48724	; 0xbe54
   184e8:	e3400001 	movt	r0, #1
   184ec:	e3a02085 	mov	r2, #133	; 0x85
   184f0:	ebffdd64 	bl	fa88 <assertion_failed>
   184f4:	e5953008 	ldr	r3, [r5, #8]
   184f8:	e5834004 	str	r4, [r3, #4]
   184fc:	e5854008 	str	r4, [r5, #8]
   18500:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18504:	e30b1d78 	movw	r1, #48504	; 0xbd78
   18508:	e3401001 	movt	r1, #1
   1850c:	e30b0e30 	movw	r0, #48688	; 0xbe30
   18510:	e3400001 	movt	r0, #1
   18514:	e3a0207e 	mov	r2, #126	; 0x7e
   18518:	ebffdd5a 	bl	fa88 <assertion_failed>
   1851c:	eaffffe4 	b	184b4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x54>
   18520:	e3530000 	cmp	r3, #0
   18524:	0a000005 	beq	18540 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   18528:	e30b1d78 	movw	r1, #48504	; 0xbd78
   1852c:	e3401001 	movt	r1, #1
   18530:	e30b0d84 	movw	r0, #48516	; 0xbd84
   18534:	e3400001 	movt	r0, #1
   18538:	e3a02074 	mov	r2, #116	; 0x74
   1853c:	ebffdd51 	bl	fa88 <assertion_failed>
   18540:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   18544:	e2843004 	add	r3, r4, #4
   18548:	e5864000 	str	r4, [r6]
   1854c:	f443078f 	vst1.32	{d16}, [r3]
   18550:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18554:	e30b1d78 	movw	r1, #48504	; 0xbd78
   18558:	e3401001 	movt	r1, #1
   1855c:	e30b0dc8 	movw	r0, #48584	; 0xbdc8
   18560:	e3400001 	movt	r0, #1
   18564:	e3a0207d 	mov	r2, #125	; 0x7d
   18568:	ebffdd46 	bl	fa88 <assertion_failed>
   1856c:	eaffffcb 	b	184a0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x40>

00018570 <CPtrList::Remove(TPtrListElement*)>:
   18570:	e92d4070 	push	{r4, r5, r6, lr}
   18574:	e1a05000 	mov	r5, r0
   18578:	e2514000 	subs	r4, r1, #0
   1857c:	0a00004a 	beq	186ac <CPtrList::Remove(TPtrListElement*)+0x13c>
   18580:	e5942000 	ldr	r2, [r4]
   18584:	e3043d43 	movw	r3, #19779	; 0x4d43
   18588:	e345304c 	movt	r3, #20556	; 0x504c
   1858c:	e1520003 	cmp	r2, r3
   18590:	0a000005 	beq	185ac <CPtrList::Remove(TPtrListElement*)+0x3c>
   18594:	e30b1d78 	movw	r1, #48504	; 0xbd78
   18598:	e3401001 	movt	r1, #1
   1859c:	e30b0da4 	movw	r0, #48548	; 0xbda4
   185a0:	e3400001 	movt	r0, #1
   185a4:	e3a02090 	mov	r2, #144	; 0x90
   185a8:	ebffdd36 	bl	fa88 <assertion_failed>
   185ac:	e5953000 	ldr	r3, [r5]
   185b0:	e1530004 	cmp	r3, r4
   185b4:	0a000029 	beq	18660 <CPtrList::Remove(TPtrListElement*)+0xf0>
   185b8:	e5943004 	ldr	r3, [r4, #4]
   185bc:	e3530000 	cmp	r3, #0
   185c0:	0a000040 	beq	186c8 <CPtrList::Remove(TPtrListElement*)+0x158>
   185c4:	e5931000 	ldr	r1, [r3]
   185c8:	e3042d43 	movw	r2, #19779	; 0x4d43
   185cc:	e345204c 	movt	r2, #20556	; 0x504c
   185d0:	e1510002 	cmp	r1, r2
   185d4:	1a000010 	bne	1861c <CPtrList::Remove(TPtrListElement*)+0xac>
   185d8:	e5942008 	ldr	r2, [r4, #8]
   185dc:	e5832008 	str	r2, [r3, #8]
   185e0:	e5942008 	ldr	r2, [r4, #8]
   185e4:	e3520000 	cmp	r2, #0
   185e8:	0a000005 	beq	18604 <CPtrList::Remove(TPtrListElement*)+0x94>
   185ec:	e5920000 	ldr	r0, [r2]
   185f0:	e3041d43 	movw	r1, #19779	; 0x4d43
   185f4:	e345104c 	movt	r1, #20556	; 0x504c
   185f8:	e1500001 	cmp	r0, r1
   185fc:	1a00000e 	bne	1863c <CPtrList::Remove(TPtrListElement*)+0xcc>
   18600:	e5823004 	str	r3, [r2, #4]
   18604:	e3a03000 	mov	r3, #0
   18608:	e1a00004 	mov	r0, r4
   1860c:	e5843000 	str	r3, [r4]
   18610:	e3a01010 	mov	r1, #16
   18614:	e8bd4070 	pop	{r4, r5, r6, lr}
   18618:	ea000054 	b	18770 <operator delete(void*, unsigned int)>
   1861c:	e30b1d78 	movw	r1, #48504	; 0xbd78
   18620:	e3401001 	movt	r1, #1
   18624:	e30b0ec4 	movw	r0, #48836	; 0xbec4
   18628:	e3400001 	movt	r0, #1
   1862c:	e3a0209f 	mov	r2, #159	; 0x9f
   18630:	ebffdd14 	bl	fa88 <assertion_failed>
   18634:	e5943004 	ldr	r3, [r4, #4]
   18638:	eaffffe6 	b	185d8 <CPtrList::Remove(TPtrListElement*)+0x68>
   1863c:	e3a020a4 	mov	r2, #164	; 0xa4
   18640:	e30b1d78 	movw	r1, #48504	; 0xbd78
   18644:	e3401001 	movt	r1, #1
   18648:	e30b0e80 	movw	r0, #48768	; 0xbe80
   1864c:	e3400001 	movt	r0, #1
   18650:	ebffdd0c 	bl	fa88 <assertion_failed>
   18654:	e5942008 	ldr	r2, [r4, #8]
   18658:	e5943004 	ldr	r3, [r4, #4]
   1865c:	eaffffe7 	b	18600 <CPtrList::Remove(TPtrListElement*)+0x90>
   18660:	e5943008 	ldr	r3, [r4, #8]
   18664:	e5853000 	str	r3, [r5]
   18668:	e3530000 	cmp	r3, #0
   1866c:	0affffe4 	beq	18604 <CPtrList::Remove(TPtrListElement*)+0x94>
   18670:	e5931000 	ldr	r1, [r3]
   18674:	e3042d43 	movw	r2, #19779	; 0x4d43
   18678:	e345204c 	movt	r2, #20556	; 0x504c
   1867c:	e1510002 	cmp	r1, r2
   18680:	0a000006 	beq	186a0 <CPtrList::Remove(TPtrListElement*)+0x130>
   18684:	e30b1d78 	movw	r1, #48504	; 0xbd78
   18688:	e3401001 	movt	r1, #1
   1868c:	e30b0e80 	movw	r0, #48768	; 0xbe80
   18690:	e3400001 	movt	r0, #1
   18694:	e3a02098 	mov	r2, #152	; 0x98
   18698:	ebffdcfa 	bl	fa88 <assertion_failed>
   1869c:	e5943008 	ldr	r3, [r4, #8]
   186a0:	e3a02000 	mov	r2, #0
   186a4:	e5832004 	str	r2, [r3, #4]
   186a8:	eaffffd5 	b	18604 <CPtrList::Remove(TPtrListElement*)+0x94>
   186ac:	e30b1d78 	movw	r1, #48504	; 0xbd78
   186b0:	e3401001 	movt	r1, #1
   186b4:	e30b0d94 	movw	r0, #48532	; 0xbd94
   186b8:	e3400001 	movt	r0, #1
   186bc:	e3a0208f 	mov	r2, #143	; 0x8f
   186c0:	ebffdcf0 	bl	fa88 <assertion_failed>
   186c4:	eaffffad 	b	18580 <CPtrList::Remove(TPtrListElement*)+0x10>
   186c8:	e30b1d78 	movw	r1, #48504	; 0xbd78
   186cc:	e3401001 	movt	r1, #1
   186d0:	e30b0eac 	movw	r0, #48812	; 0xbeac
   186d4:	e3400001 	movt	r0, #1
   186d8:	e3a0209e 	mov	r2, #158	; 0x9e
   186dc:	ebffdce9 	bl	fa88 <assertion_failed>
   186e0:	e5943004 	ldr	r3, [r4, #4]
   186e4:	eaffffb6 	b	185c4 <CPtrList::Remove(TPtrListElement*)+0x54>

000186e8 <CPtrList::Find(void*)>:
   186e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   186ec:	e5904000 	ldr	r4, [r0]
   186f0:	e3540000 	cmp	r4, #0
   186f4:	0a000016 	beq	18754 <CPtrList::Find(void*)+0x6c>
   186f8:	e3048d43 	movw	r8, #19779	; 0x4d43
   186fc:	e345804c 	movt	r8, #20556	; 0x504c
   18700:	e30b7d78 	movw	r7, #48504	; 0xbd78
   18704:	e3407001 	movt	r7, #1
   18708:	e30b6da4 	movw	r6, #48548	; 0xbda4
   1870c:	e3406001 	movt	r6, #1
   18710:	e1a05001 	mov	r5, r1
   18714:	ea000002 	b	18724 <CPtrList::Find(void*)+0x3c>
   18718:	e5944008 	ldr	r4, [r4, #8]
   1871c:	e3540000 	cmp	r4, #0
   18720:	0a00000b 	beq	18754 <CPtrList::Find(void*)+0x6c>
   18724:	e5943000 	ldr	r3, [r4]
   18728:	e3a020b3 	mov	r2, #179	; 0xb3
   1872c:	e1a01007 	mov	r1, r7
   18730:	e1a00006 	mov	r0, r6
   18734:	e1530008 	cmp	r3, r8
   18738:	0a000000 	beq	18740 <CPtrList::Find(void*)+0x58>
   1873c:	ebffdcd1 	bl	fa88 <assertion_failed>
   18740:	e594300c 	ldr	r3, [r4, #12]
   18744:	e1530005 	cmp	r3, r5
   18748:	1afffff2 	bne	18718 <CPtrList::Find(void*)+0x30>
   1874c:	e1a00004 	mov	r0, r4
   18750:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18754:	e3a04000 	mov	r4, #0
   18758:	e1a00004 	mov	r0, r4
   1875c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00018760 <operator new(unsigned int)>:
   18760:	ea000022 	b	187f0 <malloc>

00018764 <operator new[](unsigned int)>:
   18764:	ea000021 	b	187f0 <malloc>

00018768 <operator delete(void*)>:
   18768:	ea000092 	b	189b8 <free>

0001876c <operator delete[](void*)>:
   1876c:	ea000091 	b	189b8 <free>

00018770 <operator delete(void*, unsigned int)>:
   18770:	ea000090 	b	189b8 <free>

00018774 <operator delete[](void*, unsigned int)>:
   18774:	ea00008f 	b	189b8 <free>

00018778 <__cxa_pure_virtual>:
   18778:	e30b1ef0 	movw	r1, #48880	; 0xbef0
   1877c:	e3401001 	movt	r1, #1
   18780:	e30b0b90 	movw	r0, #48016	; 0xbb90
   18784:	e3400001 	movt	r0, #1
   18788:	e3a02018 	mov	r2, #24
   1878c:	eaffdcbd 	b	fa88 <assertion_failed>

00018790 <mem_init>:
   18790:	e0801001 	add	r1, r0, r1
   18794:	e30c27f8 	movw	r2, #51192	; 0xc7f8
   18798:	e3402001 	movt	r2, #1
   1879c:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
   187a0:	e3500605 	cmp	r0, #5242880	; 0x500000
   187a4:	e2433a03 	sub	r3, r3, #12288	; 0x3000
   187a8:	33a00605 	movcc	r0, #5242880	; 0x500000
   187ac:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   187b0:	e582100c 	str	r1, [r2, #12]
   187b4:	e3c3300f 	bic	r3, r3, #15
   187b8:	e2411501 	sub	r1, r1, #4194304	; 0x400000
   187bc:	e5820000 	str	r0, [r2]
   187c0:	e982000a 	stmib	r2, {r1, r3}
   187c4:	e12fff1e 	bx	lr

000187c8 <mem_get_size>:
   187c8:	e30c37f8 	movw	r3, #51192	; 0xc7f8
   187cc:	e3403001 	movt	r3, #1
   187d0:	e5930004 	ldr	r0, [r3, #4]
   187d4:	e5931000 	ldr	r1, [r3]
   187d8:	e593200c 	ldr	r2, [r3, #12]
   187dc:	e5933008 	ldr	r3, [r3, #8]
   187e0:	e0400001 	sub	r0, r0, r1
   187e4:	e0423003 	sub	r3, r2, r3
   187e8:	e0800003 	add	r0, r0, r3
   187ec:	e12fff1e 	bx	lr

000187f0 <malloc>:
   187f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   187f4:	e30c77f8 	movw	r7, #51192	; 0xc7f8
   187f8:	e3407001 	movt	r7, #1
   187fc:	e1a06000 	mov	r6, r0
   18800:	e5973000 	ldr	r3, [r7]
   18804:	e3530000 	cmp	r3, #0
   18808:	0a000053 	beq	1895c <malloc+0x16c>
   1880c:	e5970010 	ldr	r0, [r7, #16]
   18810:	e3500000 	cmp	r0, #0
   18814:	1a000045 	bne	18930 <malloc+0x140>
   18818:	e30c26b4 	movw	r2, #50868	; 0xc6b4
   1881c:	e3402001 	movt	r2, #1
   18820:	e5923000 	ldr	r3, [r2]
   18824:	e3530000 	cmp	r3, #0
   18828:	0a000008 	beq	18850 <malloc+0x60>
   1882c:	e1a04002 	mov	r4, r2
   18830:	e1560003 	cmp	r6, r3
   18834:	8a000002 	bhi	18844 <malloc+0x54>
   18838:	ea00002c 	b	188f0 <malloc+0x100>
   1883c:	e1530006 	cmp	r3, r6
   18840:	2a00002a 	bcs	188f0 <malloc+0x100>
   18844:	e5b43008 	ldr	r3, [r4, #8]!
   18848:	e3530000 	cmp	r3, #0
   1884c:	1afffffa 	bne	1883c <malloc+0x4c>
   18850:	e5975000 	ldr	r5, [r7]
   18854:	e286301f 	add	r3, r6, #31
   18858:	e3c3300f 	bic	r3, r3, #15
   1885c:	e0853003 	add	r3, r5, r3
   18860:	e1550003 	cmp	r5, r3
   18864:	2a000043 	bcs	18978 <malloc+0x188>
   18868:	e5971004 	ldr	r1, [r7, #4]
   1886c:	e5920040 	ldr	r0, [r2, #64]	; 0x40
   18870:	e0411000 	sub	r1, r1, r0
   18874:	e1530001 	cmp	r3, r1
   18878:	8a00003e 	bhi	18978 <malloc+0x188>
   1887c:	e5873000 	str	r3, [r7]
   18880:	e3a0304d 	mov	r3, #77	; 0x4d
   18884:	e5c53001 	strb	r3, [r5, #1]
   18888:	e3a03042 	mov	r3, #66	; 0x42
   1888c:	e5c53003 	strb	r3, [r5, #3]
   18890:	e3a02043 	mov	r2, #67	; 0x43
   18894:	e5973010 	ldr	r3, [r7, #16]
   18898:	e5c52000 	strb	r2, [r5]
   1889c:	e3a0204c 	mov	r2, #76	; 0x4c
   188a0:	e5856004 	str	r6, [r5, #4]
   188a4:	e3530000 	cmp	r3, #0
   188a8:	e5c52002 	strb	r2, [r5, #2]
   188ac:	1a00001d 	bne	18928 <malloc+0x138>
   188b0:	e2854010 	add	r4, r5, #16
   188b4:	e3a03000 	mov	r3, #0
   188b8:	e314000f 	tst	r4, #15
   188bc:	e5c53008 	strb	r3, [r5, #8]
   188c0:	e5c53009 	strb	r3, [r5, #9]
   188c4:	e5c5300a 	strb	r3, [r5, #10]
   188c8:	e5c5300b 	strb	r3, [r5, #11]
   188cc:	0a000005 	beq	188e8 <malloc+0xf8>
   188d0:	e30b1f00 	movw	r1, #48896	; 0xbf00
   188d4:	e3401001 	movt	r1, #1
   188d8:	e30b0f5c 	movw	r0, #48988	; 0xbf5c
   188dc:	e3400001 	movt	r0, #1
   188e0:	e3a020b0 	mov	r2, #176	; 0xb0
   188e4:	ebffdc67 	bl	fa88 <assertion_failed>
   188e8:	e1a00004 	mov	r0, r4
   188ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   188f0:	e5945004 	ldr	r5, [r4, #4]
   188f4:	e3550000 	cmp	r5, #0
   188f8:	01a06003 	moveq	r6, r3
   188fc:	0affffd3 	beq	18850 <malloc+0x60>
   18900:	e5952000 	ldr	r2, [r5]
   18904:	e3043d43 	movw	r3, #19779	; 0x4d43
   18908:	e344324c 	movt	r3, #16972	; 0x424c
   1890c:	e1520003 	cmp	r2, r3
   18910:	1a000008 	bne	18938 <malloc+0x148>
   18914:	e5953008 	ldr	r3, [r5, #8]
   18918:	e5843004 	str	r3, [r4, #4]
   1891c:	e5973010 	ldr	r3, [r7, #16]
   18920:	e3530000 	cmp	r3, #0
   18924:	0affffe1 	beq	188b0 <malloc+0xc0>
   18928:	ebffcaf9 	bl	b514 <LeaveCritical>
   1892c:	eaffffdf 	b	188b0 <malloc+0xc0>
   18930:	ebffcaca 	bl	b460 <EnterCritical>
   18934:	eaffffb7 	b	18818 <malloc+0x28>
   18938:	e30b1f00 	movw	r1, #48896	; 0xbf00
   1893c:	e3401001 	movt	r1, #1
   18940:	e30b0f20 	movw	r0, #48928	; 0xbf20
   18944:	e3400001 	movt	r0, #1
   18948:	e3a02087 	mov	r2, #135	; 0x87
   1894c:	ebffdc4d 	bl	fa88 <assertion_failed>
   18950:	e5953008 	ldr	r3, [r5, #8]
   18954:	e5843004 	str	r3, [r4, #4]
   18958:	eaffffef 	b	1891c <malloc+0x12c>
   1895c:	e30b1f00 	movw	r1, #48896	; 0xbf00
   18960:	e3401001 	movt	r1, #1
   18964:	e30b0f0c 	movw	r0, #48908	; 0xbf0c
   18968:	e3400001 	movt	r0, #1
   1896c:	e3a0206d 	mov	r2, #109	; 0x6d
   18970:	ebffdc44 	bl	fa88 <assertion_failed>
   18974:	eaffffa4 	b	1880c <malloc+0x1c>
   18978:	e5973010 	ldr	r3, [r7, #16]
   1897c:	e3a01000 	mov	r1, #0
   18980:	e5821040 	str	r1, [r2, #64]	; 0x40
   18984:	e1530001 	cmp	r3, r1
   18988:	0a000000 	beq	18990 <malloc+0x1a0>
   1898c:	ebffcae0 	bl	b514 <LeaveCritical>
   18990:	ebffde98 	bl	103f8 <CLogger::Get()>
   18994:	e3a02000 	mov	r2, #0
   18998:	e1a04002 	mov	r4, r2
   1899c:	e30b3f44 	movw	r3, #48964	; 0xbf44
   189a0:	e3403001 	movt	r3, #1
   189a4:	e30b1f54 	movw	r1, #48980	; 0xbf54
   189a8:	e3401001 	movt	r1, #1
   189ac:	ebffe01c 	bl	10a24 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   189b0:	e1a00004 	mov	r0, r4
   189b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000189b8 <free>:
   189b8:	e92d4070 	push	{r4, r5, r6, lr}
   189bc:	e2505000 	subs	r5, r0, #0
   189c0:	08bd8070 	popeq	{r4, r5, r6, pc}
   189c4:	e5352010 	ldr	r2, [r5, #-16]!
   189c8:	e3043d43 	movw	r3, #19779	; 0x4d43
   189cc:	e344324c 	movt	r3, #16972	; 0x424c
   189d0:	e1520003 	cmp	r2, r3
   189d4:	1a000015 	bne	18a30 <free+0x78>
   189d8:	e30c46b4 	movw	r4, #50868	; 0xc6b4
   189dc:	e3404001 	movt	r4, #1
   189e0:	e5943000 	ldr	r3, [r4]
   189e4:	e3530000 	cmp	r3, #0
   189e8:	08bd8070 	popeq	{r4, r5, r6, pc}
   189ec:	e5952004 	ldr	r2, [r5, #4]
   189f0:	e1530002 	cmp	r3, r2
   189f4:	0a000004 	beq	18a0c <free+0x54>
   189f8:	e5b43008 	ldr	r3, [r4, #8]!
   189fc:	e3530000 	cmp	r3, #0
   18a00:	08bd8070 	popeq	{r4, r5, r6, pc}
   18a04:	e1530002 	cmp	r3, r2
   18a08:	1afffffa 	bne	189f8 <free+0x40>
   18a0c:	e30c67f8 	movw	r6, #51192	; 0xc7f8
   18a10:	e3406001 	movt	r6, #1
   18a14:	e5960010 	ldr	r0, [r6, #16]
   18a18:	e3500000 	cmp	r0, #0
   18a1c:	1a00000a 	bne	18a4c <free+0x94>
   18a20:	e5943004 	ldr	r3, [r4, #4]
   18a24:	e5853008 	str	r3, [r5, #8]
   18a28:	e5845004 	str	r5, [r4, #4]
   18a2c:	e8bd8070 	pop	{r4, r5, r6, pc}
   18a30:	e30b1f00 	movw	r1, #48896	; 0xbf00
   18a34:	e3401001 	movt	r1, #1
   18a38:	e30b0f20 	movw	r0, #48928	; 0xbf20
   18a3c:	e3400001 	movt	r0, #1
   18a40:	e3a020bd 	mov	r2, #189	; 0xbd
   18a44:	ebffdc0f 	bl	fa88 <assertion_failed>
   18a48:	eaffffe2 	b	189d8 <free+0x20>
   18a4c:	ebffca83 	bl	b460 <EnterCritical>
   18a50:	e5962010 	ldr	r2, [r6, #16]
   18a54:	e5943004 	ldr	r3, [r4, #4]
   18a58:	e3520000 	cmp	r2, #0
   18a5c:	e5853008 	str	r3, [r5, #8]
   18a60:	e5845004 	str	r5, [r4, #4]
   18a64:	08bd8070 	popeq	{r4, r5, r6, pc}
   18a68:	e8bd4070 	pop	{r4, r5, r6, lr}
   18a6c:	eaffcaa8 	b	b514 <LeaveCritical>

00018a70 <calloc>:
   18a70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18a74:	e0050190 	mul	r5, r0, r1
   18a78:	e1500005 	cmp	r0, r5
   18a7c:	8a000054 	bhi	18bd4 <calloc+0x164>
   18a80:	e3550000 	cmp	r5, #0
   18a84:	01a04005 	moveq	r4, r5
   18a88:	0a000040 	beq	18b90 <calloc+0x120>
   18a8c:	e30c77f8 	movw	r7, #51192	; 0xc7f8
   18a90:	e3407001 	movt	r7, #1
   18a94:	e5973000 	ldr	r3, [r7]
   18a98:	e3530000 	cmp	r3, #0
   18a9c:	0a00005e 	beq	18c1c <calloc+0x1ac>
   18aa0:	e5970010 	ldr	r0, [r7, #16]
   18aa4:	e3500000 	cmp	r0, #0
   18aa8:	1a000050 	bne	18bf0 <calloc+0x180>
   18aac:	e30c16b4 	movw	r1, #50868	; 0xc6b4
   18ab0:	e3401001 	movt	r1, #1
   18ab4:	e5913000 	ldr	r3, [r1]
   18ab8:	e3530000 	cmp	r3, #0
   18abc:	0a000008 	beq	18ae4 <calloc+0x74>
   18ac0:	e1a04001 	mov	r4, r1
   18ac4:	e1550003 	cmp	r5, r3
   18ac8:	8a000002 	bhi	18ad8 <calloc+0x68>
   18acc:	ea000031 	b	18b98 <calloc+0x128>
   18ad0:	e1550003 	cmp	r5, r3
   18ad4:	9a00002f 	bls	18b98 <calloc+0x128>
   18ad8:	e5b43008 	ldr	r3, [r4, #8]!
   18adc:	e3530000 	cmp	r3, #0
   18ae0:	1afffffa 	bne	18ad0 <calloc+0x60>
   18ae4:	e1a03005 	mov	r3, r5
   18ae8:	e5976000 	ldr	r6, [r7]
   18aec:	e283201f 	add	r2, r3, #31
   18af0:	e3c2200f 	bic	r2, r2, #15
   18af4:	e0862002 	add	r2, r6, r2
   18af8:	e1560002 	cmp	r6, r2
   18afc:	2a00004d 	bcs	18c38 <calloc+0x1c8>
   18b00:	e5970004 	ldr	r0, [r7, #4]
   18b04:	e591c040 	ldr	ip, [r1, #64]	; 0x40
   18b08:	e040000c 	sub	r0, r0, ip
   18b0c:	e1520000 	cmp	r2, r0
   18b10:	8a000048 	bhi	18c38 <calloc+0x1c8>
   18b14:	e5863004 	str	r3, [r6, #4]
   18b18:	e3a0304d 	mov	r3, #77	; 0x4d
   18b1c:	e5c63001 	strb	r3, [r6, #1]
   18b20:	e3a03042 	mov	r3, #66	; 0x42
   18b24:	e5c63003 	strb	r3, [r6, #3]
   18b28:	e5973010 	ldr	r3, [r7, #16]
   18b2c:	e5872000 	str	r2, [r7]
   18b30:	e3a02043 	mov	r2, #67	; 0x43
   18b34:	e3530000 	cmp	r3, #0
   18b38:	e5c62000 	strb	r2, [r6]
   18b3c:	e3a0204c 	mov	r2, #76	; 0x4c
   18b40:	e5c62002 	strb	r2, [r6, #2]
   18b44:	1a000020 	bne	18bcc <calloc+0x15c>
   18b48:	e2864010 	add	r4, r6, #16
   18b4c:	e3a03000 	mov	r3, #0
   18b50:	e314000f 	tst	r4, #15
   18b54:	e5c63008 	strb	r3, [r6, #8]
   18b58:	e5c63009 	strb	r3, [r6, #9]
   18b5c:	e5c6300a 	strb	r3, [r6, #10]
   18b60:	e5c6300b 	strb	r3, [r6, #11]
   18b64:	0a000005 	beq	18b80 <calloc+0x110>
   18b68:	e30b1f00 	movw	r1, #48896	; 0xbf00
   18b6c:	e3401001 	movt	r1, #1
   18b70:	e30b0f5c 	movw	r0, #48988	; 0xbf5c
   18b74:	e3400001 	movt	r0, #1
   18b78:	e3a020b0 	mov	r2, #176	; 0xb0
   18b7c:	ebffdbc1 	bl	fa88 <assertion_failed>
   18b80:	e1a02005 	mov	r2, r5
   18b84:	e3a01000 	mov	r1, #0
   18b88:	e1a00004 	mov	r0, r4
   18b8c:	ebffcecd 	bl	c6c8 <memset>
   18b90:	e1a00004 	mov	r0, r4
   18b94:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18b98:	e5946004 	ldr	r6, [r4, #4]
   18b9c:	e3560000 	cmp	r6, #0
   18ba0:	0affffd0 	beq	18ae8 <calloc+0x78>
   18ba4:	e5962000 	ldr	r2, [r6]
   18ba8:	e3043d43 	movw	r3, #19779	; 0x4d43
   18bac:	e344324c 	movt	r3, #16972	; 0x424c
   18bb0:	e1520003 	cmp	r2, r3
   18bb4:	1a00000f 	bne	18bf8 <calloc+0x188>
   18bb8:	e5963008 	ldr	r3, [r6, #8]
   18bbc:	e5843004 	str	r3, [r4, #4]
   18bc0:	e5973010 	ldr	r3, [r7, #16]
   18bc4:	e3530000 	cmp	r3, #0
   18bc8:	0affffde 	beq	18b48 <calloc+0xd8>
   18bcc:	ebffca50 	bl	b514 <LeaveCritical>
   18bd0:	eaffffdc 	b	18b48 <calloc+0xd8>
   18bd4:	e30b1f00 	movw	r1, #48896	; 0xbf00
   18bd8:	e3401001 	movt	r1, #1
   18bdc:	e30b0f88 	movw	r0, #49032	; 0xbf88
   18be0:	e3400001 	movt	r0, #1
   18be4:	e3a020db 	mov	r2, #219	; 0xdb
   18be8:	ebffdba6 	bl	fa88 <assertion_failed>
   18bec:	eaffffa3 	b	18a80 <calloc+0x10>
   18bf0:	ebffca1a 	bl	b460 <EnterCritical>
   18bf4:	eaffffac 	b	18aac <calloc+0x3c>
   18bf8:	e30b1f00 	movw	r1, #48896	; 0xbf00
   18bfc:	e3401001 	movt	r1, #1
   18c00:	e30b0f20 	movw	r0, #48928	; 0xbf20
   18c04:	e3400001 	movt	r0, #1
   18c08:	e3a02087 	mov	r2, #135	; 0x87
   18c0c:	ebffdb9d 	bl	fa88 <assertion_failed>
   18c10:	e5963008 	ldr	r3, [r6, #8]
   18c14:	e5843004 	str	r3, [r4, #4]
   18c18:	eaffffe8 	b	18bc0 <calloc+0x150>
   18c1c:	e30b1f00 	movw	r1, #48896	; 0xbf00
   18c20:	e3401001 	movt	r1, #1
   18c24:	e30b0f0c 	movw	r0, #48908	; 0xbf0c
   18c28:	e3400001 	movt	r0, #1
   18c2c:	e3a0206d 	mov	r2, #109	; 0x6d
   18c30:	ebffdb94 	bl	fa88 <assertion_failed>
   18c34:	eaffff99 	b	18aa0 <calloc+0x30>
   18c38:	e5973010 	ldr	r3, [r7, #16]
   18c3c:	e3a02000 	mov	r2, #0
   18c40:	e5812040 	str	r2, [r1, #64]	; 0x40
   18c44:	e1530002 	cmp	r3, r2
   18c48:	0a000000 	beq	18c50 <calloc+0x1e0>
   18c4c:	ebffca30 	bl	b514 <LeaveCritical>
   18c50:	ebffdde8 	bl	103f8 <CLogger::Get()>
   18c54:	e3a02000 	mov	r2, #0
   18c58:	e30b3f44 	movw	r3, #48964	; 0xbf44
   18c5c:	e3403001 	movt	r3, #1
   18c60:	e30b1f54 	movw	r1, #48980	; 0xbf54
   18c64:	e3401001 	movt	r1, #1
   18c68:	e1a04002 	mov	r4, r2
   18c6c:	ebffdf6c 	bl	10a24 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18c70:	eaffffc6 	b	18b90 <calloc+0x120>

00018c74 <realloc>:
   18c74:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18c78:	e1a04001 	mov	r4, r1
   18c7c:	e2506000 	subs	r6, r0, #0
   18c80:	0a000039 	beq	18d6c <realloc+0xf8>
   18c84:	e1a05006 	mov	r5, r6
   18c88:	e3043d43 	movw	r3, #19779	; 0x4d43
   18c8c:	e344324c 	movt	r3, #16972	; 0x424c
   18c90:	e3510000 	cmp	r1, #0
   18c94:	e5352010 	ldr	r2, [r5, #-16]!
   18c98:	0a000054 	beq	18df0 <realloc+0x17c>
   18c9c:	e1520003 	cmp	r2, r3
   18ca0:	1a000004 	bne	18cb8 <realloc+0x44>
   18ca4:	e5953004 	ldr	r3, [r5, #4]
   18ca8:	e1530004 	cmp	r3, r4
   18cac:	3a00000a 	bcc	18cdc <realloc+0x68>
   18cb0:	e1a00006 	mov	r0, r6
   18cb4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18cb8:	e30b1f00 	movw	r1, #48896	; 0xbf00
   18cbc:	e3401001 	movt	r1, #1
   18cc0:	e30b0f20 	movw	r0, #48928	; 0xbf20
   18cc4:	e3400001 	movt	r0, #1
   18cc8:	e3a020f9 	mov	r2, #249	; 0xf9
   18ccc:	ebffdb6d 	bl	fa88 <assertion_failed>
   18cd0:	e5953004 	ldr	r3, [r5, #4]
   18cd4:	e1530004 	cmp	r3, r4
   18cd8:	2afffff4 	bcs	18cb0 <realloc+0x3c>
   18cdc:	e1a00004 	mov	r0, r4
   18ce0:	ebfffec2 	bl	187f0 <malloc>
   18ce4:	e2507000 	subs	r7, r0, #0
   18ce8:	0a000034 	beq	18dc0 <realloc+0x14c>
   18cec:	e5952004 	ldr	r2, [r5, #4]
   18cf0:	e1a01006 	mov	r1, r6
   18cf4:	ebffd034 	bl	cdcc <memcpy>
   18cf8:	e5952000 	ldr	r2, [r5]
   18cfc:	e3043d43 	movw	r3, #19779	; 0x4d43
   18d00:	e344324c 	movt	r3, #16972	; 0x424c
   18d04:	e1520003 	cmp	r2, r3
   18d08:	1a000010 	bne	18d50 <realloc+0xdc>
   18d0c:	e30c46b4 	movw	r4, #50868	; 0xc6b4
   18d10:	e3404001 	movt	r4, #1
   18d14:	e5943000 	ldr	r3, [r4]
   18d18:	e3530000 	cmp	r3, #0
   18d1c:	0a000008 	beq	18d44 <realloc+0xd0>
   18d20:	e5952004 	ldr	r2, [r5, #4]
   18d24:	e1530002 	cmp	r3, r2
   18d28:	1a000002 	bne	18d38 <realloc+0xc4>
   18d2c:	ea000011 	b	18d78 <realloc+0x104>
   18d30:	e1530002 	cmp	r3, r2
   18d34:	0a00000f 	beq	18d78 <realloc+0x104>
   18d38:	e5b43008 	ldr	r3, [r4, #8]!
   18d3c:	e3530000 	cmp	r3, #0
   18d40:	1afffffa 	bne	18d30 <realloc+0xbc>
   18d44:	e1a06007 	mov	r6, r7
   18d48:	e1a00006 	mov	r0, r6
   18d4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18d50:	e30b1f00 	movw	r1, #48896	; 0xbf00
   18d54:	e3401001 	movt	r1, #1
   18d58:	e30b0f20 	movw	r0, #48928	; 0xbf20
   18d5c:	e3400001 	movt	r0, #1
   18d60:	e3a020bd 	mov	r2, #189	; 0xbd
   18d64:	ebffdb47 	bl	fa88 <assertion_failed>
   18d68:	eaffffe7 	b	18d0c <realloc+0x98>
   18d6c:	e1a00001 	mov	r0, r1
   18d70:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   18d74:	eafffe9d 	b	187f0 <malloc>
   18d78:	e30c67f8 	movw	r6, #51192	; 0xc7f8
   18d7c:	e3406001 	movt	r6, #1
   18d80:	e5960010 	ldr	r0, [r6, #16]
   18d84:	e3500000 	cmp	r0, #0
   18d88:	1a00000e 	bne	18dc8 <realloc+0x154>
   18d8c:	e5943004 	ldr	r3, [r4, #4]
   18d90:	e1a06007 	mov	r6, r7
   18d94:	e5853008 	str	r3, [r5, #8]
   18d98:	e5845004 	str	r5, [r4, #4]
   18d9c:	eaffffc3 	b	18cb0 <realloc+0x3c>
   18da0:	ebffc9ae 	bl	b460 <EnterCritical>
   18da4:	e5962010 	ldr	r2, [r6, #16]
   18da8:	e5943004 	ldr	r3, [r4, #4]
   18dac:	e5853008 	str	r3, [r5, #8]
   18db0:	e3520000 	cmp	r2, #0
   18db4:	e5845004 	str	r5, [r4, #4]
   18db8:	0a000000 	beq	18dc0 <realloc+0x14c>
   18dbc:	ebffc9d4 	bl	b514 <LeaveCritical>
   18dc0:	e3a06000 	mov	r6, #0
   18dc4:	eaffffb9 	b	18cb0 <realloc+0x3c>
   18dc8:	ebffc9a4 	bl	b460 <EnterCritical>
   18dcc:	e5962010 	ldr	r2, [r6, #16]
   18dd0:	e5943004 	ldr	r3, [r4, #4]
   18dd4:	e5853008 	str	r3, [r5, #8]
   18dd8:	e3520000 	cmp	r2, #0
   18ddc:	e5845004 	str	r5, [r4, #4]
   18de0:	0affffd7 	beq	18d44 <realloc+0xd0>
   18de4:	ebffc9ca 	bl	b514 <LeaveCritical>
   18de8:	e1a06007 	mov	r6, r7
   18dec:	eaffffaf 	b	18cb0 <realloc+0x3c>
   18df0:	e1520003 	cmp	r2, r3
   18df4:	0a000005 	beq	18e10 <realloc+0x19c>
   18df8:	e30b1f00 	movw	r1, #48896	; 0xbf00
   18dfc:	e3401001 	movt	r1, #1
   18e00:	e30b0f20 	movw	r0, #48928	; 0xbf20
   18e04:	e3400001 	movt	r0, #1
   18e08:	e3a020bd 	mov	r2, #189	; 0xbd
   18e0c:	ebffdb1d 	bl	fa88 <assertion_failed>
   18e10:	e30c46b4 	movw	r4, #50868	; 0xc6b4
   18e14:	e3404001 	movt	r4, #1
   18e18:	e5943000 	ldr	r3, [r4]
   18e1c:	e3530000 	cmp	r3, #0
   18e20:	0affffe6 	beq	18dc0 <realloc+0x14c>
   18e24:	e5952004 	ldr	r2, [r5, #4]
   18e28:	e1520003 	cmp	r2, r3
   18e2c:	1a000002 	bne	18e3c <realloc+0x1c8>
   18e30:	ea000005 	b	18e4c <realloc+0x1d8>
   18e34:	e1530002 	cmp	r3, r2
   18e38:	0a000003 	beq	18e4c <realloc+0x1d8>
   18e3c:	e5b43008 	ldr	r3, [r4, #8]!
   18e40:	e3530000 	cmp	r3, #0
   18e44:	1afffffa 	bne	18e34 <realloc+0x1c0>
   18e48:	eaffffdc 	b	18dc0 <realloc+0x14c>
   18e4c:	e30c67f8 	movw	r6, #51192	; 0xc7f8
   18e50:	e3406001 	movt	r6, #1
   18e54:	e5960010 	ldr	r0, [r6, #16]
   18e58:	e3500000 	cmp	r0, #0
   18e5c:	1affffcf 	bne	18da0 <realloc+0x12c>
   18e60:	e5943004 	ldr	r3, [r4, #4]
   18e64:	e5853008 	str	r3, [r5, #8]
   18e68:	e5845004 	str	r5, [r4, #4]
   18e6c:	eaffffd3 	b	18dc0 <realloc+0x14c>

00018e70 <palloc>:
   18e70:	e92d4070 	push	{r4, r5, r6, lr}
   18e74:	e30c47f8 	movw	r4, #51192	; 0xc7f8
   18e78:	e3404001 	movt	r4, #1
   18e7c:	e5943008 	ldr	r3, [r4, #8]
   18e80:	e3530000 	cmp	r3, #0
   18e84:	0a00002c 	beq	18f3c <palloc+0xcc>
   18e88:	e5940014 	ldr	r0, [r4, #20]
   18e8c:	e3500000 	cmp	r0, #0
   18e90:	1a000018 	bne	18ef8 <palloc+0x88>
   18e94:	e5945018 	ldr	r5, [r4, #24]
   18e98:	e3550000 	cmp	r5, #0
   18e9c:	0a000019 	beq	18f08 <palloc+0x98>
   18ea0:	e5952000 	ldr	r2, [r5]
   18ea4:	e3043d43 	movw	r3, #19779	; 0x4d43
   18ea8:	e3453047 	movt	r3, #20551	; 0x5047
   18eac:	e1520003 	cmp	r2, r3
   18eb0:	1a000009 	bne	18edc <palloc+0x6c>
   18eb4:	e5953004 	ldr	r3, [r5, #4]
   18eb8:	e3a02000 	mov	r2, #0
   18ebc:	e5843018 	str	r3, [r4, #24]
   18ec0:	e5943014 	ldr	r3, [r4, #20]
   18ec4:	e5852000 	str	r2, [r5]
   18ec8:	e3530000 	cmp	r3, #0
   18ecc:	0a000000 	beq	18ed4 <palloc+0x64>
   18ed0:	ebffc98f 	bl	b514 <LeaveCritical>
   18ed4:	e1a00005 	mov	r0, r5
   18ed8:	e8bd8070 	pop	{r4, r5, r6, pc}
   18edc:	e30b1f00 	movw	r1, #48896	; 0xbf00
   18ee0:	e3401001 	movt	r1, #1
   18ee4:	e30b0fb0 	movw	r0, #49072	; 0xbfb0
   18ee8:	e3400001 	movt	r0, #1
   18eec:	e3a02f47 	mov	r2, #284	; 0x11c
   18ef0:	ebffdae4 	bl	fa88 <assertion_failed>
   18ef4:	eaffffee 	b	18eb4 <palloc+0x44>
   18ef8:	ebffc958 	bl	b460 <EnterCritical>
   18efc:	e5945018 	ldr	r5, [r4, #24]
   18f00:	e3550000 	cmp	r5, #0
   18f04:	1affffe5 	bne	18ea0 <palloc+0x30>
   18f08:	e5945008 	ldr	r5, [r4, #8]
   18f0c:	e594100c 	ldr	r1, [r4, #12]
   18f10:	e2852a01 	add	r2, r5, #4096	; 0x1000
   18f14:	e5943014 	ldr	r3, [r4, #20]
   18f18:	e5842008 	str	r2, [r4, #8]
   18f1c:	e1520001 	cmp	r2, r1
   18f20:	9affffe8 	bls	18ec8 <palloc+0x58>
   18f24:	e3530000 	cmp	r3, #0
   18f28:	01a05003 	moveq	r5, r3
   18f2c:	0affffe8 	beq	18ed4 <palloc+0x64>
   18f30:	ebffc977 	bl	b514 <LeaveCritical>
   18f34:	e3a05000 	mov	r5, #0
   18f38:	eaffffe5 	b	18ed4 <palloc+0x64>
   18f3c:	e30b1f00 	movw	r1, #48896	; 0xbf00
   18f40:	e3401001 	movt	r1, #1
   18f44:	e30b0f9c 	movw	r0, #49052	; 0xbf9c
   18f48:	e3400001 	movt	r0, #1
   18f4c:	e300210e 	movw	r2, #270	; 0x10e
   18f50:	ebffdacc 	bl	fa88 <assertion_failed>
   18f54:	eaffffcb 	b	18e88 <palloc+0x18>

00018f58 <pfree>:
   18f58:	e92d4070 	push	{r4, r5, r6, lr}
   18f5c:	e2505000 	subs	r5, r0, #0
   18f60:	08bd8070 	popeq	{r4, r5, r6, pc}
   18f64:	e30c47f8 	movw	r4, #51192	; 0xc7f8
   18f68:	e3404001 	movt	r4, #1
   18f6c:	e5940014 	ldr	r0, [r4, #20]
   18f70:	e3500000 	cmp	r0, #0
   18f74:	1a000006 	bne	18f94 <pfree+0x3c>
   18f78:	e5941018 	ldr	r1, [r4, #24]
   18f7c:	e3042d43 	movw	r2, #19779	; 0x4d43
   18f80:	e3452047 	movt	r2, #20551	; 0x5047
   18f84:	e5852000 	str	r2, [r5]
   18f88:	e5851004 	str	r1, [r5, #4]
   18f8c:	e5845018 	str	r5, [r4, #24]
   18f90:	e8bd8070 	pop	{r4, r5, r6, pc}
   18f94:	ebffc931 	bl	b460 <EnterCritical>
   18f98:	e5941014 	ldr	r1, [r4, #20]
   18f9c:	e5942018 	ldr	r2, [r4, #24]
   18fa0:	e3043d43 	movw	r3, #19779	; 0x4d43
   18fa4:	e3453047 	movt	r3, #20551	; 0x5047
   18fa8:	e5853000 	str	r3, [r5]
   18fac:	e3510000 	cmp	r1, #0
   18fb0:	e5852004 	str	r2, [r5, #4]
   18fb4:	e5845018 	str	r5, [r4, #24]
   18fb8:	08bd8070 	popeq	{r4, r5, r6, pc}
   18fbc:	e8bd4070 	pop	{r4, r5, r6, lr}
   18fc0:	eaffc953 	b	b514 <LeaveCritical>

00018fc4 <_GLOBAL__sub_I_mem_init>:
   18fc4:	e30c37f8 	movw	r3, #51192	; 0xc7f8
   18fc8:	e3403001 	movt	r3, #1
   18fcc:	e3a02001 	mov	r2, #1
   18fd0:	e5832010 	str	r2, [r3, #16]
   18fd4:	e5832014 	str	r2, [r3, #20]
   18fd8:	e12fff1e 	bx	lr

00018fdc <CBcmMailBox::CBcmMailBox(unsigned int)>:
   18fdc:	e5801000 	str	r1, [r0]
   18fe0:	e12fff1e 	bx	lr

00018fe4 <CBcmMailBox::~CBcmMailBox()>:
   18fe4:	e12fff1e 	bx	lr

00018fe8 <CBcmMailBox::WriteRead(unsigned int)>:
   18fe8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18fec:	e30c5814 	movw	r5, #51220	; 0xc814
   18ff0:	e3405001 	movt	r5, #1
   18ff4:	e1a07000 	mov	r7, r0
   18ff8:	e1a06001 	mov	r6, r1
   18ffc:	e5950000 	ldr	r0, [r5]
   19000:	e3500000 	cmp	r0, #0
   19004:	1a00002c 	bne	190bc <CBcmMailBox::WriteRead(unsigned int)+0xd4>
   19008:	e3a04a0b 	mov	r4, #45056	; 0xb000
   1900c:	e3434f00 	movt	r4, #16128	; 0x3f00
   19010:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   19014:	e3130101 	tst	r3, #1073741824	; 0x40000000
   19018:	1a000005 	bne	19034 <CBcmMailBox::WriteRead(unsigned int)+0x4c>
   1901c:	e3a00014 	mov	r0, #20
   19020:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   19024:	ebffcd4b 	bl	c558 <CTimer::SimpleMsDelay(unsigned int)>
   19028:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   1902c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   19030:	0afffff9 	beq	1901c <CBcmMailBox::WriteRead(unsigned int)+0x34>
   19034:	e3a02a0b 	mov	r2, #45056	; 0xb000
   19038:	e3432f00 	movt	r2, #16128	; 0x3f00
   1903c:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   19040:	e3530000 	cmp	r3, #0
   19044:	bafffffc 	blt	1903c <CBcmMailBox::WriteRead(unsigned int)+0x54>
   19048:	e316000f 	tst	r6, #15
   1904c:	0a000005 	beq	19068 <CBcmMailBox::WriteRead(unsigned int)+0x80>
   19050:	e30b1fd4 	movw	r1, #49108	; 0xbfd4
   19054:	e3401001 	movt	r1, #1
   19058:	e30b0fe4 	movw	r0, #49124	; 0xbfe4
   1905c:	e3400001 	movt	r0, #1
   19060:	e3a0205b 	mov	r2, #91	; 0x5b
   19064:	ebffda87 	bl	fa88 <assertion_failed>
   19068:	e3a03a0b 	mov	r3, #45056	; 0xb000
   1906c:	e3433f00 	movt	r3, #16128	; 0x3f00
   19070:	e5971000 	ldr	r1, [r7]
   19074:	e1a02003 	mov	r2, r3
   19078:	e1866001 	orr	r6, r6, r1
   1907c:	e58368a0 	str	r6, [r3, #2208]	; 0x8a0
   19080:	e5971000 	ldr	r1, [r7]
   19084:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   19088:	e3130101 	tst	r3, #1073741824	; 0x40000000
   1908c:	1afffffc 	bne	19084 <CBcmMailBox::WriteRead(unsigned int)+0x9c>
   19090:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   19094:	e200300f 	and	r3, r0, #15
   19098:	e1530001 	cmp	r3, r1
   1909c:	1afffff8 	bne	19084 <CBcmMailBox::WriteRead(unsigned int)+0x9c>
   190a0:	e5953000 	ldr	r3, [r5]
   190a4:	e3c0400f 	bic	r4, r0, #15
   190a8:	e3530000 	cmp	r3, #0
   190ac:	0a000000 	beq	190b4 <CBcmMailBox::WriteRead(unsigned int)+0xcc>
   190b0:	ebffc917 	bl	b514 <LeaveCritical>
   190b4:	e1a00004 	mov	r0, r4
   190b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   190bc:	ebffc8e7 	bl	b460 <EnterCritical>
   190c0:	eaffffd0 	b	19008 <CBcmMailBox::WriteRead(unsigned int)+0x20>

000190c4 <CBcmMailBox::Flush()>:
   190c4:	e92d4010 	push	{r4, lr}
   190c8:	e3a04a0b 	mov	r4, #45056	; 0xb000
   190cc:	e3434f00 	movt	r4, #16128	; 0x3f00
   190d0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   190d4:	e3130101 	tst	r3, #1073741824	; 0x40000000
   190d8:	18bd8010 	popne	{r4, pc}
   190dc:	e3a00014 	mov	r0, #20
   190e0:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   190e4:	ebffcd1b 	bl	c558 <CTimer::SimpleMsDelay(unsigned int)>
   190e8:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   190ec:	e3130101 	tst	r3, #1073741824	; 0x40000000
   190f0:	0afffff9 	beq	190dc <CBcmMailBox::Flush()+0x18>
   190f4:	e8bd8010 	pop	{r4, pc}

000190f8 <CBcmMailBox::Read()>:
   190f8:	e5901000 	ldr	r1, [r0]
   190fc:	e3a02a0b 	mov	r2, #45056	; 0xb000
   19100:	e3432f00 	movt	r2, #16128	; 0x3f00
   19104:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   19108:	e3130101 	tst	r3, #1073741824	; 0x40000000
   1910c:	1afffffc 	bne	19104 <CBcmMailBox::Read()+0xc>
   19110:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   19114:	e200300f 	and	r3, r0, #15
   19118:	e1530001 	cmp	r3, r1
   1911c:	1afffff8 	bne	19104 <CBcmMailBox::Read()+0xc>
   19120:	e3c0000f 	bic	r0, r0, #15
   19124:	e12fff1e 	bx	lr

00019128 <CBcmMailBox::Write(unsigned int)>:
   19128:	e92d4070 	push	{r4, r5, r6, lr}
   1912c:	e3a02a0b 	mov	r2, #45056	; 0xb000
   19130:	e3432f00 	movt	r2, #16128	; 0x3f00
   19134:	e1a05000 	mov	r5, r0
   19138:	e1a04001 	mov	r4, r1
   1913c:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   19140:	e3530000 	cmp	r3, #0
   19144:	bafffffc 	blt	1913c <CBcmMailBox::Write(unsigned int)+0x14>
   19148:	e314000f 	tst	r4, #15
   1914c:	0a000005 	beq	19168 <CBcmMailBox::Write(unsigned int)+0x40>
   19150:	e30b1fd4 	movw	r1, #49108	; 0xbfd4
   19154:	e3401001 	movt	r1, #1
   19158:	e30b0fe4 	movw	r0, #49124	; 0xbfe4
   1915c:	e3400001 	movt	r0, #1
   19160:	e3a0205b 	mov	r2, #91	; 0x5b
   19164:	ebffda47 	bl	fa88 <assertion_failed>
   19168:	e3a03a0b 	mov	r3, #45056	; 0xb000
   1916c:	e3433f00 	movt	r3, #16128	; 0x3f00
   19170:	e5952000 	ldr	r2, [r5]
   19174:	e1844002 	orr	r4, r4, r2
   19178:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
   1917c:	e8bd8070 	pop	{r4, r5, r6, pc}

00019180 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   19180:	e30c3814 	movw	r3, #51220	; 0xc814
   19184:	e3403001 	movt	r3, #1
   19188:	e3a02000 	mov	r2, #0
   1918c:	e5832000 	str	r2, [r3]
   19190:	e12fff1e 	bx	lr
   19194:	00000000 	andeq	r0, r0, r0

00019198 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   19198:	e92d4030 	push	{r4, r5, lr}
   1919c:	e3520000 	cmp	r2, #0
   191a0:	13510000 	cmpne	r1, #0
   191a4:	e3a05000 	mov	r5, #0
   191a8:	e24dd044 	sub	sp, sp, #68	; 0x44
   191ac:	e1a04000 	mov	r4, r0
   191b0:	e59dc050 	ldr	ip, [sp, #80]	; 0x50
   191b4:	e59de054 	ldr	lr, [sp, #84]	; 0x54
   191b8:	e58d1010 	str	r1, [sp, #16]
   191bc:	e58d2014 	str	r2, [sp, #20]
   191c0:	e58dc018 	str	ip, [sp, #24]
   191c4:	e58de01c 	str	lr, [sp, #28]
   191c8:	eddd0b04 	vldr	d16, [sp, #16]
   191cc:	eddd1b06 	vldr	d17, [sp, #24]
   191d0:	e5803010 	str	r3, [r0, #16]
   191d4:	e5805014 	str	r5, [r0, #20]
   191d8:	e5805018 	str	r5, [r0, #24]
   191dc:	e580501c 	str	r5, [r0, #28]
   191e0:	e5805020 	str	r5, [r0, #32]
   191e4:	f4400a8f 	vst1.32	{d16-d17}, [r0]
   191e8:	1a000010 	bne	19230 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x98>
   191ec:	e28d0024 	add	r0, sp, #36	; 0x24
   191f0:	ebffc225 	bl	9a8c <CBcmPropertyTags::CBcmPropertyTags()>
   191f4:	e58d5000 	str	r5, [sp]
   191f8:	e28d0024 	add	r0, sp, #36	; 0x24
   191fc:	e3a01003 	mov	r1, #3
   19200:	e3401004 	movt	r1, #4
   19204:	e3a03014 	mov	r3, #20
   19208:	e28d2028 	add	r2, sp, #40	; 0x28
   1920c:	ebffc229 	bl	9ab8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   19210:	e1500005 	cmp	r0, r5
   19214:	1a00002a 	bne	192c4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x12c>
   19218:	eddf0b34 	vldr	d16, [pc, #208]	; 192f0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
   1921c:	f444078f 	vst1.32	{d16}, [r4]
   19220:	e28d0024 	add	r0, sp, #36	; 0x24
   19224:	ebffc21e 	bl	9aa4 <CBcmPropertyTags::~CBcmPropertyTags()>
   19228:	e594c008 	ldr	ip, [r4, #8]
   1922c:	e5943010 	ldr	r3, [r4, #16]
   19230:	e35c0000 	cmp	ip, #0
   19234:	0a00001c 	beq	192ac <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
   19238:	e594100c 	ldr	r1, [r4, #12]
   1923c:	e3510000 	cmp	r1, #0
   19240:	0a000019 	beq	192ac <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
   19244:	e3530008 	cmp	r3, #8
   19248:	8a00000a 	bhi	19278 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xe0>
   1924c:	e3000414 	movw	r0, #1044	; 0x414
   19250:	ebfffd43 	bl	18764 <operator new[](unsigned int)>
   19254:	e3a01000 	mov	r1, #0
   19258:	e1a03000 	mov	r3, r0
   1925c:	e3a02b01 	mov	r2, #1024	; 0x400
   19260:	e5843020 	str	r3, [r4, #32]
   19264:	e2800014 	add	r0, r0, #20
   19268:	ebffcd16 	bl	c6c8 <memset>
   1926c:	e594c008 	ldr	ip, [r4, #8]
   19270:	e594100c 	ldr	r1, [r4, #12]
   19274:	e5943010 	ldr	r3, [r4, #16]
   19278:	e58d100c 	str	r1, [sp, #12]
   1927c:	e30c26f8 	movw	r2, #50936	; 0xc6f8
   19280:	e3402001 	movt	r2, #1
   19284:	e58dc008 	str	ip, [sp, #8]
   19288:	e282100c 	add	r1, r2, #12
   1928c:	eddd0b02 	vldr	d16, [sp, #8]
   19290:	e1a00004 	mov	r0, r4
   19294:	f464178f 	vld1.32	{d17}, [r4]
   19298:	e5823034 	str	r3, [r2, #52]	; 0x34
   1929c:	edc20b08 	vstr	d16, [r2, #32]
   192a0:	f441178f 	vst1.32	{d17}, [r1]
   192a4:	e28dd044 	add	sp, sp, #68	; 0x44
   192a8:	e8bd8030 	pop	{r4, r5, pc}
   192ac:	f464078f 	vld1.32	{d16}, [r4]
   192b0:	e2842008 	add	r2, r4, #8
   192b4:	e594c000 	ldr	ip, [r4]
   192b8:	e5941004 	ldr	r1, [r4, #4]
   192bc:	f442078f 	vst1.32	{d16}, [r2]
   192c0:	eaffffdf 	b	19244 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
   192c4:	e28d1034 	add	r1, sp, #52	; 0x34
   192c8:	e1cd23d4 	ldrd	r2, [sp, #52]	; 0x34
   192cc:	f461078f 	vld1.32	{d16}, [r1]
   192d0:	e2422d0a 	sub	r2, r2, #640	; 0x280
   192d4:	e2433e1e 	sub	r3, r3, #480	; 0x1e0
   192d8:	e3530f96 	cmp	r3, #600	; 0x258
   192dc:	93520c05 	cmpls	r2, #1280	; 0x500
   192e0:	f444078f 	vst1.32	{d16}, [r4]
   192e4:	8affffcb 	bhi	19218 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x80>
   192e8:	eaffffcc 	b	19220 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   192ec:	e320f000 	nop	{0}
   192f0:	00000280 	.word	0x00000280
   192f4:	000001e0 	.word	0x000001e0

000192f8 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   192f8:	e92d4010 	push	{r4, lr}
   192fc:	e3a01014 	mov	r1, #20
   19300:	e1a04000 	mov	r4, r0
   19304:	e5900020 	ldr	r0, [r0, #32]
   19308:	ebfffd18 	bl	18770 <operator delete(void*, unsigned int)>
   1930c:	e1a00004 	mov	r0, r4
   19310:	e8bd8010 	pop	{r4, pc}

00019314 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   19314:	e5903010 	ldr	r3, [r0, #16]
   19318:	e3530008 	cmp	r3, #8
   1931c:	812fff1e 	bxhi	lr
   19320:	e5900020 	ldr	r0, [r0, #32]
   19324:	e1a03982 	lsl	r3, r2, #19
   19328:	e1a0c5a2 	lsr	ip, r2, #11
   1932c:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   19330:	e183318c 	orr	r3, r3, ip, lsl #3
   19334:	e1a02282 	lsl	r2, r2, #5
   19338:	e0801101 	add	r1, r0, r1, lsl #2
   1933c:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   19340:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   19344:	e1822003 	orr	r2, r2, r3
   19348:	e5812014 	str	r2, [r1, #20]
   1934c:	e12fff1e 	bx	lr

00019350 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   19350:	e5903010 	ldr	r3, [r0, #16]
   19354:	e3530008 	cmp	r3, #8
   19358:	95903020 	ldrls	r3, [r0, #32]
   1935c:	90831101 	addls	r1, r3, r1, lsl #2
   19360:	95812014 	strls	r2, [r1, #20]
   19364:	e12fff1e 	bx	lr

00019368 <CBcmFrameBuffer::Initialize()>:
   19368:	e92d4070 	push	{r4, r5, r6, lr}
   1936c:	e1a06000 	mov	r6, r0
   19370:	e30c46f8 	movw	r4, #50936	; 0xc6f8
   19374:	e3404001 	movt	r4, #1
   19378:	e24dd010 	sub	sp, sp, #16
   1937c:	e28d0008 	add	r0, sp, #8
   19380:	ebffc1c1 	bl	9a8c <CBcmPropertyTags::CBcmPropertyTags()>
   19384:	e1a01004 	mov	r1, r4
   19388:	e28d0008 	add	r0, sp, #8
   1938c:	e3a02070 	mov	r2, #112	; 0x70
   19390:	ebffc21c 	bl	9c08 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   19394:	e2505000 	subs	r5, r0, #0
   19398:	0a000032 	beq	19468 <CBcmFrameBuffer::Initialize()+0x100>
   1939c:	e594300c 	ldr	r3, [r4, #12]
   193a0:	e3530000 	cmp	r3, #0
   193a4:	0a00002e 	beq	19464 <CBcmFrameBuffer::Initialize()+0xfc>
   193a8:	e5943010 	ldr	r3, [r4, #16]
   193ac:	e3530000 	cmp	r3, #0
   193b0:	0a00002b 	beq	19464 <CBcmFrameBuffer::Initialize()+0xfc>
   193b4:	e5943020 	ldr	r3, [r4, #32]
   193b8:	e3530000 	cmp	r3, #0
   193bc:	0a000028 	beq	19464 <CBcmFrameBuffer::Initialize()+0xfc>
   193c0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   193c4:	e3530000 	cmp	r3, #0
   193c8:	0a000025 	beq	19464 <CBcmFrameBuffer::Initialize()+0xfc>
   193cc:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   193d0:	e3530000 	cmp	r3, #0
   193d4:	0a000022 	beq	19464 <CBcmFrameBuffer::Initialize()+0xfc>
   193d8:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   193dc:	e3530000 	cmp	r3, #0
   193e0:	0a00001f 	beq	19464 <CBcmFrameBuffer::Initialize()+0xfc>
   193e4:	e5961010 	ldr	r1, [r6, #16]
   193e8:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   193ec:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
   193f0:	e5863014 	str	r3, [r6, #20]
   193f4:	e3510008 	cmp	r1, #8
   193f8:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
   193fc:	e1c621f8 	strd	r2, [r6, #24]
   19400:	8a000018 	bhi	19468 <CBcmFrameBuffer::Initialize()+0x100>
   19404:	e5963020 	ldr	r3, [r6, #32]
   19408:	e28d000c 	add	r0, sp, #12
   1940c:	eddf0b1b 	vldr	d16, [pc, #108]	; 19480 <CBcmFrameBuffer::Initialize()+0x118>
   19410:	e283300c 	add	r3, r3, #12
   19414:	f443078f 	vst1.32	{d16}, [r3]
   19418:	ebffc19b 	bl	9a8c <CBcmPropertyTags::CBcmPropertyTags()>
   1941c:	e5962020 	ldr	r2, [r6, #32]
   19420:	e3003408 	movw	r3, #1032	; 0x408
   19424:	e28d000c 	add	r0, sp, #12
   19428:	e58d3000 	str	r3, [sp]
   1942c:	e308100b 	movw	r1, #32779	; 0x800b
   19430:	e3401004 	movt	r1, #4
   19434:	e3003414 	movw	r3, #1044	; 0x414
   19438:	ebffc19e 	bl	9ab8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1943c:	e2505000 	subs	r5, r0, #0
   19440:	e28d000c 	add	r0, sp, #12
   19444:	0a000003 	beq	19458 <CBcmFrameBuffer::Initialize()+0xf0>
   19448:	e5963020 	ldr	r3, [r6, #32]
   1944c:	e593300c 	ldr	r3, [r3, #12]
   19450:	e3530000 	cmp	r3, #0
   19454:	0a000000 	beq	1945c <CBcmFrameBuffer::Initialize()+0xf4>
   19458:	e3a05000 	mov	r5, #0
   1945c:	ebffc190 	bl	9aa4 <CBcmPropertyTags::~CBcmPropertyTags()>
   19460:	ea000000 	b	19468 <CBcmFrameBuffer::Initialize()+0x100>
   19464:	e1a05003 	mov	r5, r3
   19468:	e28d0008 	add	r0, sp, #8
   1946c:	ebffc18c 	bl	9aa4 <CBcmPropertyTags::~CBcmPropertyTags()>
   19470:	e1a00005 	mov	r0, r5
   19474:	e28dd010 	add	sp, sp, #16
   19478:	e8bd8070 	pop	{r4, r5, r6, pc}
   1947c:	e320f000 	nop	{0}
   19480:	00000000 	.word	0x00000000
   19484:	00000100 	.word	0x00000100

00019488 <CBcmFrameBuffer::GetWidth() const>:
   19488:	e5900000 	ldr	r0, [r0]
   1948c:	e12fff1e 	bx	lr

00019490 <CBcmFrameBuffer::GetHeight() const>:
   19490:	e5900004 	ldr	r0, [r0, #4]
   19494:	e12fff1e 	bx	lr

00019498 <CBcmFrameBuffer::GetVirtWidth() const>:
   19498:	e5900008 	ldr	r0, [r0, #8]
   1949c:	e12fff1e 	bx	lr

000194a0 <CBcmFrameBuffer::GetVirtHeight() const>:
   194a0:	e590000c 	ldr	r0, [r0, #12]
   194a4:	e12fff1e 	bx	lr

000194a8 <CBcmFrameBuffer::GetPitch() const>:
   194a8:	e590001c 	ldr	r0, [r0, #28]
   194ac:	e12fff1e 	bx	lr

000194b0 <CBcmFrameBuffer::GetDepth() const>:
   194b0:	e5900010 	ldr	r0, [r0, #16]
   194b4:	e12fff1e 	bx	lr

000194b8 <CBcmFrameBuffer::GetBuffer() const>:
   194b8:	e5900014 	ldr	r0, [r0, #20]
   194bc:	e12fff1e 	bx	lr

000194c0 <CBcmFrameBuffer::GetSize() const>:
   194c0:	e5900018 	ldr	r0, [r0, #24]
   194c4:	e12fff1e 	bx	lr

000194c8 <CBcmFrameBuffer::UpdatePalette()>:
   194c8:	e5903010 	ldr	r3, [r0, #16]
   194cc:	e92d4030 	push	{r4, r5, lr}
   194d0:	e3530008 	cmp	r3, #8
   194d4:	e24dd014 	sub	sp, sp, #20
   194d8:	83a05001 	movhi	r5, #1
   194dc:	9a000002 	bls	194ec <CBcmFrameBuffer::UpdatePalette()+0x24>
   194e0:	e1a00005 	mov	r0, r5
   194e4:	e28dd014 	add	sp, sp, #20
   194e8:	e8bd8030 	pop	{r4, r5, pc}
   194ec:	e5903020 	ldr	r3, [r0, #32]
   194f0:	e1a04000 	mov	r4, r0
   194f4:	eddf0b17 	vldr	d16, [pc, #92]	; 19558 <CBcmFrameBuffer::UpdatePalette()+0x90>
   194f8:	e28d000c 	add	r0, sp, #12
   194fc:	e283300c 	add	r3, r3, #12
   19500:	f443078f 	vst1.32	{d16}, [r3]
   19504:	ebffc160 	bl	9a8c <CBcmPropertyTags::CBcmPropertyTags()>
   19508:	e5942020 	ldr	r2, [r4, #32]
   1950c:	e3003408 	movw	r3, #1032	; 0x408
   19510:	e28d000c 	add	r0, sp, #12
   19514:	e58d3000 	str	r3, [sp]
   19518:	e308100b 	movw	r1, #32779	; 0x800b
   1951c:	e3401004 	movt	r1, #4
   19520:	e3003414 	movw	r3, #1044	; 0x414
   19524:	ebffc163 	bl	9ab8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   19528:	e2505000 	subs	r5, r0, #0
   1952c:	e28d000c 	add	r0, sp, #12
   19530:	0a000003 	beq	19544 <CBcmFrameBuffer::UpdatePalette()+0x7c>
   19534:	e5943020 	ldr	r3, [r4, #32]
   19538:	e593300c 	ldr	r3, [r3, #12]
   1953c:	e3530000 	cmp	r3, #0
   19540:	0a000000 	beq	19548 <CBcmFrameBuffer::UpdatePalette()+0x80>
   19544:	e3a05000 	mov	r5, #0
   19548:	ebffc155 	bl	9aa4 <CBcmPropertyTags::~CBcmPropertyTags()>
   1954c:	e1a00005 	mov	r0, r5
   19550:	e28dd014 	add	sp, sp, #20
   19554:	e8bd8030 	pop	{r4, r5, pc}
   19558:	00000000 	.word	0x00000000
   1955c:	00000100 	.word	0x00000100

00019560 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   19560:	e92d4070 	push	{r4, r5, r6, lr}
   19564:	e1a05001 	mov	r5, r1
   19568:	e1a06002 	mov	r6, r2
   1956c:	e24dd020 	sub	sp, sp, #32
   19570:	e28d0008 	add	r0, sp, #8
   19574:	ebffc144 	bl	9a8c <CBcmPropertyTags::CBcmPropertyTags()>
   19578:	e3a03008 	mov	r3, #8
   1957c:	e28d0008 	add	r0, sp, #8
   19580:	e58d3000 	str	r3, [sp]
   19584:	e3081009 	movw	r1, #32777	; 0x8009
   19588:	e3401004 	movt	r1, #4
   1958c:	e3a03014 	mov	r3, #20
   19590:	e28d200c 	add	r2, sp, #12
   19594:	e58d5018 	str	r5, [sp, #24]
   19598:	e58d601c 	str	r6, [sp, #28]
   1959c:	ebffc145 	bl	9ab8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   195a0:	e2504000 	subs	r4, r0, #0
   195a4:	0a000006 	beq	195c4 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   195a8:	e59d3018 	ldr	r3, [sp, #24]
   195ac:	e1530005 	cmp	r3, r5
   195b0:	13a04000 	movne	r4, #0
   195b4:	059d401c 	ldreq	r4, [sp, #28]
   195b8:	00444006 	subeq	r4, r4, r6
   195bc:	016f4f14 	clzeq	r4, r4
   195c0:	01a042a4 	lsreq	r4, r4, #5
   195c4:	e28d0008 	add	r0, sp, #8
   195c8:	ebffc135 	bl	9aa4 <CBcmPropertyTags::~CBcmPropertyTags()>
   195cc:	e1a00004 	mov	r0, r4
   195d0:	e28dd020 	add	sp, sp, #32
   195d4:	e8bd8070 	pop	{r4, r5, r6, pc}

000195d8 <CBcmFrameBuffer::WaitForVerticalSync()>:
   195d8:	e92d4010 	push	{r4, lr}
   195dc:	e24dd020 	sub	sp, sp, #32
   195e0:	e28d000c 	add	r0, sp, #12
   195e4:	ebffc128 	bl	9a8c <CBcmPropertyTags::CBcmPropertyTags()>
   195e8:	e3a03000 	mov	r3, #0
   195ec:	e58d3000 	str	r3, [sp]
   195f0:	e3a03010 	mov	r3, #16
   195f4:	e08d2003 	add	r2, sp, r3
   195f8:	e28d000c 	add	r0, sp, #12
   195fc:	e308100e 	movw	r1, #32782	; 0x800e
   19600:	e3401004 	movt	r1, #4
   19604:	ebffc12b 	bl	9ab8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   19608:	e1a04000 	mov	r4, r0
   1960c:	e28d000c 	add	r0, sp, #12
   19610:	ebffc123 	bl	9aa4 <CBcmPropertyTags::~CBcmPropertyTags()>
   19614:	e1a00004 	mov	r0, r4
   19618:	e28dd020 	add	sp, sp, #32
   1961c:	e8bd8010 	pop	{r4, pc}

00019620 <CDevice::~CDevice()>:
   19620:	e12fff1e 	bx	lr

00019624 <CDevice::Read(void*, unsigned int)>:
   19624:	e3e00000 	mvn	r0, #0
   19628:	e12fff1e 	bx	lr

0001962c <CDevice::Seek(unsigned long long)>:
   1962c:	e3e00000 	mvn	r0, #0
   19630:	e3e01000 	mvn	r1, #0
   19634:	e12fff1e 	bx	lr

00019638 <CDevice::~CDevice()>:
   19638:	e92d4010 	push	{r4, lr}
   1963c:	e3a01004 	mov	r1, #4
   19640:	e1a04000 	mov	r4, r0
   19644:	ebfffc49 	bl	18770 <operator delete(void*, unsigned int)>
   19648:	e1a00004 	mov	r0, r4
   1964c:	e8bd8010 	pop	{r4, pc}

00019650 <CDevice::CDevice()>:
   19650:	e59f3004 	ldr	r3, [pc, #4]	; 1965c <CDevice::CDevice()+0xc>
   19654:	e5803000 	str	r3, [r0]
   19658:	e12fff1e 	bx	lr
   1965c:	0001c000 	.word	0x0001c000

00019660 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)>:
   19660:	e92d4010 	push	{r4, lr}
   19664:	e3510006 	cmp	r1, #6
   19668:	e1a04000 	mov	r4, r0
   1966c:	e5c01000 	strb	r1, [r0]
   19670:	e5c02001 	strb	r2, [r0, #1]
   19674:	8a000009 	bhi	196a0 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)+0x40>
   19678:	e3520007 	cmp	r2, #7
   1967c:	9a000005 	bls	19698 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)+0x38>
   19680:	e30c1028 	movw	r1, #49192	; 0xc028
   19684:	e3401001 	movt	r1, #1
   19688:	e30c0050 	movw	r0, #49232	; 0xc050
   1968c:	e3400001 	movt	r0, #1
   19690:	e3a0201e 	mov	r2, #30
   19694:	ebffd8fb 	bl	fa88 <assertion_failed>
   19698:	e1a00004 	mov	r0, r4
   1969c:	e8bd8010 	pop	{r4, pc}
   196a0:	e3a0201d 	mov	r2, #29
   196a4:	e30c1028 	movw	r1, #49192	; 0xc028
   196a8:	e3401001 	movt	r1, #1
   196ac:	e30c0038 	movw	r0, #49208	; 0xc038
   196b0:	e3400001 	movt	r0, #1
   196b4:	ebffd8f3 	bl	fa88 <assertion_failed>
   196b8:	e5d42001 	ldrb	r2, [r4, #1]
   196bc:	eaffffed 	b	19678 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)+0x18>

000196c0 <CGPIOClock::~CGPIOClock()>:
   196c0:	e5d01000 	ldrb	r1, [r0]
   196c4:	e300320e 	movw	r3, #526	; 0x20e
   196c8:	e34037e2 	movt	r3, #2018	; 0x7e2
   196cc:	e0813003 	add	r3, r1, r3
   196d0:	e3a02020 	mov	r2, #32
   196d4:	e3452a00 	movt	r2, #23040	; 0x5a00
   196d8:	e1a03183 	lsl	r3, r3, #3
   196dc:	e5832000 	str	r2, [r3]
   196e0:	e5932000 	ldr	r2, [r3]
   196e4:	e3120080 	tst	r2, #128	; 0x80
   196e8:	1afffffc 	bne	196e0 <CGPIOClock::~CGPIOClock()+0x20>
   196ec:	e12fff1e 	bx	lr

000196f0 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)>:
   196f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   196f4:	e3530003 	cmp	r3, #3
   196f8:	e1a05003 	mov	r5, r3
   196fc:	e1a07000 	mov	r7, r0
   19700:	e1a08001 	mov	r8, r1
   19704:	e1a06002 	mov	r6, r2
   19708:	8a000029 	bhi	197b4 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xc4>
   1970c:	e30c3018 	movw	r3, #49176	; 0xc018
   19710:	e3403001 	movt	r3, #1
   19714:	e7933105 	ldr	r3, [r3, r5, lsl #2]
   19718:	e1530008 	cmp	r3, r8
   1971c:	93580a01 	cmpls	r8, #4096	; 0x1000
   19720:	3a000005 	bcc	1973c <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0x4c>
   19724:	e30c1028 	movw	r1, #49192	; 0xc028
   19728:	e3401001 	movt	r1, #1
   1972c:	e30c007c 	movw	r0, #49276	; 0xc07c
   19730:	e3400001 	movt	r0, #1
   19734:	e3a0202c 	mov	r2, #44	; 0x2c
   19738:	ebffd8d2 	bl	fa88 <assertion_failed>
   1973c:	e3560a01 	cmp	r6, #4096	; 0x1000
   19740:	2a000022 	bcs	197d0 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xe0>
   19744:	e5d73000 	ldrb	r3, [r7]
   19748:	e300420e 	movw	r4, #526	; 0x20e
   1974c:	e34047e2 	movt	r4, #2018	; 0x7e2
   19750:	e0834004 	add	r4, r3, r4
   19754:	e3a03020 	mov	r3, #32
   19758:	e3453a00 	movt	r3, #23040	; 0x5a00
   1975c:	e1a04184 	lsl	r4, r4, #3
   19760:	e5843000 	str	r3, [r4]
   19764:	e5943000 	ldr	r3, [r4]
   19768:	e3130080 	tst	r3, #128	; 0x80
   1976c:	1afffffc 	bne	19764 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0x74>
   19770:	e386645a 	orr	r6, r6, #1509949440	; 0x5a000000
   19774:	e3a0000a 	mov	r0, #10
   19778:	e1866608 	orr	r6, r6, r8, lsl #12
   1977c:	e5846004 	str	r6, [r4, #4]
   19780:	ebffcb84 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   19784:	e1a05485 	lsl	r5, r5, #9
   19788:	e5d73001 	ldrb	r3, [r7, #1]
   1978c:	e385545a 	orr	r5, r5, #1509949440	; 0x5a000000
   19790:	e3a0000a 	mov	r0, #10
   19794:	e1855003 	orr	r5, r5, r3
   19798:	e5845000 	str	r5, [r4]
   1979c:	ebffcb7d 	bl	c598 <CTimer::SimpleusDelay(unsigned int)>
   197a0:	e5943000 	ldr	r3, [r4]
   197a4:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   197a8:	e3833010 	orr	r3, r3, #16
   197ac:	e5843000 	str	r3, [r4]
   197b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   197b4:	e30c1028 	movw	r1, #49192	; 0xc028
   197b8:	e3401001 	movt	r1, #1
   197bc:	e30c0070 	movw	r0, #49264	; 0xc070
   197c0:	e3400001 	movt	r0, #1
   197c4:	e3a0202b 	mov	r2, #43	; 0x2b
   197c8:	ebffd8ae 	bl	fa88 <assertion_failed>
   197cc:	eaffffce 	b	1970c <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0x1c>
   197d0:	e30c1028 	movw	r1, #49192	; 0xc028
   197d4:	e3401001 	movt	r1, #1
   197d8:	e30c00a8 	movw	r0, #49320	; 0xc0a8
   197dc:	e3400001 	movt	r0, #1
   197e0:	e3a0202d 	mov	r2, #45	; 0x2d
   197e4:	ebffd8a7 	bl	fa88 <assertion_failed>
   197e8:	eaffffd5 	b	19744 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0x54>

000197ec <CGPIOClock::Stop()>:
   197ec:	e5d02000 	ldrb	r2, [r0]
   197f0:	e300320e 	movw	r3, #526	; 0x20e
   197f4:	e34037e2 	movt	r3, #2018	; 0x7e2
   197f8:	e0823003 	add	r3, r2, r3
   197fc:	e3a02020 	mov	r2, #32
   19800:	e3452a00 	movt	r2, #23040	; 0x5a00
   19804:	e1a03183 	lsl	r3, r3, #3
   19808:	e5832000 	str	r2, [r3]
   1980c:	e5932000 	ldr	r2, [r3]
   19810:	e3120080 	tst	r2, #128	; 0x80
   19814:	1afffffc 	bne	1980c <CGPIOClock::Stop()+0x20>
   19818:	e12fff1e 	bx	lr
